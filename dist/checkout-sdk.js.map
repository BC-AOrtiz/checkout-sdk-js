{"version":3,"sources":["webpack://checkoutKit/webpack/bootstrap","webpack://checkoutKit/external \"tslib\"","webpack://checkoutKit/external \"@bigcommerce/data-store\"","webpack://checkoutKit/external \"lodash\"","webpack://checkoutKit/external \"rxjs\"","webpack://checkoutKit/./src/shipping/consignment-actions.ts","webpack://checkoutKit/external \"@bigcommerce/memoize\"","webpack://checkoutKit/./src/customer/customer-strategy-actions.ts","webpack://checkoutKit/./src/payment/payment-strategy-actions.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-actions.ts","webpack://checkoutKit/./src/common/error/errors/missing-data-error.ts","webpack://checkoutKit/./src/checkout/checkout-actions.ts","webpack://checkoutKit/external \"rxjs/operators\"","webpack://checkoutKit/./src/coupon/coupon-actions.ts","webpack://checkoutKit/./src/billing/billing-address-actions.ts","webpack://checkoutKit/./src/order/order-actions.ts","webpack://checkoutKit/./src/payment/payment-method-actions.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-actions.ts","webpack://checkoutKit/./src/coupon/gift-certificate-actions.ts","webpack://checkoutKit/./src/payment/instrument/instrument-actions.ts","webpack://checkoutKit/./src/embedded-checkout/embedded-checkout-events.ts","webpack://checkoutKit/./src/common/error/errors/standard-error.ts","webpack://checkoutKit/./src/common/utility/set-prototype-of.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-actions.ts","webpack://checkoutKit/./src/common/error/errors/request-error.ts","webpack://checkoutKit/./src/store-credit/store-credit-actions.ts","webpack://checkoutKit/./src/config/config-actions.ts","webpack://checkoutKit/./src/common/utility/is-plain-object.ts","webpack://checkoutKit/./src/geography/country-actions.ts","webpack://checkoutKit/./src/shipping/shipping-country-actions.ts","webpack://checkoutKit/external \"@bigcommerce/request-sender\"","webpack://checkoutKit/./src/payment/payment-status-types.ts","webpack://checkoutKit/./src/payment/errors/payment-method-client-unavailable-error.ts","webpack://checkoutKit/external \"@bigcommerce/script-loader\"","webpack://checkoutKit/./src/common/http-request/content-type.ts","webpack://checkoutKit/./src/payment/payment-actions.ts","webpack://checkoutKit/./src/common/error/errors/invalid-argument-error.ts","webpack://checkoutKit/./src/payment/payment-method-types.ts","webpack://checkoutKit/./src/embedded-checkout/is-iframe-event.ts","webpack://checkoutKit/external \"shallowequal\"","webpack://checkoutKit/./src/common/utility/is-equal.ts","webpack://checkoutKit/external \"@bigcommerce/form-poster\"","webpack://checkoutKit/external \"local-storage-fallback\"","webpack://checkoutKit/external \"reselect\"","webpack://checkoutKit/./src/embedded-checkout/iframe-event-poster.ts","webpack://checkoutKit/./src/customer/customer-actions.ts","webpack://checkoutKit/./src/order/spam-protection/spam-protection-actions.ts","webpack://checkoutKit/./src/common/error/errors/not-initialized-error.ts","webpack://checkoutKit/./src/payment/errors/payment-method-invalid-error.ts","webpack://checkoutKit/./src/common/selector/with-memoized-combiner.ts","webpack://checkoutKit/./src/common/error/error-actions.ts","webpack://checkoutKit/./src/payment/payment-method-action-creator.ts","webpack://checkoutKit/./src/payment/payment-method-request-sender.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/embedded-content-events.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-event-listener.ts","webpack://checkoutKit/./src/checkout/checkout-default-includes.ts","webpack://checkoutKit/./src/cart/map-to-internal-line-items.ts","webpack://checkoutKit/./src/cart/map-gift-certificate-to-internal-line-item.ts","webpack://checkoutKit/./src/common/http-request/internal-api-headers.ts","webpack://checkoutKit/./src/checkout/checkout-params.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-sdk-creator.ts","webpack://checkoutKit/./src/cart/map-to-internal-line-item.ts","webpack://checkoutKit/./src/common/error/throw-error-action.ts","webpack://checkoutKit/./src/common/utility/amount-transformer.ts","webpack://checkoutKit/./src/common/url/parse-url.ts","webpack://checkoutKit/./src/common/data-store/cache-action.ts","webpack://checkoutKit/./src/common/data-store/is-action-options.ts","webpack://checkoutKit/./src/common/data-store/cachable-action-decorator.ts","webpack://checkoutKit/./src/common/utility/bind-decorator.ts","webpack://checkoutKit/external \"iframe-resizer\"","webpack://checkoutKit/external \"iframe-resizer/js/iframeResizer.contentWindow\"","webpack://checkoutKit/./src/common/utility/omit-deep.ts","webpack://checkoutKit/./src/checkout/checkout-action-creator.ts","webpack://checkoutKit/./src/shipping/consignment-action-creator.ts","webpack://checkoutKit/./src/shipping/consignment-request-sender.ts","webpack://checkoutKit/./src/payment/strategies/masterpass/get-callback-url.ts","webpack://checkoutKit/./src/shipping/map-to-internal-shipping-option.ts","webpack://checkoutKit/./src/common/utility/is-private.ts","webpack://checkoutKit/./src/common/error/errors/unrecoverable-error.ts","webpack://checkoutKit/./src/common/error/errors/map-from-internal-error-response.ts","webpack://checkoutKit/./src/common/error/errors/map-from-payment-error-response.ts","webpack://checkoutKit/./src/common/error/request-error-factory.ts","webpack://checkoutKit/./src/common/error/errors/map-from-storefront-error-response.ts","webpack://checkoutKit/./src/common/error/clear-error-reducer.ts","webpack://checkoutKit/./src/common/utility/replace.ts","webpack://checkoutKit/./src/common/utility/object-set.ts","webpack://checkoutKit/./src/billing/billing-address-state.ts","webpack://checkoutKit/./src/billing/billing-address-reducer.ts","webpack://checkoutKit/./src/common/utility/array-replace.ts","webpack://checkoutKit/./src/common/utility/object-merge.ts","webpack://checkoutKit/./src/cart/cart-state.ts","webpack://checkoutKit/./src/cart/cart-reducer.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-state.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-reducer.ts","webpack://checkoutKit/./src/config/config-state.ts","webpack://checkoutKit/./src/config/config-reducer.ts","webpack://checkoutKit/./src/coupon/coupon-state.ts","webpack://checkoutKit/./src/coupon/coupon-reducer.ts","webpack://checkoutKit/./src/coupon/gift-certificate-state.ts","webpack://checkoutKit/./src/coupon/gift-certificate-reducer.ts","webpack://checkoutKit/./src/customer/customer-state.ts","webpack://checkoutKit/./src/customer/customer-reducer.ts","webpack://checkoutKit/./src/customer/customer-strategy-state.ts","webpack://checkoutKit/./src/customer/customer-strategy-reducer.ts","webpack://checkoutKit/./src/geography/country-state.ts","webpack://checkoutKit/./src/geography/country-reducer.ts","webpack://checkoutKit/./src/order/order-state.ts","webpack://checkoutKit/./src/order/order-reducer.ts","webpack://checkoutKit/./src/payment/payment-reducer.ts","webpack://checkoutKit/./src/payment/payment-method-state.ts","webpack://checkoutKit/./src/payment/payment-method-reducer.ts","webpack://checkoutKit/./src/common/utility/merge-or-push.ts","webpack://checkoutKit/./src/payment/payment-strategy-state.ts","webpack://checkoutKit/./src/payment/payment-strategy-reducer.ts","webpack://checkoutKit/./src/payment/instrument/instrument-state.ts","webpack://checkoutKit/./src/payment/instrument/instrument-reducer.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-state.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-reducer.ts","webpack://checkoutKit/./src/shipping/consignment-state.ts","webpack://checkoutKit/./src/shipping/consignment-reducer.ts","webpack://checkoutKit/./src/shipping/shipping-country-state.ts","webpack://checkoutKit/./src/shipping/shipping-country-reducer.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-state.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-reducer.ts","webpack://checkoutKit/./src/store-credit/store-credit-reducer.ts","webpack://checkoutKit/./src/checkout/checkout-state.ts","webpack://checkoutKit/./src/checkout/checkout-reducer.ts","webpack://checkoutKit/./src/common/utility/create-freeze-proxy.ts","webpack://checkoutKit/./src/form/form-selector.ts","webpack://checkoutKit/./src/address/is-address-equal.ts","webpack://checkoutKit/./src/shipping/consignment-selector.ts","webpack://checkoutKit/./src/store-credit/store-credit-state.ts","webpack://checkoutKit/./src/checkout/create-internal-checkout-selectors.ts","webpack://checkoutKit/./src/billing/billing-address-selector.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-selector.ts","webpack://checkoutKit/./src/coupon/coupon-selector.ts","webpack://checkoutKit/./src/customer/customer-selector.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-selector.ts","webpack://checkoutKit/./src/shipping/shipping-address-selector.ts","webpack://checkoutKit/./src/payment/payment-selector.ts","webpack://checkoutKit/./src/cart/cart-selector.ts","webpack://checkoutKit/./src/config/config-selector.ts","webpack://checkoutKit/./src/geography/country-selector.ts","webpack://checkoutKit/./src/customer/customer-strategy-selector.ts","webpack://checkoutKit/./src/coupon/gift-certificate-selector.ts","webpack://checkoutKit/./src/payment/instrument/instrument-selector.ts","webpack://checkoutKit/./src/payment/payment-method-selector.ts","webpack://checkoutKit/./src/payment/payment-strategy-selector.ts","webpack://checkoutKit/./src/shipping/shipping-country-selector.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-selector.ts","webpack://checkoutKit/./src/checkout/checkout-selector.ts","webpack://checkoutKit/./src/order/order-selector.ts","webpack://checkoutKit/./src/store-credit/store-credit-selector.ts","webpack://checkoutKit/./src/checkout/create-checkout-store.ts","webpack://checkoutKit/./src/checkout/create-action-transformer.ts","webpack://checkoutKit/./src/common/error/create-request-error-factory.ts","webpack://checkoutKit/./src/checkout/create-checkout-store-reducer.ts","webpack://checkoutKit/./src/checkout/errors/checkout-not-available-error.ts","webpack://checkoutKit/./src/checkout/checkout-request-sender.ts","webpack://checkoutKit/./src/coupon/map-to-internal-coupon.ts","webpack://checkoutKit/./src/address/map-to-internal-address.ts","webpack://checkoutKit/./src/billing/is-billing-address-like.ts","webpack://checkoutKit/./src/common/selector/selector-decorator.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-error-selector.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-status-selector.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-selectors.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-initializer.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/checkout-button-method-type.ts","webpack://checkoutKit/./src/common/dom/is-element-id.ts","webpack://checkoutKit/./src/common/dom/set-unique-element-id.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-strategy-action-creator.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/braintree/braintree-paypal-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/googlepay/googlepay-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/masterpass/masterpass-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/paypal/paypal-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-initializer.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-registry.ts","webpack://checkoutKit/./src/embedded-checkout/errors/not-embeddable-error.ts","webpack://checkoutKit/./src/common/storage/browser-storage.ts","webpack://checkoutKit/./src/embedded-checkout/errors/invalid-login-token-error.ts","webpack://checkoutKit/./src/embedded-checkout/embedded-checkout.ts","webpack://checkoutKit/./src/embedded-checkout/loading-indicator.ts","webpack://checkoutKit/./src/embedded-checkout/resizable-iframe-creator.ts","webpack://checkoutKit/./src/embedded-checkout/embed-checkout.ts","webpack://checkoutKit/./src/common/utility/cache-key-maps.ts","webpack://checkoutKit/./src/common/utility/cache-key-resolver.ts","webpack://checkoutKit/external \"@bigcommerce/bigpay-client\"","webpack://checkoutKit/external \"messageformat\"","webpack://checkoutKit/./src/common/error/errors/timeout-error.ts","webpack://checkoutKit/./src/common/selector/create-selector.ts","webpack://checkoutKit/./src/common/http-request/join-includes.ts","webpack://checkoutKit/./src/config/config-action-creator.ts","webpack://checkoutKit/./src/config/config-request-sender.ts","webpack://checkoutKit/./src/billing/billing-address-request-sender.ts","webpack://checkoutKit/./src/common/registry/registry.ts","webpack://checkoutKit/./src/payment/strategies/masterpass/masterpass-script-loader.ts","webpack://checkoutKit/./src/remote-checkout/errors/remote-checkout-synchronization-error.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-braintree-initializer.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-stripe-initializer.ts","webpack://checkoutKit/./src/customer/map-to-internal-customer.ts","webpack://checkoutKit/./src/coupon/map-to-internal-gift-certificate.ts","webpack://checkoutKit/./src/order/map-to-internal-order.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-script-loader.ts","webpack://checkoutKit/./src/common/iframe/iframe-resizer.ts","webpack://checkoutKit/./src/common/error/error-action-creator.ts","webpack://checkoutKit/./src/common/utility/get-environment.ts","webpack://checkoutKit/./src/common/log/console-logger.ts","webpack://checkoutKit/./src/common/log/noop-logger.ts","webpack://checkoutKit/./src/common/log/get-default-logger.ts","webpack://checkoutKit/./src/common/log/create-logger.ts","webpack://checkoutKit/./src/coupon/coupon-action-creator.ts","webpack://checkoutKit/./src/coupon/coupon-request-sender.ts","webpack://checkoutKit/./src/coupon/gift-certificate-action-creator.ts","webpack://checkoutKit/./src/coupon/gift-certificate-request-sender.ts","webpack://checkoutKit/./src/customer/customer-strategy-action-creator.ts","webpack://checkoutKit/./src/payment/strategies/amazon-pay/amazon-pay-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-visacheckout-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/braintree/create-braintree-visacheckout-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/braintree/visacheckout-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay-script-loader.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-request-sender.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-action-creator.ts","webpack://checkoutKit/./src/customer/customer-action-creator.ts","webpack://checkoutKit/./src/customer/customer-request-sender.ts","webpack://checkoutKit/./src/common/error/errors/not-implemented-error.ts","webpack://checkoutKit/./src/customer/strategies/amazon/amazon-pay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/braintree/braintree-visacheckout-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/chasepay/chasepay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/default/default-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/googlepay/googlepay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/masterpass/masterpass-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/square/square-customer-strategy.ts","webpack://checkoutKit/./src/geography/country-action-creator.ts","webpack://checkoutKit/./src/geography/country-request-sender.ts","webpack://checkoutKit/./src/order/order-request-sender.ts","webpack://checkoutKit/./src/order/order-action-creator.ts","webpack://checkoutKit/./src/common/dom/mutation-observer.ts","webpack://checkoutKit/./src/order/spam-protection/errors/spam-protection-failed-error.ts","webpack://checkoutKit/./src/order/spam-protection/errors/spam-protection-not-completed-error.ts","webpack://checkoutKit/./src/order/spam-protection/google-recaptcha.ts","webpack://checkoutKit/./src/order/spam-protection/google-recaptcha-script-loader.ts","webpack://checkoutKit/./src/order/spam-protection/spam-protection-action-creator.ts","webpack://checkoutKit/./src/order/errors/order-finalization-not-required-error.ts","webpack://checkoutKit/./src/payment/payment-strategy-type.ts","webpack://checkoutKit/./src/payment/payment-strategy-action-creator.ts","webpack://checkoutKit/./src/cart/cart-comparator.ts","webpack://checkoutKit/./src/cart/errors/cart-changed-error.ts","webpack://checkoutKit/./src/checkout/checkout-validator.ts","webpack://checkoutKit/./src/store-credit/store-credit-action-creator.ts","webpack://checkoutKit/./src/store-credit/store-credit-request-sender.ts","webpack://checkoutKit/./src/payment/payment-action-creator.ts","webpack://checkoutKit/./src/payment/payment-request-sender.ts","webpack://checkoutKit/./src/payment/is-vaulted-instrument.ts","webpack://checkoutKit/./src/payment/payment-request-transformer.ts","webpack://checkoutKit/./src/payment/strategies/adyenv2/adyenv2.ts","webpack://checkoutKit/./src/payment/payment-strategy-registry.ts","webpack://checkoutKit/./src/payment/errors/payment-argument-invalid-error.ts","webpack://checkoutKit/./src/payment/strategies/adyenv2/adyenv2-payment-strategy.ts","webpack://checkoutKit/./src/order/order-params.ts","webpack://checkoutKit/./src/payment/strategies/adyenv2/adyenv2-script-loader.ts","webpack://checkoutKit/./src/payment/errors/payment-method-cancelled-error.ts","webpack://checkoutKit/./src/payment/strategies/affirm/affirm-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/affirm/affirmJs.ts","webpack://checkoutKit/./src/payment/strategies/affirm/affirm-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/afterpay/afterpay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/afterpay/afterpay-script-loader.ts","webpack://checkoutKit/./src/address/is-internal-address-equal.ts","webpack://checkoutKit/./src/common/utility/omit-private.ts","webpack://checkoutKit/./src/address/map-from-internal-address.ts","webpack://checkoutKit/./src/payment/strategies/amazon-pay/amazon-pay-payment-strategy.ts","webpack://checkoutKit/./src/common/overlay/overlay.ts","webpack://checkoutKit/./src/common/utility/cancellable-promise.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-payment-processor.ts","webpack://checkoutKit/./src/payment/errors/payment-method-failed-error.ts","webpack://checkoutKit/./src/payment/is-credit-card-like.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-credit-card-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-paypal-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/cardinal/cardinal.ts","webpack://checkoutKit/./src/payment/strategies/braintree/is-braintree-error.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-visacheckout-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/cardinal/cardinal-three-d-secure-flow.ts","webpack://checkoutKit/./src/payment/strategies/cardinal/cardinal-client.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay.ts","webpack://checkoutKit/./src/payment/strategies/cardinal/cardinal-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/square/square-form.ts","webpack://checkoutKit/./src/payment/strategies/converge/converge-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/credit-card/credit-card-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/cybersource/cybersource-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/klarna/klarna-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/klarna/klarna-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/legacy/legacy-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/masterpass/masterpass-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/no-payment/no-payment-data-required-strategy.ts","webpack://checkoutKit/./src/payment/strategies/offline/offline-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/offsite/offsite-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-pro-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-express-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/sage-pay/sage-pay-payment-strategy.ts","webpack://checkoutKit/./src/common/error/errors/unsupported-browser-error.ts","webpack://checkoutKit/./src/payment/strategies/square/square-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/square/square-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/stripev3/stripev3-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/stripev3/stripev3-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/wepay/wepay-risk-client.ts","webpack://checkoutKit/./src/payment/strategies/wepay/wepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/errors/payment-method-declined-error.ts","webpack://checkoutKit/./src/payment/strategies/zip/zip-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/zip/zip-script-loader.ts","webpack://checkoutKit/./src/payment/create-payment-strategy-registry.ts","webpack://checkoutKit/./src/payment/strategies/braintree/create-braintree-payment-processor.ts","webpack://checkoutKit/./src/common/data-store/create-data-store-projection.ts","webpack://checkoutKit/./src/payment/instrument/instrument-action-creator.ts","webpack://checkoutKit/./src/common/date-time/add-minutes.ts","webpack://checkoutKit/./src/common/date-time/is-future.ts","webpack://checkoutKit/./src/payment/instrument/instrument-response-transformer.ts","webpack://checkoutKit/./src/payment/instrument/instrument-request-sender.ts","webpack://checkoutKit/./src/shipping/shipping-country-action-creator.ts","webpack://checkoutKit/./src/shipping/shipping-country-request-sender.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-action-creator.ts","webpack://checkoutKit/./src/shipping/strategies/amazon/amazon-pay-shipping-strategy.ts","webpack://checkoutKit/./src/shipping/strategies/default/default-shipping-strategy.ts","webpack://checkoutKit/./src/common/utility/clone-result.ts","webpack://checkoutKit/./src/common/selector/create-shallow-equal-selector.ts","webpack://checkoutKit/./src/checkout/create-checkout-selectors.ts","webpack://checkoutKit/./src/checkout/checkout-store-selector.ts","webpack://checkoutKit/./src/checkout/checkout-store-error-selector.ts","webpack://checkoutKit/./src/checkout/checkout-store-status-selector.ts","webpack://checkoutKit/./src/common/error/error-message-transformer.ts","webpack://checkoutKit/./src/common/utility/to-single-line.ts","webpack://checkoutKit/./src/checkout/checkout-service.ts","webpack://checkoutKit/./src/checkout/create-checkout-service-error-transformer.ts","webpack://checkoutKit/./src/checkout/create-checkout-service.ts","webpack://checkoutKit/./src/order/spam-protection/create-spam-protection.ts","webpack://checkoutKit/./src/payment/create-payment-client.ts","webpack://checkoutKit/./src/customer/create-customer-strategy-registry.ts","webpack://checkoutKit/./src/shipping/create-shipping-strategy-registry.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/handle-frame-loaded-event.ts","webpack://checkoutKit/./src/common/error/errors/custom-error.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/iframe-embedded-checkout-messenger.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/noop-embedded-checkout-messenger.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/create-embedded-checkout-messenger.ts","webpack://checkoutKit/./src/locale/language-service.ts","webpack://checkoutKit/./src/locale/create-language-service.ts","webpack://checkoutKit/./src/currency/currency-formatter.ts","webpack://checkoutKit/./src/currency/currency-service.ts","webpack://checkoutKit/./src/currency/create-currency-service.ts","webpack://checkoutKit/./src/index.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/create-googlepay-payment-processor.ts","webpack://checkoutKit/./src/cart/map-to-internal-cart.ts","webpack://checkoutKit/./src/promotion/map-to-discount-notifications.ts","webpack://checkoutKit/./src/billing/errors/unable-to-continue-as-guest-error.ts","webpack://checkoutKit/./src/billing/billing-address-action-creator.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","ConsignmentActionType","CustomerStrategyActionType","PaymentStrategyActionType","ShippingStrategyActionType","MissingDataErrorType","subtype","type","MissingBillingAddress","MissingCart","MissingConsignments","MissingCheckout","MissingCheckoutConfig","MissingOrderConfig","MissingOrder","MissingOrderId","MissingPayment","MissingPaymentToken","MissingPaymentMethod","MissingShippingAddress","MissingSpamProtectionToken","getErrorMessage","CheckoutActionType","CouponActionType","BillingAddressActionType","OrderActionType","PaymentMethodActionType","CheckoutButtonActionType","GiftCertificateActionType","InstrumentActionType","EmbeddedCheckoutEventType","message","setPrototypeOf","__proto__","Error","captureStackTrace","stack","RemoteCheckoutActionType","DEFAULT_RESPONSE","body","headers","status","response","errors","StoreCreditActionType","ConfigActionType","isPlainObject","CountryActionType","ShippingCountryActionType","ACKNOWLEDGE","FINALIZE","ContentType","PaymentActionType","HOSTED","OFFLINE","isIframeEvent","isEqual","objectA","objectB","options","Array","isArray","length","index","isArrayEqual","Date","getTime","isDateEqual","RegExp","toString","isRegExpEqual","filter","keyFilter","keysA","keys","keysB","isObjectEqual","targetOrigin","_targetWindow","this","_targetOrigin","origin","post","event","window","postMessage","setTarget","CustomerActionType","SpamProtectionActionType","NotInitializedErrorType","CustomerNotInitialized","PaymentNotInitialized","ShippingNotInitialized","SpamProtectionNotInitialized","withMemoizedCombiner","creator","combiner","args","pop","result","combinerArgs","ErrorActionType","_requestSender","loadPaymentMethods","observer","next","LoadPaymentMethodsRequested","then","meta","deviceSessionId","sessionHash","LoadPaymentMethodsSucceeded","complete","catch","error","LoadPaymentMethodsFailed","loadPaymentMethod","methodId","LoadPaymentMethodRequested","undefined","LoadPaymentMethodSucceeded","LoadPaymentMethodFailed","timeout","Accept","JsonV1","url","EmbeddedContentEventType","sourceOrigin","_sourceOrigin","_isListening","_listeners","listen","addEventListener","_handleMessage","stopListen","removeEventListener","addListener","listener","listeners","push","removeListener","indexOf","splice","trigger","forEach","data","mapToInternalLineItems","itemMap","decimalPlaces","idKey","reduce","map","item","amountTransformer","id","imageUrl","amount","amountAfterDiscount","discount","integerAmount","toInteger","integerAmountAfterDiscount","integerDiscount","quantity","sender","recipient","attributes","variantId","mapGiftCertificateToInternalLineItem","mapToInternalLineItemType","INTERNAL_USE_ONLY","CheckoutIncludes","_scriptLoader","_window","loadClient","loadScript","braintree","client","load3DS","threeDSecure","loadDataCollector","dataCollector","loadPaypal","paypal","loadPaypalCheckout","paypalCheckout","loadVisaCheckout","visaCheckout","loadGooglePayment","googlePayment","_braintreeScriptLoader","_dataCollectors","initialize","clientToken","_clientToken","getClient","_client","authorization","getPaypal","_paypal","Promise","all","getPaypalCheckout","_paypalCheckout","get3DS","_3ds","getDataCollector","cacheKey","cached","kount","code","deviceData","teardown","resolve","getVisaCheckout","_visaCheckout","getGooglePaymentComponent","_googlePay","_teardown","default","mod","mapToInternalLineItem","extendedListPrice","extendedSalePrice","discountAmount","downloadsPageUrl","downloadPageUrl","brand","categoryNames","productId","option","addedByPromotion","throwErrorAction","action","payload","_decimalPlaces","Math","round","pow","parseUrl","test","anchor","document","createElement","href","port","hostname","hash","protocol","pathname","search","cacheAction","fn","pipe","store","isActionOptions","param","useCache","cachableActionDecorator","_","descriptor","memoizedMethods","WeakMap","decorateMethod","method","lastArg","instanceMethods","set","bindDecorator","target","bindMethodDecorator","decoratedTarget","getOwnPropertyNames","getOwnPropertyDescriptor","bindClassDecorator","boundMethod","omitDeep","predicate","_checkoutRequestSender","_configActionCreator","loadCheckout","LoadCheckoutRequested","loadConfig","LoadCheckoutSucceeded","LoadCheckoutFailed","loadDefaultCheckout","state","getState","context","config","getContextConfig","checkoutId","updateCheckout","checkout","getCheckout","UpdateCheckoutRequested","UpdateCheckoutSucceeded","UpdateCheckoutFailed","loadCurrentCheckout","_consignmentRequestSender","unassignItemsByAddress","consignment","existingConsignment","consignments","getConsignmentByAddress","shippingAddress","lineItems","_removeLineItems","cart","getCart","updateConsignment","deleteConsignment","assignItemsByAddress","_createOrUpdateConsignment","_addLineItems","selectShippingOption","getConsignments","consignmentUpdateBody","shippingOptionId","consignmentMeta","UpdateShippingOptionRequested","UpdateShippingOptionSucceeded","UpdateShippingOptionFailed","loadShippingOptions","LoadShippingOptionsRequested","params","include","AvailableShippingOptions","LoadShippingOptionsSucceeded","LoadShippingOptionsFailed","updateAddress","address","_getConsignmentRequestBody","createConsignments","CreateConsignmentsRequested","CreateConsignmentsSucceeded","CreateConsignmentsFailed","UpdateConsignmentRequested","UpdateConsignmentSucceeded","UpdateConsignmentFailed","consignmentId","DeleteConsignmentRequested","DeleteConsignmentSucceeded","DeleteConsignmentFailed","updateShippingOption","_isUpdateConsignmentRequest","physicalItems","itemId","_hydrateLineItems","lineItemIds","existingItem","sharedItem","lineItem","concat","request","DEFAULT_PARAMS","join","put","delete","getCallbackUrl","location","mapToInternalShippingOption","isSelected","description","price","cost","selected","isRecommended","transitTime","isPrivate","joinErrors","_factoryMethods","register","detail","title","mapFromInternalErrorResponse","mapFromStorefrontErrorResponse","mapFromPaymentErrorResponse","factoryMethod","createError","_getType","_isStorefrontErrorResponseBody","_isInternalErrorResponseBody","internalType","split","errorResponse","storefrontErrorResponse","internalErrorResponse","clearErrorReducer","ClearError","isClearErrorAction","replace","currentValue","newValue","objectSet","DEFAULT_STATE","statuses","billingAddressReducer","dataReducer","errorsReducer","statusesReducer","reducer","UpdateBillingAddressSucceeded","ContinueAsGuestSucceeded","LoadOrderSucceeded","billingAddress","UpdateBillingAddressRequested","UpdateBillingAddressFailed","ContinueAsGuestRequested","ContinueAsGuestFailed","arrayReplace","currentArray","newArray","matchObject","sameAsCurrentCount","sameAsNewCount","countSameAsReplaced","replacedValue","newItem","currentItem","objectMerge","currentObject","newObject","cartReducer","ApplyCouponSucceeded","RemoveCouponSucceeded","ApplyGiftCertificateSucceeded","RemoveGiftCertificateSucceeded","DEFAULT_DATA_STATE","initializedContainers","DEFAULT_ERROR_STATE","DEFAULT_STATUS_STATE","checkoutButtonReducer","InitializeButtonSucceeded","containerId","DeinitializeButtonSucceeded","InitializeButtonRequested","InitializeButtonFailed","DeinitializeButtonRequested","DeinitializeButtonFailed","configReducer","LoadConfigSucceeded","LoadConfigFailed","LoadConfigRequested","couponReducer","coupons","ApplyCouponRequested","ApplyCouponFailed","RemoveCouponRequested","RemoveCouponFailed","giftCertificateReducer","giftCertificates","ApplyGiftCertificateRequested","ApplyGiftCertificateFailed","RemoveGiftCertificateRequested","RemoveGiftCertificateFailed","customerReducer","customer","customerStrategyReducer","InitializeSucceeded","isInitialized","DeinitializeSucceeded","InitializeRequested","initializeError","initializeMethodId","InitializeFailed","DeinitializeRequested","deinitializeError","deinitializeMethodId","DeinitializeFailed","SignInRequested","SignInSucceeded","signInError","signInMethodId","SignInFailed","SignOutRequested","SignOutSucceeded","signOutError","signOutMethodId","SignOutFailed","WidgetInteractionStarted","WidgetInteractionFinished","widgetInteractionError","widgetInteractionMethodId","WidgetInteractionFailed","isInitializing","isDeinitializing","isSigningIn","isSigningOut","isWidgetInteracting","countryReducer","LoadCountriesSucceeded","LoadCountriesRequested","LoadCountriesFailed","orderReducer","metaReducer","LoadOrderPaymentsSucceeded","FinalizeOrderSucceeded","SubmitOrderSucceeded","callbackUrl","order","orderToken","token","payment","Completed","LoadOrderRequested","LoadOrderPaymentsRequested","LoadOrderFailed","LoadOrderPaymentsFailed","paymentReducer","SubmitPaymentSucceeded","paymentMethodReducer","array","defaultPredicate","mergeOrPush","gateway","methodA","methodB","loadMethodId","loadMethodError","isLoadingMethod","paymentStrategyReducer","ExecuteRequested","ExecuteSucceeded","executeError","executeMethodId","ExecuteFailed","FinalizeRequested","FinalizeSucceeded","finalizeError","finalizeMethodId","FinalizeFailed","isExecuting","isFinalizing","instrumentReducer","LoadInstrumentsSucceeded","vaultedInstruments","DeleteInstrumentSucceeded","instrument","bigpayToken","instrumentId","LoadInstrumentsRequested","DeleteInstrumentRequested","deleteError","failedInstrument","LoadInstrumentsFailed","DeleteInstrumentFailed","isDeleting","deletingInstrument","remoteCheckoutReducer","InitializeRemoteBillingSucceeded","billing","InitializeRemoteShippingSucceeded","shipping","LoadRemoteSettingsSucceeded","UpdateRemoteCheckout","updateShippingOptionError","updateError","isUpdating","isUpdatingShippingOption","consignmentReducer","SignOutCustomerSucceeded","shippingCountryReducer","LoadShippingCountriesSucceeded","LoadShippingCountriesRequested","LoadShippingCountriesFailed","shippingStrategyReducer","UpdateAddressRequested","UpdateAddressSucceeded","updateAddressError","updateAddressMethodId","UpdateAddressFailed","SelectOptionRequested","SelectOptionSucceeded","selectOptionError","selectOptionMethodId","SelectOptionFailed","isUpdatingAddress","isSelectingOption","storeCreditReducer","ApplyStoreCreditRequested","ApplyStoreCreditSucceeded","ApplyStoreCreditFailed","checkoutReducer","orderId","createFreezeProxy","trap","proxy","iteratee","getPrototypeOf","traversePrototypeOf","charAt","createProxy","createFormSelectorFactory","getShippingAddressFields","countries","countryCode","selectedCountry","storeConfig","formFields","shippingAddressFields","field","processField","getBillingAddressFields","billingAddressFields","country","items","label","fieldType","itemtype","processCountry","subdivisions","required","processProvince","hasPostalCodes","Boolean","processsPostCode","normalize","firstName","lastName","company","address1","address2","city","stateOrProvince","postalCode","phone","customFields","createConsignmentSelectorFactory","getConsignmentById","addressA","addressB","getShippingOption","selectedShippingOption","getLoadError","loadError","getCreateError","getLoadShippingOptionsError","loadShippingOptionsError","getUnassignedItems","assignedLineItemIds","itemIds","getUpdateError","getDeleteError","getItemAssignmentError","getUpdateShippingOptionError","isLoading","isLoadingShippingOptions","isCreating","isAssigningItems","createInternalCheckoutSelectorsFactory","getBillingAddress","getContinueAsGuestError","isContinuingAsGuest","getInitializeError","getDeinitializeError","getCoupons","getRemoveError","getApplyError","isApplying","isRemoving","getCustomer","getShippingAddress","getInternalPayment","getGatewayPayment","getHostedPayment","getPaymentId","getPaymentStatus","getPaymentToken","getPaymentRedirectUrl","isPaymentDataRequired","isPaymentDataSubmitted","createBillingAddressSelector","continueAsGuestError","createCartSelector","createCartSelectorFactory","createCheckoutButtonSelector","createConfigSelector","getConfig","getStoreConfig","getExternalSource","externalSource","createConfigSelectorFactory","createCountrySelector","getCountries","createCountrySelectorFactory","createCouponSelector","removeCouponError","applyCouponError","isApplyingCoupon","isRemovingCoupon","createCustomerSelector","createCustomerStrategySelector","getSignInError","getSignOutError","getWidgetInteractionError","createCustomerStrategySelectorFactory","createGiftCertificateSelector","getGiftCertificates","removeGiftCertificateError","applyGiftCertificateError","isApplyingGiftCertificate","isRemovingGiftCertificate","createGiftCertificateSelectorFactory","createInstrumentSelector","getInstruments","instruments","getInstrumentsMeta","createInstrumentSelectorFactory","createFormSelector","createPaymentMethodSelector","getPaymentMethods","paymentMethods","getPaymentMethodsMeta","getPaymentMethod","gatewayId","getLoadMethodError","createPaymentMethodSelectorFactory","createPaymentStrategySelector","getExecuteError","getFinalizeError","getWidgetInteractingError","createPaymentStrategySelectorFactory","createRemoteCheckoutSelector","createShippingAddressSelector","createShippingCountrySelector","getShippingCountries","createShippingCountrySelectorFactory","createShippingStrategySelector","getUpdateAddressError","getSelectOptionError","createShippingStrategySelectorFactory","createConsignmentSelector","createCheckoutSelector","getOutstandingBalance","useStoreCredit","grandTotal","storeCredit","max","outstandingBalance","createCheckoutSelectorFactory","createOrderSelector","getOrder","getOrderMeta","createOrderSelectorFactory","createPaymentSelector","payments","providerId","providerType","internalPayment","step","redirectUrl","paymentMethod","nonce","createStoreCreditSelector","applyError","createStoreCreditSelectorFactory","checkoutButton","customerStrategies","form","paymentStrategies","remoteCheckout","shippingCountries","shippingStrategies","selectors","shouldWarnMutation","createCheckoutStore","initialState","requestErrorFactory","factory","actionTransformer","action$","every","createInternalCheckoutSelectors","stateTransformer","couponTypes","mapToInternalCoupon","coupon","displayName","discountType","couponType","mapToInternalAddress","addressId","isBillingAddressLike","addressLine1","addressLine2","province","provinceCode","stateOrProvinceCode","postCode","selectorDecorator","resolver","memoizedMethod","cachedValue","getUsedCount","cache","getKey","selectorMethodDecorator","_checkoutButton","getInitializeButtonError","getDeinitializeButtonError","CheckoutButtonErrorSelector","isInitializingButton","isDeinitializingButton","CheckoutButtonStatusSelector","createCheckoutButtonSelectors","CheckoutButtonMethodType","_store","_buttonStrategyActionCreator","_state","subscribe","subscriber","filters","initializeButton","containerIds","selector","idPrefix","containers","querySelectorAll","slice","container","setUniqueElementId","queueId","dispatch","deinitializeButton","deinitialize","CheckoutButtonInitializer","_registry","_paymentMethodActionCreator","_checkoutActionCreator","_braintreeSDKCreator","_paypalScriptLoader","_formPoster","_offerCredit","paypalOptions","braintreepaypalcredit","braintreepaypal","_paymentMethod","allowedSources","disallowedSources","allowCredit","FUNDING","CREDIT","Button","render","env","testMode","commit","shouldProcessPayment","funding","allowed","disallowed","style","shape","_setupPayment","onPaymentError","onAuthorize","_tokenizePayment","onAuthorizeError","onError","addresses","CheckoutButtonNotInitialized","createPayment","flow","enableShippingAddress","shippingAddressEditable","shippingAddressOverride","_mapToBraintreeAddress","currency","offerCredit","tokenizePayment","postForm","payment_type","provider","device_data","shipping_address","JSON","stringify","_mapToLegacyShippingAddress","billing_address","_mapToLegacyBillingAddress","details","recipientName","email","first_name","last_name","phone_number","address_line_1","line1","address_line_2","line2","country_code","postal_code","_googlePayPaymentProcessor","_methodId","_getMethodId","_walletButton","_createSignInButton","parentNode","removeChild","getElementById","googlePayButton","createButton","_handleWalletButtonClick","appendChild","preventDefault","displayWallet","paymentData","handleSuccess","updateShippingAddress","_onPaymentSelectComplete","_onError","_masterpassScriptLoader","initializationData","load","masterpass","_masterpassClient","_signInButton","buttonContainer","button","src","_createMasterpassPayload","allowedCardTypes","cartAmount","cartId","suppressShippingAddress","_host","merchantId","clientId","actions","res","paymentID","payerID","paymentId","payerId","payerInfo","payer","payer_info","createCheckoutButtonInitializer","host","requestSender","formPoster","registry","scriptLoader","checkoutActionCreator","BRAINTREE_PAYPAL","BRAINTREE_PAYPAL_CREDIT","MASTERPASS","GOOGLEPAY_BRAINTREE","GOOGLEPAY_STRIPE","PAYPALEXPRESS","createCheckoutButtonRegistry","NotEmbeddableErrorType","_namespace","getItem","rawValue","withNamespace","parse","removeItem","getItemOnce","setItem","UnknownError","_iframeCreator","_messageListener","_messagePoster","_loadingIndicator","_storage","_location","_options","_isAttached","onComplete","CheckoutComplete","CheckoutError","onLoad","CheckoutLoaded","onFrameLoad","FrameLoaded","onSignOut","SignedOut","_configureStyles","attach","show","_allowCookie","_attemptLogin","createFrame","iframe","_iframe","hide","_retryAllowCookie","FrameError","detach","iFrameResizer","close","contentWindow","styles","StyleConfigured","reject","encodeURIComponent","visibility","MissingContent","EmbeddedCheckout","DEFAULT_STYLES","size","color","backgroundColor","ROTATION_ANIMATION","_styles","_defineAnimation","_container","_buildContainer","_indicator","_buildIndicator","parentId","opacity","handleTransitionEnd","display","bottom","left","height","width","position","right","top","transition","indicator","borderRadius","border","borderColor","margin","transform","transformStyle","animation","head","sheet","CSSStyleSheet","insertRule","MissingContainer","allowPaymentRequest","_toResizableFrame","timeoutInterval","setTimeout","handleMessage","contentId","iframes","scrolling","sizeWidth","heightCalculationMethod","clearTimeout","STORAGE_PREFIX","embedCheckout","loadingIndicator","isTerminalCacheKeyMap","_lastId","_map","maps","_usedMaps","maxSize","onExpire","_resolveMap","parentMap","usedCount","_generateMap","_removeLeastUsedMap","isMatched","mapIndex","unshift","parent","terminalMap","recentlyUsedMap","_removeMap","isRootCacheKeyMap","joinIncludes","includes","_configRequestSender","createAddress","_factories","_instances","defaultToken","cacheToken","_getInstance","_hasFactory","_hasInstance","hasShippingAddress","googleBraintreePaymentInstance","_googlePaymentInstance","_createGooglePayPayload","parseResponse","paymentMethodData","tokenizationData","androidPayCards","cardType","lastFour","lastTwo","binData","platformToken","googlePayBraintreePaymentDataRequest","merchantInfo","authJwt","merchantName","googleMerchantName","googleMerchantId","transactionInfo","currencyCode","totalPriceStatus","totalPrice","toFixed","cardRequirements","billingAddressRequired","billingAddressFormat","shippingAddressRequired","emailRequired","phoneNumberRequired","_mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2","createPaymentDataRequest","googlePayBraintreeDataRequestV1","apiVersion","apiVersionMinor","allowedPaymentMethods","parameters","allowedAuthMethods","allowedCardNetworks","billingAddressParameters","format","tokenizationSpecification","paymentMethodTokenizationParameters","shippingAddressParameters","_mapGooglePayStripeDataRequestToGooglePayDataRequestV2","card","last4","err","stripeVersion","stripePublishableKey","mapToInternalCustomer","customerId","isGuest","fullName","customerGroupName","customerGroup","mapToInternalGiftCertificate","giftCertificate","discountedAmount","used","remainingBalance","remaining","balance","purchaseDate","mapToInternalOrder","orderMeta","customerCanBeCreated","mapToInternalOrderPayment","subtotal","baseAmount","sum","discountNotifications","totalDiscountedAmount","appliedGiftCertificates","socialData","mapToInternalSocialDataList","hasDigitalItems","isDownloadable","isComplete","shippingCostTotal","amountBeforeDiscount","shippingCostBeforeDiscount","integerAmountBeforeDiscount","mapToStoreCredit","taxes","taxTotal","handling","handlingCostTotal","orderAmount","orderAmountAsInteger","mapToInternalPaymentStatus","isDefaultOrderPayment","helpText","instructions","returnUrl","socialDataObject","digitalItems","socialMedia","image","link","shareText","text","sharingLink","channelName","channel","channelCode","iframeResizer","originalIframeResizer","setupContentWindowForIframeResizer","clearError","getEnvironment","process","NODE_ENV","e","_console","log","_logToConsole","messages","info","warn","debug","isEnabled","logger","console","getDefaultLogger","_couponRequestSender","applyCoupon","removeCoupon","couponCode","_giftCertificateRequestSender","applyGiftCertificate","removeGiftCertificate","giftCertificateCode","_strategyRegistry","signIn","credentials","signOut","widgetInteraction","loadWidget","onPaymentReady","region","toLowerCase","_configureWidget","onLoginReady","amazon","Login","setClientId","setUseCookie","onAmazonLoginReady","OffAmazonPayments","onAmazonPaymentsReady","createInitOptions","settings","locale","collectShipping","paymentRequest","String","braintreeVisaCheckout","tokenize","tokenizedPayload","_postForm","userData","userEmail","card_information","_getCardInformation","cardInformation","_getAddress","_toVisaCheckoutAddress","phoneNumber","streetAddress","extendedAddress","locality","number","createBraintreeVisaCheckoutPaymentProcessor","braintreeScriptLoader","braintreeSDKCreator","V","JPMC","initializeBilling","methodName","initializeShipping","initializePayment","loadSettings","generateToken","trackAuthorizationEvent","_remoteCheckoutRequestSender","InitializeRemoteBillingRequested","InitializeRemoteBillingFailed","InitializeRemoteShippingRequested","InitializeRemoteShippingFailed","InitializeRemotePaymentRequested","InitializeRemotePaymentSucceeded","InitializeRemotePaymentFailed","LoadRemoteSettingsRequested","LoadRemoteSettingsFailed","SignOutRemoteCustomerRequested","SignOutRemoteCustomerSucceeded","SignOutRemoteCustomerFailed","_customerRequestSender","signInCustomer","SignInCustomerRequested","SignInCustomerSucceeded","SignInCustomerFailed","signOutCustomer","SignOutCustomerRequested","SignOutCustomerFailed","_remoteCheckoutActionCreator","amazonOptions","useAmazonAddressBook","_handleAuthorization","authorize","popup","scope","tokenPrefix","_customerStrategyActionCreator","_braintreeVisaCheckoutPaymentProcessor","_visaCheckoutScriptLoader","_buttonClassName","braintreevisacheckout","visaCheckoutOptions","initOptions","storeProfile","storeLanguage","signInButton","init","on","paymentSuccessPayload","_paymentInstrumentSelected","buttonClass","querySelector","_insertVisaCheckoutButton","visaCheckoutButton","className","innerHTML","_chasePayScriptLoader","chasepay","chasePayOptions","digitalSessionId","ChasePay","configure","language","isChasePayUp","insertButtons","EventType","START_CHECKOUT","sessionId","startCheckout","COMPLETE_CHECKOUT","requestId","merchantRequestId","_setExternalCheckoutData","_reloadPage","sessionToken","sendRequest","fromChasePay","_customerActionCreator","googlePayOptions","_getGooglePayOptions","googlepaybraintree","googlepaystripe","masterpassOptions","Masterpass","_countryRequestSender","loadCountries","_config","loadOrder","submitOrder","finalizeOrder","_orderRequestSender","_checkoutValidator","_spamProtectionActionCreator","loadOrderPayments","loadCurrentOrder","_getCurrentOrderId","SubmitOrderRequested","spamProtectionToken","isSpamProtectionEnabled","validate","_mapToOrderRequestBody","customerMessage","SubmitOrderFailed","FinalizeOrderRequested","FinalizeOrderFailed","executeSpamProtection","execute","callback","MutationObserver","googleRecaptchaScriptLoader","mutationObserverFactory","sitekey","event$","_event$","recaptcha","getResponse","reset","_recaptcha","_watchRecaptchaChallengeWindow","iframeElement","iframeContainer","parentElement","observe","attributeFilter","_loadPromise","_loadScript","grecaptcha","_googleRecaptcha","recaptchaSitekey","checkoutSettings","googleRecaptchaSitekey","SubmitFailed","PaymentStrategyType","_orderActionCreator","strategy","getByMethod","NO_PAYMENT_DATA_REQUIRED","finalize","_loadOrderPaymentsIfNeeded","cartA","cartB","_normalize","sort","itemA","itemB","localeCompare","giftWrapping","comparator","_compareCoupons","_compareGiftCertificates","couponsA","couponsB","giftCertificatesA","giftCertificatesB","_storeCreditRequestSender","applyStoreCredit","removeStoreCredit","_paymentRequestSender","_paymentRequestTransformer","submitPayment","SubmitPaymentRequested","SubmitPaymentFailed","initializeOffsitePayment","InitializeOffsitePaymentRequested","InitializeOffsitePaymentSucceeded","InitializeOffsitePaymentFailed","_transformResponse","statusText","isVaultedInstrument","ThreeDS2ComponentType","ResultCode","checkoutState","_getPaymentMethod","shippingOption","contextConfig","instrumentMeta","paymentMeta","internalCustomer","authToken","vaultAccessToken","quoteMeta","geoCountryCode","source","paymentMethodSelector","_getToken","_hasFactoryForMethod","_isLegacyMethod","LEGACY","OFFSITE","CREDIT_CARD","clientSidePaymentProviders","invalidFields","OrderIncludes","_paymentActionCreator","_adyenV2ScriptLoader","_locale","adyenv2","_adyenv2","configuration","environment","originKey","paymentMethodsResponse","adyenCheckout","_adyenCheckout","adyenComponent","onChange","_updateStateContainer","mount","_adyenComponent","shouldSaveInstrument","paymentPayload","_getStateContainer","three_ds_result","result_code","IdentifyShopper","_handle3DS2Fingerprint","ChallengeShopper","_handle3DS2Challenge","acs_url","PaReq","payer_auth_request","TermUrl","callback_url","MD","merchant_data","unmount","_getAdyenV2PaymentInitializeOptions","_stateContainer","_getThreeDS2ChallengeWidgetSize","threeDS2ChallengeWidgetSize","resultObject","paymentMethodId","on3DSComplete","on3DSLoading","threeDS2Component","ThreeDS2Challenge","challengeToken","challengeData","challengePaymentPayload","payment_data","threeDS2Container","threeDS2ContainerId","ThreeDS2DeviceFingerprint","fingerprintToken","fingerprintData","fingerprintPaymentPayload","newState","isValid","_stylesheets","_loadStylesheet","AdyenCheckout","stylesheet","onload","onerror","rel","_affirmScriptLoader","publicKey","affirm","_affirm","requestOptions","PhysicalItemsCategories","DigitalItemsCategories","_getCheckoutInformation","open","onFail","failObject","reason","onSuccess","successObject","ui","checkout_token","_getBillingAddress","merchant","user_confirmation_url","links","checkoutLink","user_cancel_url","user_confirmation_url_action","_getShippingAddress","_getItems","metadata","shipping_type","_getShippingType","platform_type","platform_version","platform_affirm","discounts","_getDiscounts","order_id","shipping_amount","tax_amount","total","first","last","full","zipcode","display_name","sku","unit_price","salePrice","qty","item_image_url","item_url","categories","_getCategories","customItems","listPrice","line","discount_amount","discount_display_name","DISCOUNTED_AMOUNT","categoryTree","category","Function","apikey","scriptURI","_getScriptURI","_storeCreditActionCreator","_afterpayScriptLoader","storeCountryName","storeCountry","_mapCountryToISO2","_afterpaySdk","_redirectToAfterpay","countryName","redirect","SCRIPTS_DEFAULT","SCRIPTS_US","AfterPay","isInternalAddressEqual","ignoredKeys","mapFromInternalAddress","_billingAddressActionCreator","_isPaymentMethodSelected","_walletOptions","_createWallet","referenceId","_getOrderReferenceId","sellerId","_getMerchantId","is3dsEnabled","_processPaymentWith3ds","_getOrderReferenceIdFromInitializationData","orderReferenceId","onPaymentSelect","onReady","walletOptions","amazonOrderReferenceId","design","designMode","orderReference","_synchronizeBillingAddress","_updateOrderReference","widget","Widgets","Wallet","remoteAddress","internalBillingAddress","getAmazonOrderReferenceId","initConfirmationFlow","confirmationFlow","success","_element","_createElement","_registerClick","remove","_unregisterClick","_removeAfterTransition","element","background","transitionDuration","zIndex","onClick","handeTransition","propertyName","promise","cancellable","cancel","race","_overlay","_threeDSecureOptions","preloadPaypal","tokenizeCard","requestData","_mapToCreditCard","creditCards","focusWindow","useraction","verifyCard","addFrame","removeFrame","cancelVerifyCard","verification","appendSessionId","processedPayment","creditCard","cardholderName","ccName","ccNumber","cvv","ccCvv","expirationDate","ccExpiry","month","year","endpoint","isCreditCardLike","_braintreePaymentProcessor","_is3dsEnabled","_handleError","orderRequest","_preparePaymentData","_isUsingVaulting","tokenizedCard","CardinalInitializationType","CardinalEventType","CardinalValidatedAction","CardinalPaymentType","CardinalTriggerEvents","CardinalPaymentBrand","CardinalSignatureVerification","_credit","braintreeOptions","isBraintreeError","_paymentStrategyActionCreator","visaInitOptions","_cardinalClient","prepare","start","runBinProcess","_getBinNumber","getThreeDSecureData","_getOrderData","entry","iin","CardinalSignatureValidationErrors","ChasePayEventType","_sdk","_getClientSDK","SetupCompleted","off","Validated","ActionCode","ErrorNumber","ErrorDescription","setup","Init","jwt","binNumber","BinProcess","Status","threeDSecureData","orderData","Success","NoAction","Payment","ExtendedData","SignatureVerification","Yes","Failure","continueObject","AcsUrl","Payload","partialOrder","_mapToPartialOrder","continue","CCA","transactionId","consumer","BillingAddress","_mapToCardinalAddress","Account","_mapToCardinalAccount","Email1","ShippingAddress","Consumer","OrderDetails","OrderNumber","Amount","CurrencyCode","OrderChannel","TransactionId","AccountNumber","Number","ExpirationMonth","ExpirationYear","NameOnAccount","CardCode","cardinalAddress","FirstName","LastName","Address1","City","State","PostalCode","CountryCode","Address2","Phone1","Cardinal","CardBrand","DigitalWalletType","_wepayRiskClient","_walletEvent$","walletButton","_configureWallet","_chasePayClient","_getPayment","_displayWallet","_createOrder","logoContainer","insertBrandings","CancelCheckout","onCancel","CompleteCheckout","_setSessionToken","showLoadingAnimation","getRiskToken","riskToken","paymentCryptogram","cryptogramId","eci","btoa","reqTokenId","expDate","substr","accountNum","accountMask","extraData","_threeDSecureFlow","_googlePayOptions","statusCode","_klarnaScriptLoader","_supportedEUCountries","klarnaCredit","_klarnaCredit","_unsubscribe","_loadWidget","_authorize","authorization_token","authorizationToken","klarna","client_token","_getUpdateSessionData","_mapToKlarnaAddress","klarnaAddress","street_address","given_name","family_name","street_address2","updateSessionData","approved","show_form","Klarna","Credit","orderPayload","_shouldSubmitFullPayload","_isPaymentAcknowledged","_useRedirectFlow","paypalexpress","useRedirectFlow","_isInContextEnabled","_paypalSdk","closeFlow","_isAcknowledgedOrFinalized","initXO","startFlow","_syncPaymentMethod","createSquareForm","_paymentForm","_getFormOptions","build","_getNonceInstrument","_getCountryCode","toUpperCase","_deferredRequestNonce","requestCardNonce","deferred","square","squareOptions","_squareOptions","callbacks","cardNonceResponseReceived","cardData","billingContact","shippingContact","digital_wallet_type","none","_handleWalletNonceResponse","_handleCardNonceResponse","createPaymentRequest","_paymentRequestPayload","methodsSupported","methods","_showPaymentMethods","paymentFormLoaded","_setPostalCode","unsupportedBrowserDetected","requestShippingAddress","requestBillingInfo","storeName","pending","setPostalCode","masterpassBtn","elementId","SqPaymentForm","_stripeScriptLoader","stripeOptions","stripev3","stripeJs","_stripeV3Client","cardElement","elements","_cardElement","_getStripeJs","handleCardPayment","stripeResponse","paymentIntent","createPaymentMethod","_mapStripePaymentMethodOptions","stripePaymentMethod","stripeCardPaymentOptions","_mapStripeCardPaymentOptions","payment_method","_mapStripeBillingAddress","_mapStripeShippingAddress","_mapStripeBillingDetails","stripeBillingDetails","_mapStripeShippingDetails","stripeShippingDetails","_getCustomer","shippingDetails","receipt_email","save_payment_method","billing_details","publishableKey","Stripe","betas","_riskClient","WePay","risk","generate_risk_token","get_risk_token","orderActionCreator","paymentActionCreator","payloadWithToken","_zipScriptLoader","zip","_zipClient","zipClient","Checkout","_prepareForReferredRegistration","onCheckout","openModal","externalId","Zip","createPaymentStrategyRegistry","paymentClient","spamProtection","paymentRequestTransformer","paymentRequestSender","billingAddressActionCreator","braintreePaymentProcessor","overlay","createBraintreePaymentProcessor","checkoutRequestSender","checkoutValidator","spamProtectionActionCreator","storeCreditActionCreator","paymentMethodActionCreator","remoteCheckoutActionCreator","configActionCreator","paymentStrategyActionCreator","ADYENV2","AFFIRM","AFTERPAY","AMAZON","CYBERSOURCE","KLARNA","PAYPAL","PAYPAL_EXPRESS","PAYPAL_EXPRESS_CREDIT","SAGE_PAY","SQUARE","BRAINTREE","BRAINTREE_VISA_CHECKOUT","CHASE_PAY","BRAINTREE_GOOGLE_PAY","WE_PAY","STRIPE_GOOGLE_PAY","ZIP","CONVERGE","STRIPEV3","ProjectionActionType","_instrumentRequestSender","loadInstruments","session","_getSessionContext","_getCurrentAccessToken","_getValidAccessToken","currentToken","deleteInstrument","_isValidVaultAccessToken","date","newDate","valueOf","now","isFuture","vaultAccessExpiry","setMinutes","getMinutes","getVaultAccessToken","storeId","transformResponse","_transformVaultedInstruments","vaulted_instruments","transformErrorResponse","transformVaultAccessResponse","expires_at","bigpay_token","defaultInstrument","default_instrument","last_4","expiryMonth","expiry_month","expiryYear","expiry_year","trustedShippingAddress","trusted_shipping_address","_transformer","requestContext","_loadInstrumentsWithAddress","_loadInstruments","deleteShopperInstrument","loadInstrumentsWithAddress","_shippingCountryRequestSender","selectOption","mergedOptions","_consignmentActionCreator","_createAddressBook","optionId","onAddressSelect","AddressBook","_synchronizeShippingAddress","cloneDeep","input","cloneDeepSafe","cloneResult","createShallowEqualSelector","a","b","createCheckoutSelectorsFactory","getShippingOptions","getSelectedShippingOption","getBillingCountries","getSelectedPaymentMethod","getError","getSelectShippingOptionError","isPending","isSelectingShippingOption","isCustomerStepPending","isPaymentStepPending","createCheckoutStoreSelector","availableShippingOptions","createCheckoutStoreErrorSelector","getLoadCheckoutError","getUpdateCheckoutError","getSubmitOrderError","getFinalizeOrderError","getLoadOrderError","getLoadCartError","getLoadBillingCountriesError","getLoadShippingCountriesError","getLoadPaymentMethodsError","getLoadPaymentMethodError","getInitializePaymentError","getInitializeCustomerError","getUpdateBillingAddressError","getUpdateShippingAddressError","getDeleteConsignmentError","getUpdateConsignmentError","getCreateConsignmentsError","getInitializeShippingError","getApplyStoreCreditError","getApplyCouponError","getRemoveCouponError","getApplyGiftCertificateError","getRemoveGiftCertificateError","getLoadInstrumentsError","getDeleteInstrumentError","getLoadConfigError","createCheckoutStoreStatusSelector","some","isLoadingCheckout","isUpdatingCheckout","isSubmittingOrder","isFinalizingOrder","isLoadingOrder","isLoadingCart","isLoadingBillingCountries","isLoadingShippingCountries","isLoadingPaymentMethods","isLoadingPaymentMethod","isInitializingPayment","isInitializingCustomer","isUpdatingBillingAddress","isUpdatingShippingAddress","isUpdatingConsignment","isDeletingConsignment","isCreatingConsignments","isInitializingShipping","isApplyingStoreCredit","isLoadingInstruments","isDeletingInstrument","isLoadingConfig","_messageCustomizer","trim","_countryActionCreator","_couponActionCreator","_errorActionCreator","_giftCertificateActionCreator","_instrumentActionCreator","_shippingCountryActionCreator","_shippingStrategyActionCreator","isDevelopment","projection","_errorTransformer","isCheckoutServiceError","_selectorsFactory","_storeProjection","Synchronize","initial","notifyState","_dispatch","loadCheckoutAction","loadConfigAction","finalizeOrderIfNeeded","deinitializePayment","loadBillingCountries","loadShippingCountries","loadBillingAddressFields","loadShippingAddressFields","initializeCustomer","deinitializeCustomer","continueAsGuest","deinitializeShipping","assignItemsToAddress","unassignItemsToAddress","selectConsignmentShippingOption","updateBillingAddress","initializeSpamProtection","CheckoutService","createCheckoutService","setHost","paymentSettings","bigpayBaseUrl","createPaymentClient","orderRequestSender","MutationObserverFactory","remoteCheckoutRequestSender","createCustomerStrategyRegistry","consignmentRequestSender","consignmentActionCreator","createShippingStrategyRegistry","handleFrameLoadedEvent","hasAttribute","setAttribute","isCustomError","_untargetedMessagePoster","_messageHandlers","postComplete","_postMessage","postError","_transformError","postFrameError","untargeted","postFrameLoaded","postLoaded","postSignedOut","receiveStyles","handler","_notifyMessageHandlers","IframeEmbeddedCheckoutMessenger","NoopEmbeddedCheckoutMessenger","createEmbeddedCheckoutMessenger","parentWindow","parentOrigin","_logger","locales","translations","_locales","_translations","_formatters","mapKeys","translationKey","KEY_PREFIX","getLocale","_hasTranslations","translate","prefixedKey","messageFormat","compile","_transformData","_transformConfig","output","defaultTranslations","_flattenObject","parentKey","resultKey","LanguageService","createLanguageService","currencySettings","symbolLocation","symbol","thousandsSeparator","decimalSeparator","parseInt","_symbolLocation","_symbol","_thousandsSeparator","_decimalSeparator","formattedNumber","_formatNumber","formattedCurrency","_formatCurrency","positiveAmount","abs","decimalAmount","parsedIntegerAmount","_toFixed","precision","_storeConfig","_customerFormatter","shopperCurrency","_storeFormatter","toCustomerCurrency","exchangeRate","toStoreCurrency","CurrencyService","createCurrencyService","ButtonType","ButtonColor","_googlePayScriptLoader","_googlePayInitializer","_consigmentActionCreator","buttonType","buttonColor","Short","Default","_googlePayClient","loadPaymentData","_getPaymentDataRequest","_updateBillingAddress","_mapGooglePayAddressToShippingAddress","googlePay","paymentDataRequest","_getGooglePayClient","_paymentDataRequest","isReadyToPay","google","api","PaymentsClient","_mapGooglePayAddressToBillingAddress","companyName","address3","administrativeArea","postPaymentData","remoteBillingAddress","googlePayAddressMapped","createGooglePayPaymentProcessor","initializer","mapToInternalCart","promotions","notifications","promotion","banners","banner","placeholders","messageHtml","certificate","isShippingRequired","taxSubtotal","billingAddressRequestBody","existingBillingAddressRequestBody","_createOrUpdateBillingAddress"],"mappings":"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","file":"checkout-sdk.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 150);\n","module.exports = require(\"tslib\");","module.exports = require(\"@bigcommerce/data-store\");","module.exports = require(\"lodash\");","module.exports = require(\"rxjs\");","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nimport { ConsignmentMeta } from './consignment';\n\nexport enum ConsignmentActionType {\n    CreateConsignmentsRequested = 'CREATE_CONSIGNMENTS_REQUESTED',\n    CreateConsignmentsSucceeded = 'CREATE_CONSIGNMENTS_SUCCEEDED',\n    CreateConsignmentsFailed = 'CREATE_CONSIGNMENTS_FAILED',\n\n    UpdateConsignmentRequested = 'UPDATE_CONSIGNMENT_REQUESTED',\n    UpdateConsignmentSucceeded = 'UPDATE_CONSIGNMENT_SUCCEEDED',\n    UpdateConsignmentFailed = 'UPDATE_CONSIGNMENT_FAILED',\n\n    DeleteConsignmentRequested = 'DELETE_CONSIGNMENT_REQUESTED',\n    DeleteConsignmentSucceeded = 'DELETE_CONSIGNMENT_SUCCEEDED',\n    DeleteConsignmentFailed = 'DELETE_CONSIGNMENT_FAILED',\n\n    UpdateShippingOptionRequested = 'UPDATE_SHIPPING_OPTION_REQUESTED',\n    UpdateShippingOptionSucceeded = 'UPDATE_SHIPPING_OPTION_SUCCEEDED',\n    UpdateShippingOptionFailed = 'UPDATE_SHIPPING_OPTION_FAILED',\n\n    LoadShippingOptionsRequested = 'LOAD_SHIPPING_OPTIONS_REQUESTED',\n    LoadShippingOptionsSucceeded = 'LOAD_SHIPPING_OPTIONS_SUCCEEDED',\n    LoadShippingOptionsFailed = 'LOAD_SHIPPING_OPTIONS_FAILED',\n}\n\nexport type ConsignmentAction =\n    CreateConsignmentsAction |\n    UpdateConsignmentAction |\n    DeleteConsignmentAction |\n    UpdateShippingOptionAction |\n    LoadShippingOptionsAction;\n\nexport type CreateConsignmentsAction =\n    CreateConsignmentsRequestedAction |\n    CreateConsignmentsSucceededAction |\n    CreateConsignmentsFailedAction;\n\nexport type UpdateConsignmentAction =\n    UpdateConsignmentRequestedAction |\n    UpdateConsignmentSucceededAction |\n    UpdateConsignmentFailedAction;\n\nexport type DeleteConsignmentAction =\n    DeleteConsignmentRequestedAction |\n    DeleteConsignmentSucceededAction |\n    DeleteConsignmentFailedAction;\n\nexport type UpdateShippingOptionAction =\n    UpdateShippingOptionRequestedAction |\n    UpdateShippingOptionSucceededAction |\n    UpdateShippingOptionFailedAction;\n\nexport type LoadShippingOptionsAction =\n    LoadShippingOptionsRequestedAction |\n    LoadShippingOptionsSucceededAction |\n    LoadShippingOptionsFailedAction;\n\nexport interface CreateConsignmentsRequestedAction extends Action {\n    type: ConsignmentActionType.CreateConsignmentsRequested;\n}\n\nexport interface CreateConsignmentsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.CreateConsignmentsSucceeded;\n}\n\nexport interface CreateConsignmentsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.CreateConsignmentsFailed;\n}\n\nexport interface UpdateConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentRequested;\n}\n\nexport interface UpdateConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentSucceeded;\n}\n\nexport interface UpdateConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentFailed;\n}\n\nexport interface DeleteConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentRequested;\n}\n\nexport interface DeleteConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentSucceeded;\n}\n\nexport interface DeleteConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentFailed;\n}\n\nexport interface UpdateShippingOptionRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionRequested;\n}\n\nexport interface UpdateShippingOptionSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionSucceeded;\n}\n\nexport interface UpdateShippingOptionFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionFailed;\n}\n\nexport interface LoadShippingOptionsRequestedAction extends Action {\n    type: ConsignmentActionType.LoadShippingOptionsRequested;\n}\n\nexport interface LoadShippingOptionsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.LoadShippingOptionsSucceeded;\n}\n\nexport interface LoadShippingOptionsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.LoadShippingOptionsFailed;\n}\n","module.exports = require(\"@bigcommerce/memoize\");","import { Action } from '@bigcommerce/data-store';\n\nexport enum CustomerStrategyActionType {\n    SignInFailed = 'CUSTOMER_STRATEGY_SIGN_IN_FAILED',\n    SignInRequested = 'CUSTOMER_STRATEGY_SIGN_IN_REQUESTED',\n    SignInSucceeded = 'CUSTOMER_STRATEGY_SIGN_IN_SUCCEEDED',\n    SignOutFailed = 'CUSTOMER_STRATEGY_SIGN_OUT_FAILED',\n    SignOutRequested = 'CUSTOMER_STRATEGY_SIGN_OUT_REQUESTED',\n    SignOutSucceeded = 'CUSTOMER_STRATEGY_SIGN_OUT_SUCCEEDED',\n    InitializeFailed = 'CUSTOMER_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'CUSTOMER_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'CUSTOMER_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'CUSTOMER_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'CUSTOMER_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'CUSTOMER_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type CustomerStrategyAction =\n    CustomerStrategySignInAction |\n    CustomerStrategySignOutAction |\n    CustomerStrategyInitializeAction |\n    CustomerStrategyDeinitializeAction |\n    CustomerStrategyWidgetAction;\n\nexport type CustomerStrategySignInAction =\n    SignInRequestedAction |\n    SignInSucceededAction |\n    SignInFailedAction;\n\nexport type CustomerStrategySignOutAction =\n    SignOutRequestedAction |\n    SignOutSucceededAction |\n    SignOutFailedAction;\n\nexport type CustomerStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type CustomerStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type CustomerStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface SignInRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignInRequested;\n}\n\nexport interface SignInSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignInSucceeded;\n}\n\nexport interface SignInFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignInFailed;\n}\n\nexport interface SignOutRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignOutRequested;\n}\n\nexport interface SignOutSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignOutSucceeded;\n}\n\nexport interface SignOutFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignOutFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.WidgetInteractionFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderPaymentsAction } from '../order';\n\nexport enum PaymentStrategyActionType {\n    ExecuteFailed = 'PAYMENT_STRATEGY_EXECUTE_FAILED',\n    ExecuteRequested = 'PAYMENT_STRATEGY_EXECUTE_REQUESTED',\n    ExecuteSucceeded = 'PAYMENT_STRATEGY_EXECUTE_SUCCEEDED',\n    FinalizeFailed = 'PAYMENT_STRATEGY_FINALIZE_FAILED',\n    FinalizeRequested = 'PAYMENT_STRATEGY_FINALIZE_REQUESTED',\n    FinalizeSucceeded = 'PAYMENT_STRATEGY_FINALIZE_SUCCEEDED',\n    InitializeFailed = 'PAYMENT_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'PAYMENT_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'PAYMENT_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'PAYMENT_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'PAYMENT_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'PAYMENT_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type PaymentStrategyAction =\n    PaymentStrategyExecuteAction |\n    PaymentStrategyFinalizeAction |\n    PaymentStrategyInitializeAction |\n    PaymentStrategyDeinitializeAction |\n    PaymentStrategyWidgetAction;\n\nexport type PaymentStrategyExecuteAction =\n    ExecuteRequestedAction |\n    ExecuteSucceededAction |\n    ExecuteFailedAction |\n    LoadOrderPaymentsAction;\n\nexport type PaymentStrategyFinalizeAction =\n    FinalizeRequestedAction |\n    FinalizeSucceededAction |\n    FinalizeFailedAction |\n    LoadOrderPaymentsAction;\n\nexport type PaymentStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type PaymentStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type PaymentStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface ExecuteRequestedAction extends Action {\n    type: PaymentStrategyActionType.ExecuteRequested;\n}\n\nexport interface ExecuteSucceededAction extends Action {\n    type: PaymentStrategyActionType.ExecuteSucceeded;\n}\n\nexport interface ExecuteFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.ExecuteFailed;\n}\n\nexport interface FinalizeRequestedAction extends Action {\n    type: PaymentStrategyActionType.FinalizeRequested;\n}\n\nexport interface FinalizeSucceededAction extends Action {\n    type: PaymentStrategyActionType.FinalizeSucceeded;\n}\n\nexport interface FinalizeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.FinalizeFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.WidgetInteractionFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum ShippingStrategyActionType {\n    UpdateAddressFailed = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_FAILED',\n    UpdateAddressRequested = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_REQUESTED',\n    UpdateAddressSucceeded = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_SUCCEEDED',\n    SelectOptionFailed = 'SHIPPING_STRATEGY_SELECT_OPTION_FAILED',\n    SelectOptionRequested = 'SHIPPING_STRATEGY_SELECT_OPTION_REQUESTED',\n    SelectOptionSucceeded = 'SHIPPING_STRATEGY_SELECT_OPTION_SUCCEEDED',\n    InitializeFailed = 'SHIPPING_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'SHIPPING_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'SHIPPING_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'SHIPPING_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'SHIPPING_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'SHIPPING_STRATEGY_DEINITIALIZE_SUCCEEDED',\n}\n\nexport type ShippingStrategyAction =\n    ShippingStrategyUpdateAddressAction |\n    ShippingStrategySelectOptionAction |\n    ShippingStrategyInitializeAction |\n    ShippingStrategyDeinitializeAction;\n\nexport type ShippingStrategyUpdateAddressAction =\n    UpdateAddressRequestedAction |\n    UpdateAddressSucceededAction |\n    UpdateAddressFailedAction;\n\nexport type ShippingStrategySelectOptionAction =\n    SelectOptionRequestedAction |\n    SelectOptionSucceededAction |\n    SelectOptionFailedAction;\n\nexport type ShippingStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type ShippingStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport interface UpdateAddressRequestedAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressRequested;\n}\n\nexport interface UpdateAddressSucceededAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressSucceeded;\n}\n\nexport interface UpdateAddressFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.UpdateAddressFailed;\n}\n\nexport interface SelectOptionRequestedAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionRequested;\n}\n\nexport interface SelectOptionSucceededAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionSucceeded;\n}\n\nexport interface SelectOptionFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.SelectOptionFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.DeinitializeFailed;\n}\n","import StandardError from './standard-error';\n\nexport enum MissingDataErrorType {\n    MissingBillingAddress,\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPayment,\n    MissingPaymentMethod,\n    MissingPaymentToken,\n    MissingShippingAddress,\n    MissingSpamProtectionToken,\n}\n\n/**\n * Throw this error when data that is expected to exist is missing. Usually it\n * is due to the fact that certain data has not been retrieved from or saved to\n * the server yet. And such data is required to perform certain actions.\n */\nexport default class MissingDataError extends StandardError {\n    constructor(\n        public subtype: MissingDataErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'MissingDataError';\n        this.type = 'missing_data';\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n    case MissingDataErrorType.MissingBillingAddress:\n        return 'Unable to proceed because billing address data is unavailable.';\n\n    case MissingDataErrorType.MissingCart:\n        return 'Unable to proceed because cart data is unavailable.';\n\n    case MissingDataErrorType.MissingConsignments:\n        return 'Unable to proceed because consignments data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckout:\n        return 'Unable to proceed because checkout data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckoutConfig:\n    case MissingDataErrorType.MissingOrderConfig:\n        return 'Unable to proceed because configuration data is unavailable.';\n\n    case MissingDataErrorType.MissingOrder:\n        return 'Unable to proceed because order data is unavailable.';\n\n    case MissingDataErrorType.MissingOrderId:\n        return 'Unable to proceed because order ID is unavailable or not generated yet.';\n\n    case MissingDataErrorType.MissingPayment:\n        return 'Unable to proceed because payment data is unavailable.';\n\n    case MissingDataErrorType.MissingPaymentToken:\n        return 'Unable to proceed because the token required to submit a payment is missing.';\n\n    case MissingDataErrorType.MissingPaymentMethod:\n        return 'Unable to proceed because payment method data is unavailable or not properly configured.';\n\n    case MissingDataErrorType.MissingShippingAddress:\n        return 'Unable to proceed because shipping address data is unavailable.';\n\n    case MissingDataErrorType.MissingSpamProtectionToken:\n        return 'Unable to proceed because spam protection token is not provided.';\n\n    default:\n        return 'Unable to proceed because the required data is unavailable.';\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadConfigAction } from '../config/config-actions';\n\nimport Checkout from './checkout';\n\nexport enum CheckoutActionType {\n    LoadCheckoutRequested = 'LOAD_CHECKOUT_REQUESTED',\n    LoadCheckoutSucceeded = 'LOAD_CHECKOUT_SUCCEEDED',\n    LoadCheckoutFailed = 'LOAD_CHECKOUT_FAILED',\n\n    UpdateCheckoutRequested = 'UPDATE_CHECKOUT_REQUESTED',\n    UpdateCheckoutSucceeded = 'UPDATE_CHECKOUT_SUCCEEDED',\n    UpdateCheckoutFailed = 'UPDATE_CHECKOUT_FAILED',\n}\n\nexport type CheckoutAction = LoadCheckoutAction | UpdateCheckoutAction;\n\nexport type LoadCheckoutAction =\n    LoadCheckoutRequestedAction |\n    LoadCheckoutSucceededAction |\n    LoadCheckoutFailedAction |\n    LoadConfigAction;\n\nexport type UpdateCheckoutAction =\n    UpdateCheckoutRequestedAction |\n    UpdateCheckoutSucceededAction |\n    UpdateCheckoutFailedAction;\n\nexport interface LoadCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.LoadCheckoutRequested;\n}\n\nexport interface LoadCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.LoadCheckoutSucceeded;\n}\n\nexport interface LoadCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.LoadCheckoutFailed;\n}\n\nexport interface UpdateCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.UpdateCheckoutRequested;\n}\n\nexport interface UpdateCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.UpdateCheckoutSucceeded;\n}\n\nexport interface UpdateCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.UpdateCheckoutFailed;\n}\n","module.exports = require(\"rxjs/operators\");","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport enum CouponActionType {\n    ApplyCouponRequested = 'APPLY_COUPON_REQUESTED',\n    ApplyCouponSucceeded = 'APPLY_COUPON_SUCCEEDED',\n    ApplyCouponFailed = 'APPLY_COUPON_FAILED',\n\n    RemoveCouponRequested = 'REMOVE_COUPON_REQUESTED',\n    RemoveCouponSucceeded = 'REMOVE_COUPON_SUCCEEDED',\n    RemoveCouponFailed = 'REMOVE_COUPON_FAILED',\n}\n\nexport type CouponAction =\n    ApplyCouponAction |\n    RemoveCouponAction;\n\nexport type ApplyCouponAction =\n    ApplyCouponRequestedAction |\n    ApplyCouponSucceededAction |\n    ApplyCouponFailedAction;\n\nexport type RemoveCouponAction =\n    RemoveCouponRequestedAction |\n    RemoveCouponSucceededAction |\n    RemoveCouponFailedAction;\n\nexport interface ApplyCouponRequestedAction extends Action {\n    type: CouponActionType.ApplyCouponRequested;\n}\n\nexport interface ApplyCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.ApplyCouponSucceeded;\n}\n\nexport interface ApplyCouponFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: CouponActionType.ApplyCouponFailed;\n}\n\nexport interface RemoveCouponRequestedAction extends Action {\n    type: CouponActionType.RemoveCouponRequested;\n}\n\nexport interface RemoveCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.RemoveCouponSucceeded;\n}\n\nexport interface RemoveCouponFailedAction extends Action<RequestError> {\n    type: CouponActionType.RemoveCouponFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum BillingAddressActionType {\n    UpdateBillingAddressRequested = 'UPDATE_BILLING_ADDRESS_REQUESTED',\n    UpdateBillingAddressSucceeded = 'UPDATE_BILLING_ADDRESS_SUCCEEDED',\n    UpdateBillingAddressFailed = 'UPDATE_BILLING_ADDRESS_FAILED',\n\n    ContinueAsGuestRequested = 'CONTINUE_AS_GUEST_REQUESTED',\n    ContinueAsGuestSucceeded = 'CONTINUE_AS_GUEST_SUCCEEDED',\n    ContinueAsGuestFailed = 'CONTINUE_AS_GUEST_FAILED',\n}\n\nexport type BillingAddressAction =\n    ContinueAsGuestAction |\n    UpdateBillingAddressAction;\n\nexport type UpdateBillingAddressAction =\n    UpdateBillingAddressRequested |\n    UpdateBillingAddressSucceeded |\n    UpdateBillingAddressFailed;\n\nexport type ContinueAsGuestAction =\n    ContinueAsGuestRequested |\n    ContinueAsGuestSucceeded |\n    ContinueAsGuestFailed;\n\nexport interface UpdateBillingAddressRequested extends Action {\n    type: BillingAddressActionType.UpdateBillingAddressRequested;\n}\n\nexport interface UpdateBillingAddressSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.UpdateBillingAddressSucceeded;\n}\n\nexport interface UpdateBillingAddressFailed extends Action<Error> {\n    type: BillingAddressActionType.UpdateBillingAddressFailed;\n}\n\nexport interface ContinueAsGuestRequested extends Action {\n    type: BillingAddressActionType.ContinueAsGuestRequested;\n}\n\nexport interface ContinueAsGuestSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.ContinueAsGuestSucceeded;\n}\n\nexport interface ContinueAsGuestFailed extends Action<Error> {\n    type: BillingAddressActionType.ContinueAsGuestFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { InternalOrderResponseData } from './internal-order-responses';\nimport Order from './order';\n\nexport enum OrderActionType {\n    LoadOrderRequested = 'LOAD_ORDER_REQUESTED',\n    LoadOrderSucceeded = 'LOAD_ORDER_SUCCEEDED',\n    LoadOrderFailed = 'LOAD_ORDER_FAILED',\n\n    LoadOrderPaymentsRequested = 'LOAD_ORDER_PAYMENTS_REQUESTED',\n    LoadOrderPaymentsSucceeded = 'LOAD_ORDER_PAYMENTS_SUCCEEDED',\n    LoadOrderPaymentsFailed = 'LOAD_ORDER_PAYMENTS_FAILED',\n\n    SubmitOrderRequested = 'SUBMIT_ORDER_REQUESTED',\n    SubmitOrderSucceeded = 'SUBMIT_ORDER_SUCCEEDED',\n    SubmitOrderFailed = 'SUBMIT_ORDER_FAILED',\n\n    FinalizeOrderRequested = 'FINALIZE_ORDER_REQUESTED',\n    FinalizeOrderSucceeded = 'FINALIZE_ORDER_SUCCEEDED',\n    FinalizeOrderFailed = 'FINALIZE_ORDER_FAILED',\n}\n\nexport type OrderAction = LoadOrderAction |\n    LoadOrderPaymentsAction |\n    SubmitOrderAction |\n    FinalizeOrderAction;\n\nexport type LoadOrderPaymentsAction = LoadOrderPaymentsRequestedAction |\n    LoadOrderPaymentsSucceededAction |\n    LoadOrderPaymentsFailedAction;\n\nexport type LoadOrderAction =\n    LoadOrderRequestedAction |\n    LoadOrderSucceededAction |\n    LoadOrderFailedAction;\n\nexport type SubmitOrderAction =\n    SubmitOrderRequestedAction |\n    SubmitOrderSucceededAction |\n    SubmitOrderFailedAction |\n    LoadOrderAction;\n\nexport type FinalizeOrderAction =\n    FinalizeOrderRequestedAction |\n    FinalizeOrderSucceededAction |\n    FinalizeOrderFailedAction |\n    LoadOrderAction;\n\nexport interface LoadOrderRequestedAction extends Action {\n    type: OrderActionType.LoadOrderRequested;\n}\n\nexport interface LoadOrderSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderSucceeded;\n}\n\nexport interface LoadOrderFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderFailed;\n}\n\nexport interface LoadOrderPaymentsRequestedAction extends Action {\n    type: OrderActionType.LoadOrderPaymentsRequested;\n}\n\nexport interface LoadOrderPaymentsSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderPaymentsSucceeded;\n}\n\nexport interface LoadOrderPaymentsFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderPaymentsFailed;\n}\n\nexport interface SubmitOrderRequestedAction extends Action {\n    type: OrderActionType.SubmitOrderRequested;\n}\n\nexport interface SubmitOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.SubmitOrderSucceeded;\n}\n\nexport interface SubmitOrderFailedAction extends Action<Error> {\n    type: OrderActionType.SubmitOrderFailed;\n}\n\nexport interface FinalizeOrderRequestedAction extends Action {\n    type: OrderActionType.FinalizeOrderRequested;\n}\n\nexport interface FinalizeOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.FinalizeOrderSucceeded;\n}\n\nexport interface FinalizeOrderFailedAction extends Action<Error> {\n    type: OrderActionType.FinalizeOrderFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\n\nexport enum PaymentMethodActionType {\n    LoadPaymentMethodRequested = 'LOAD_PAYMENT_METHOD_REQUESTED',\n    LoadPaymentMethodSucceeded = 'LOAD_PAYMENT_METHOD_SUCCEEDED',\n    LoadPaymentMethodFailed = 'LOAD_PAYMENT_METHOD_FAILED',\n\n    LoadPaymentMethodsRequested = 'LOAD_PAYMENT_METHODS_REQUESTED',\n    LoadPaymentMethodsSucceeded = 'LOAD_PAYMENT_METHODS_SUCCEEDED',\n    LoadPaymentMethodsFailed = 'LOAD_PAYMENT_METHODS_FAILED',\n}\n\nexport type PaymentMethodAction = LoadPaymentMethodAction | LoadPaymentMethodsAction;\n\nexport type LoadPaymentMethodAction =\n    LoadPaymentMethodRequestedAction |\n    LoadPaymentMethodSucceededAction |\n    LoadPaymentMethodFailedAction;\n\nexport type LoadPaymentMethodsAction =\n    LoadPaymentMethodsRequestedAction |\n    LoadPaymentMethodsSucceededAction |\n    LoadPaymentMethodsFailedAction;\n\nexport interface LoadPaymentMethodRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodRequested;\n}\n\nexport interface LoadPaymentMethodSucceededAction extends Action<PaymentMethod> {\n    type: PaymentMethodActionType.LoadPaymentMethodSucceeded;\n}\n\nexport interface LoadPaymentMethodFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodFailed;\n}\n\nexport interface LoadPaymentMethodsRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodsRequested;\n}\n\nexport interface LoadPaymentMethodsSucceededAction extends Action<PaymentMethod[], PaymentMethodMeta> {\n    type: PaymentMethodActionType.LoadPaymentMethodsSucceeded;\n}\n\nexport interface LoadPaymentMethodsFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodsFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadPaymentMethodAction } from '../payment';\n\nimport { CheckoutButtonMethodType } from './strategies';\n\nexport enum CheckoutButtonActionType {\n    InitializeButtonFailed = 'INITIALIZE_BUTTON_FAILED',\n    InitializeButtonRequested = 'INITIALIZE_BUTTON_REQUESTED',\n    InitializeButtonSucceeded = 'INITIALIZE_BUTTON_SUCCEEDED',\n\n    DeinitializeButtonFailed = 'DEINITIALIZE_BUTTON_FAILED',\n    DeinitializeButtonRequested = 'DEINITIALIZE_BUTTON_REQUESTED',\n    DeinitializeButtonSucceeded = 'DEINITIALIZE_BUTTON_SUCCEEDED',\n}\n\nexport type CheckoutButtonAction = InitializeButtonAction | DeinitializeButtonAction;\n\nexport type InitializeButtonAction =\n    InitializeButtonRequestedAction |\n    InitializeButtonSucceededAction |\n    InitializeButtonFailedAction |\n    LoadPaymentMethodAction;\n\nexport type DeinitializeButtonAction =\n    DeinitializeButtonRequestedAction |\n    DeinitializeButtonSucceededAction |\n    DeinitializeButtonFailedAction;\n\nexport interface CheckoutButtonActionMeta {\n    methodId: CheckoutButtonMethodType;\n}\n\nexport interface InitializeButtonActionMeta extends CheckoutButtonActionMeta {\n    containerId: string;\n}\n\nexport interface InitializeButtonRequestedAction extends Action<undefined, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonRequested;\n}\n\nexport interface InitializeButtonSucceededAction extends Action<undefined, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonSucceeded;\n}\n\nexport interface InitializeButtonFailedAction extends Action<Error, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonFailed;\n}\n\nexport interface DeinitializeButtonRequestedAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonRequested;\n}\n\nexport interface DeinitializeButtonSucceededAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonSucceeded;\n}\n\nexport interface DeinitializeButtonFailedAction extends Action<Error, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport enum GiftCertificateActionType {\n    ApplyGiftCertificateRequested = 'APPLY_GIFT_CERTIFICATE_REQUESTED',\n    ApplyGiftCertificateSucceeded = 'APPLY_GIFT_CERTIFICATE_SUCCEEDED',\n    ApplyGiftCertificateFailed = 'APPLY_GIFT_CERTIFICATE_FAILED',\n\n    RemoveGiftCertificateRequested = 'REMOVE_GIFT_CERTIFICATE_REQUESTED',\n    RemoveGiftCertificateSucceeded = 'REMOVE_GIFT_CERTIFICATE_SUCCEEDED',\n    RemoveGiftCertificateFailed = 'REMOVE_GIFT_CERTIFICATE_FAILED',\n}\n\nexport type GiftCertificateAction =\n    ApplyGiftCertificateAction |\n    RemoveGiftCertificateAction;\n\nexport type ApplyGiftCertificateAction =\n    ApplyGiftCertificateRequestedAction |\n    ApplyGiftCertificateSucceededAction |\n    ApplyGiftCertificateFailedAction;\n\nexport type RemoveGiftCertificateAction =\n    RemoveGiftCertificateRequestedAction |\n    RemoveGiftCertificateSucceededAction |\n    RemoveGiftCertificateFailedAction;\n\nexport interface ApplyGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.ApplyGiftCertificateRequested;\n}\n\nexport interface ApplyGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.ApplyGiftCertificateSucceeded;\n}\n\nexport interface ApplyGiftCertificateFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: GiftCertificateActionType.ApplyGiftCertificateFailed;\n}\n\nexport interface RemoveGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.RemoveGiftCertificateRequested;\n}\n\nexport interface RemoveGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.RemoveGiftCertificateSucceeded;\n}\n\nexport interface RemoveGiftCertificateFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: GiftCertificateActionType.RemoveGiftCertificateFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { VaultAccessToken } from './instrument';\nimport { InstrumentsResponseBody } from './instrument-response-body';\n\nexport enum InstrumentActionType {\n    LoadInstrumentsRequested = 'LOAD_INSTRUMENTS_REQUESTED',\n    LoadInstrumentsSucceeded = 'LOAD_INSTRUMENTS_SUCCEEDED',\n    LoadInstrumentsFailed = 'LOAD_INSTRUMENTS_FAILED',\n\n    DeleteInstrumentRequested = 'DELETE_INSTRUMENT_REQUESTED',\n    DeleteInstrumentSucceeded = 'DELETE_INSTRUMENT_SUCCEEDED',\n    DeleteInstrumentFailed = 'DELETE_INSTRUMENT_FAILED',\n}\n\nexport type InstrumentAction =\n    LoadInstrumentsAction |\n    DeleteInstrumentAction;\n\nexport type LoadInstrumentsAction =\n    LoadInstrumentsRequestedAction |\n    LoadInstrumentsSucceededAction |\n    LoadInstrumentsFailedAction;\n\nexport type DeleteInstrumentAction =\n    DeleteInstrumentRequestedAction |\n    DeleteInstrumentSucceededAction |\n    DeleteInstrumentFailedAction;\n\nexport interface LoadInstrumentsRequestedAction extends Action {\n    type: InstrumentActionType.LoadInstrumentsRequested;\n}\n\nexport interface LoadInstrumentsSucceededAction extends Action<InstrumentsResponseBody, VaultAccessToken> {\n    type: InstrumentActionType.LoadInstrumentsSucceeded;\n}\n\nexport interface LoadInstrumentsFailedAction extends Action<Error> {\n    type: InstrumentActionType.LoadInstrumentsFailed;\n}\n\nexport interface DeleteInstrumentRequestedAction extends Action {\n    type: InstrumentActionType.DeleteInstrumentRequested;\n}\n\nexport interface DeleteInstrumentSucceededAction extends Action<InstrumentsResponseBody, VaultAccessToken & { instrumentId: string }> {\n    type: InstrumentActionType.DeleteInstrumentSucceeded;\n}\n\nexport interface DeleteInstrumentFailedAction extends Action<Error> {\n    type: InstrumentActionType.DeleteInstrumentFailed;\n}\n","import EmbeddedCheckoutError from './embedded-checkout-error';\nimport EmbeddedContentOptions from './iframe-content/embedded-content-options';\n\nexport enum EmbeddedCheckoutEventType {\n    CheckoutComplete = 'CHECKOUT_COMPLETE',\n    CheckoutError = 'CHECKOUT_ERROR',\n    CheckoutLoaded = 'CHECKOUT_LOADED',\n    FrameError = 'FRAME_ERROR',\n    FrameLoaded = 'FRAME_LOADED',\n    SignedOut = 'SIGNED_OUT',\n}\n\nexport interface EmbeddedCheckoutEventMap {\n    [EmbeddedCheckoutEventType.CheckoutComplete]: EmbeddedCheckoutCompleteEvent;\n    [EmbeddedCheckoutEventType.CheckoutError]: EmbeddedCheckoutErrorEvent;\n    [EmbeddedCheckoutEventType.CheckoutLoaded]: EmbeddedCheckoutLoadedEvent;\n    [EmbeddedCheckoutEventType.FrameError]: EmbeddedCheckoutFrameErrorEvent;\n    [EmbeddedCheckoutEventType.FrameLoaded]: EmbeddedCheckoutFrameLoadedEvent;\n    [EmbeddedCheckoutEventType.SignedOut]: EmbeddedCheckoutSignedOutEvent;\n}\n\nexport type EmbeddedCheckoutEvent = (\n    EmbeddedCheckoutCompleteEvent |\n    EmbeddedCheckoutErrorEvent |\n    EmbeddedCheckoutFrameErrorEvent |\n    EmbeddedCheckoutFrameLoadedEvent |\n    EmbeddedCheckoutLoadedEvent |\n    EmbeddedCheckoutSignedOutEvent\n);\n\nexport interface EmbeddedCheckoutCompleteEvent {\n    type: EmbeddedCheckoutEventType.CheckoutComplete;\n}\n\nexport interface EmbeddedCheckoutErrorEvent {\n    type: EmbeddedCheckoutEventType.CheckoutError;\n    payload: EmbeddedCheckoutError;\n}\n\nexport interface EmbeddedCheckoutLoadedEvent {\n    type: EmbeddedCheckoutEventType.CheckoutLoaded;\n}\n\nexport interface EmbeddedCheckoutFrameErrorEvent {\n    type: EmbeddedCheckoutEventType.FrameError;\n    payload: EmbeddedCheckoutError;\n}\n\nexport interface EmbeddedCheckoutFrameLoadedEvent {\n    type: EmbeddedCheckoutEventType.FrameLoaded;\n    payload?: EmbeddedContentOptions;\n}\n\nexport interface EmbeddedCheckoutSignedOutEvent {\n    type: EmbeddedCheckoutEventType.SignedOut;\n}\n","import { setPrototypeOf } from '../../utility';\n\nimport CustomError from './custom-error';\n\n/**\n * This error type should not be constructed directly. It is a base class for\n * all custom errors thrown in this library.\n */\nexport default abstract class StandardError extends Error implements CustomError {\n    name = 'StandardError';\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = (new Error(this.message)).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { AmazonPayRemoteCheckout } from './methods';\n\nexport enum RemoteCheckoutActionType {\n    InitializeRemoteBillingRequested = 'INITIALIZE_REMOTE_BILLING_REQUESTED',\n    InitializeRemoteBillingSucceeded = 'INITIALIZE_REMOTE_BILLING_SUCCEEDED',\n    InitializeRemoteBillingFailed = 'INITIALIZE_REMOTE_BILLING_FAILED',\n\n    InitializeRemoteShippingRequested = 'INITIALIZE_REMOTE_SHIPPING_REQUESTED',\n    InitializeRemoteShippingSucceeded = 'INITIALIZE_REMOTE_SHIPPING_SUCCEEDED',\n    InitializeRemoteShippingFailed = 'INITIALIZE_REMOTE_SHIPPING_FAILED',\n\n    InitializeRemotePaymentRequested = 'INITIALIZE_REMOTE_PAYMENT_REQUESTED',\n    InitializeRemotePaymentSucceeded = 'INITIALIZE_REMOTE_PAYMENT_SUCCEEDED',\n    InitializeRemotePaymentFailed = 'INITIALIZE_REMOTE_PAYMENT_FAILED',\n\n    LoadRemoteSettingsRequested = 'LOAD_REMOTE_SETTINGS_REQUESTED',\n    LoadRemoteSettingsSucceeded = 'LOAD_REMOTE_SETTINGS_SUCCEEDED',\n    LoadRemoteSettingsFailed = 'LOAD_REMOTE_SETTINGS_FAILED',\n\n    SignOutRemoteCustomerRequested = 'SIGN_OUT_REMOTE_CUSTOMER_REQUESTED',\n    SignOutRemoteCustomerSucceeded = 'SIGN_OUT_REMOTE_CUSTOMER_SUCCEEDED',\n    SignOutRemoteCustomerFailed = 'SIGN_OUT_REMOTE_CUSTOMER_FAILED',\n\n    UpdateRemoteCheckout = 'UPDATE_REMOTE_CHECKOUT',\n}\n\nexport type RemoteCheckoutAction = InitializeRemoteBillingAction |\n    InitializeRemoteShippingAction |\n    InitializeRemotePaymentAction |\n    SignOutRemoteCustomerAction |\n    LoadRemoteSettingsAction |\n    UpdateRemoteCheckoutAction;\n\nexport type InitializeRemoteBillingAction = InitializeRemoteBillingSucceededAction |\n    InitializeRemoteBillingFailedAction |\n    InitializeRemoteBillingRequestedAction;\n\nexport interface InitializeRemoteBillingSucceededAction extends Action<AmazonPayRemoteCheckout> {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingSucceeded;\n}\n\nexport interface InitializeRemoteBillingFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingFailed;\n}\n\nexport interface InitializeRemoteBillingRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingRequested;\n}\n\nexport type InitializeRemoteShippingAction = InitializeRemoteShippingSucceededAction |\n    InitializeRemoteShippingFailedAction |\n    InitializeRemoteShippingRequestedAction;\n\nexport interface InitializeRemoteShippingSucceededAction extends Action<AmazonPayRemoteCheckout> {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingSucceeded;\n}\n\nexport interface InitializeRemoteShippingFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingFailed;\n}\n\nexport interface InitializeRemoteShippingRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingRequested;\n}\n\nexport type InitializeRemotePaymentAction = InitializeRemotePaymentSucceededAction |\n    InitializeRemotePaymentFailedAction |\n    InitializeRemotePaymentRequestedAction;\n\nexport interface InitializeRemotePaymentSucceededAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentSucceeded;\n}\n\nexport interface InitializeRemotePaymentFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentFailed;\n}\n\nexport interface InitializeRemotePaymentRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentRequested;\n}\n\nexport type SignOutRemoteCustomerAction = SignOutRemoteCustomerSucceededAction |\n    SignOutRemoteCustomerFailedAction |\n    SignOutRemoteCustomerRequestedAction;\n\nexport interface SignOutRemoteCustomerSucceededAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerSucceeded;\n}\n\nexport interface SignOutRemoteCustomerFailedAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerFailed;\n}\n\nexport interface SignOutRemoteCustomerRequestedAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerRequested;\n}\n\nexport type LoadRemoteSettingsAction = LoadRemoteSettingsSucceededAction |\n    LoadRemoteSettingsRequestedAction |\n    LoadRemoteSettingsFailedAction;\n\nexport interface LoadRemoteSettingsSucceededAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsSucceeded;\n}\n\nexport interface LoadRemoteSettingsRequestedAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsRequested;\n}\n\nexport interface LoadRemoteSettingsFailedAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsFailed;\n}\n\nexport interface UpdateRemoteCheckoutAction extends Action {\n    type: RemoteCheckoutActionType.UpdateRemoteCheckout;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport StandardError from './standard-error';\n\nconst DEFAULT_RESPONSE = {\n    body: {},\n    headers: {},\n    status: 0,\n};\n\n/**\n * Throw this error if we are unable to make a request to the server. It wraps\n * any server response into a JS error object.\n */\nexport default class RequestError<TBody = any> extends StandardError {\n    body: TBody | {};\n    headers: { [key: string]: any };\n    errors: Array<{ code: string; message?: string }>;\n    status: number;\n\n    constructor(\n        response?: Response<TBody | {}>,\n        { message, errors }: {\n            message?: string;\n            errors?: Array<{ code: string; message?: string }>;\n        } = {}\n    ) {\n        const { body, headers, status } = response || DEFAULT_RESPONSE;\n\n        super(message || 'An unexpected error has occurred.');\n\n        this.name = 'RequestError';\n        this.type = 'request';\n        this.body = body;\n        this.headers = headers;\n        this.status = status;\n        this.errors = errors || [];\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport enum StoreCreditActionType {\n    ApplyStoreCreditRequested = 'APPLY_STORE_CREDIT_REQUESTED',\n    ApplyStoreCreditSucceeded = 'APPLY_STORE_CREDIT_SUCCEEDED',\n    ApplyStoreCreditFailed = 'APPLY_STORE_CREDIT_FAILED',\n}\n\nexport type StoreCreditAction =\n    ApplyStoreCreditAction;\n\nexport type ApplyStoreCreditAction =\n    ApplyStoreCreditRequestedAction |\n    ApplyStoreCreditSucceededAction |\n    ApplyStoreCreditFailedAction;\n\nexport interface ApplyStoreCreditRequestedAction extends Action {\n    type: StoreCreditActionType.ApplyStoreCreditRequested;\n}\n\nexport interface ApplyStoreCreditSucceededAction extends Action<Checkout> {\n    type: StoreCreditActionType.ApplyStoreCreditSucceeded;\n}\n\nexport interface ApplyStoreCreditFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: StoreCreditActionType.ApplyStoreCreditFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport Config from './config';\n\nexport enum ConfigActionType {\n    LoadConfigRequested = 'LOAD_CONFIG_REQUESTED',\n    LoadConfigSucceeded = 'LOAD_CONFIG_SUCCEEDED',\n    LoadConfigFailed = 'LOAD_CONFIG_FAILED',\n}\n\nexport type LoadConfigAction =\n    LoadConfigRequestedAction |\n    LoadConfigSucceededAction |\n    LoadConfigFailedAction;\n\nexport interface LoadConfigRequestedAction extends Action {\n    type: ConfigActionType.LoadConfigRequested;\n}\n\nexport interface LoadConfigSucceededAction extends Action<Config> {\n    type: ConfigActionType.LoadConfigSucceeded;\n}\n\nexport interface LoadConfigFailedAction extends Action<Error> {\n    type: ConfigActionType.LoadConfigFailed;\n}\n","import { isPlainObject as lodashIsPlainObject } from 'lodash';\n\n// We need this wrapper because Lodash's version doesn't act as a type guard\nexport default function isPlainObject(value: any): value is object {\n    return lodashIsPlainObject(value);\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport Country from './country';\n\nexport enum CountryActionType {\n    LoadCountriesRequested = 'LOAD_COUNTRIES_REQUESTED',\n    LoadCountriesSucceeded = 'LOAD_COUNTRIES_SUCCEEDED',\n    LoadCountriesFailed = 'LOAD_COUNTRIES_FAILED',\n}\n\nexport type LoadCountriesAction =\n    LoadCountriesRequestedAction |\n    LoadCountriesSucceededAction |\n    LoadCountriesFailedAction;\n\nexport interface LoadCountriesRequestedAction extends Action {\n    type: CountryActionType.LoadCountriesRequested;\n}\n\nexport interface LoadCountriesSucceededAction extends Action<Country[]> {\n    type: CountryActionType.LoadCountriesSucceeded;\n}\n\nexport interface LoadCountriesFailedAction extends Action<Error> {\n    type: CountryActionType.LoadCountriesFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Country } from '../geography';\n\nexport enum ShippingCountryActionType {\n    LoadShippingCountriesRequested = 'LOAD_SHIPPING_COUNTRIES_REQUESTED',\n    LoadShippingCountriesSucceeded = 'LOAD_SHIPPING_COUNTRIES_SUCCEEDED',\n    LoadShippingCountriesFailed = 'LOAD_SHIPPING_COUNTRIES_FAILED',\n}\n\nexport type LoadShippingCountriesAction = LoadShippingCountriesRequestedAction |\n    LoadShippingCountriesSucceededAction |\n    LoadShippingCountriesFailedAction;\n\nexport interface LoadShippingCountriesRequestedAction extends Action {\n    type: ShippingCountryActionType.LoadShippingCountriesRequested;\n}\n\nexport interface LoadShippingCountriesSucceededAction extends Action<Country[]> {\n    type: ShippingCountryActionType.LoadShippingCountriesSucceeded;\n}\n\nexport interface LoadShippingCountriesFailedAction extends Action<Error> {\n    type: ShippingCountryActionType.LoadShippingCountriesFailed;\n}\n","module.exports = require(\"@bigcommerce/request-sender\");","export const ACKNOWLEDGE = 'ACKNOWLEDGE';\nexport const FINALIZE = 'FINALIZE';\nexport const INITIALIZE = 'INITIALIZE';\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when the client library of a payment method fails\n * to load, or for some reason, it is inaccessible.\n */\nexport default class PaymentMethodClientUnavailableError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unable to proceed because the client library of a payment method is not loaded or ready to be used.');\n\n        this.name = 'PaymentMethodClientUnavailableError';\n        this.type = 'payment_method_client_unavailable';\n    }\n}\n","module.exports = require(\"@bigcommerce/script-loader\");","enum ContentType {\n    Json = 'application/json',\n    JsonV1 = 'application/vnd.bc.v1+json',\n}\n\nexport default ContentType;\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderAction } from '../order';\n\nimport PaymentResponseBody from './payment-response-body';\n\nexport enum PaymentActionType {\n    SubmitPaymentRequested = 'SUBMIT_PAYMENT_REQUESTED',\n    SubmitPaymentSucceeded = 'SUBMIT_PAYMENT_SUCCEEDED',\n    SubmitPaymentFailed = 'SUBMIT_PAYMENT_FAILED',\n\n    InitializeOffsitePaymentRequested = 'INITIALIZE_OFFSITE_PAYMENT_REQUESTED',\n    InitializeOffsitePaymentSucceeded = 'INITIALIZE_OFFSITE_PAYMENT_SUCCEEDED',\n    InitializeOffsitePaymentFailed = 'INITIALIZE_OFFSITE_PAYMENT_FAILED',\n}\n\nexport type PaymentAction = SubmitPaymentAction |\n    InitializeOffsitePaymentAction;\n\nexport type SubmitPaymentAction =\n    SubmitPaymentRequestedAction |\n    SubmitPaymentSucceededAction |\n    SubmitPaymentFailedAction |\n    LoadOrderAction;\n\nexport type InitializeOffsitePaymentAction =\n    InitializeOffsitePaymentRequestedAction |\n    InitializeOffsitePaymentSucceededAction |\n    InitializeOffsitePaymentFailedAction;\n\nexport interface SubmitPaymentRequestedAction extends Action {\n    type: PaymentActionType.SubmitPaymentRequested;\n}\n\nexport interface SubmitPaymentSucceededAction extends Action<PaymentResponseBody> {\n    type: PaymentActionType.SubmitPaymentSucceeded;\n}\n\nexport interface SubmitPaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.SubmitPaymentFailed;\n}\n\nexport interface InitializeOffsitePaymentRequestedAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentRequested;\n}\n\nexport interface InitializeOffsitePaymentSucceededAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentSucceeded;\n}\n\nexport interface InitializeOffsitePaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.InitializeOffsitePaymentFailed;\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a method is unable to proceed because the\n * caller has not provided all the arguments according to their requirements,\n * i.e.: if an argument is missing or it is not the expected data type.\n */\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.name = 'InvalidArgumentError';\n        this.type = 'invalid_argument';\n    }\n}\n","export const HOSTED = 'PAYMENT_TYPE_HOSTED';\nexport const OFFLINE = 'PAYMENT_TYPE_OFFLINE';\n","import IframeEvent from './iframe-event';\n\nexport default function isIframeEvent<TEvent extends IframeEvent<TType>, TType extends string>(\n    object: any,\n    type: TType\n): object is TEvent {\n    return object.type === type;\n}\n","module.exports = require(\"shallowequal\");","export interface CompareOptions {\n    keyFilter?(key: string): boolean;\n}\n\nexport default function isEqual(objectA: any, objectB: any, options?: CompareOptions): boolean {\n    if (objectA === objectB) {\n        return true;\n    }\n\n    if (objectA && objectB && typeof objectA === 'object' && typeof objectB === 'object') {\n        if (Array.isArray(objectA) && Array.isArray(objectB)) {\n            return isArrayEqual(objectA, objectB, options);\n        }\n\n        if (Array.isArray(objectA) || Array.isArray(objectB)) {\n            return false;\n        }\n\n        if ((objectA instanceof Date) && (objectB instanceof Date)) {\n            return isDateEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof Date) || (objectB instanceof Date)) {\n            return false;\n        }\n\n        if ((objectA instanceof RegExp) && (objectB instanceof RegExp)) {\n            return isRegExpEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof RegExp) || (objectB instanceof RegExp)) {\n            return false;\n        }\n\n        return isObjectEqual(objectA, objectB, options);\n    }\n\n    return objectA === objectB;\n}\n\nfunction isRegExpEqual(objectA: RegExp, objectB: RegExp): boolean {\n    return objectA.toString() === objectB.toString();\n}\n\nfunction isDateEqual(objectA: Date, objectB: Date): boolean {\n    return objectA.getTime() === objectB.getTime();\n}\n\nfunction isArrayEqual(objectA: any[], objectB: any[], options?: CompareOptions): boolean {\n    if (objectA.length !== objectB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = objectA.length; index < length; index++) {\n        if (!isEqual(objectA[index], objectB[index], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nfunction isObjectEqual(\n    objectA: { [key: string]: any },\n    objectB: { [key: string]: any },\n    options?: CompareOptions\n): boolean {\n    const filter = options && options.keyFilter;\n    const keysA = filter ? Object.keys(objectA).filter(filter) : Object.keys(objectA);\n    const keysB = filter ? Object.keys(objectB).filter(filter) : Object.keys(objectB);\n\n    if (keysA.length !== keysB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = keysA.length; index < length; index++) {\n        const key = keysA[index];\n\n        if (!objectB.hasOwnProperty(key)) {\n            return false;\n        }\n\n        if (!isEqual(objectA[key], objectB[key], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n","module.exports = require(\"@bigcommerce/form-poster\");","module.exports = require(\"local-storage-fallback\");","module.exports = require(\"reselect\");","import { parseUrl } from '../common/url';\n\nexport default class IframeEventPoster<TEvent> {\n    private _targetOrigin: string;\n\n    constructor(\n        targetOrigin: string,\n        private _targetWindow?: Window\n    ) {\n        this._targetOrigin = targetOrigin === '*' ? '*' : parseUrl(targetOrigin).origin;\n    }\n\n    post(event: TEvent): void {\n        if (window === this._targetWindow) {\n            return;\n        }\n\n        if (!this._targetWindow) {\n            throw new Error('Unable to post message becauset target window is not set.');\n        }\n\n        this._targetWindow.postMessage(event, this._targetOrigin);\n    }\n\n    setTarget(window: Window) {\n        this._targetWindow = window;\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadCheckoutAction } from '../checkout';\n\nimport { InternalCustomerResponseData } from './internal-customer-responses';\n\nexport enum CustomerActionType {\n    SignInCustomerRequested = 'SIGN_IN_CUSTOMER_REQUESTED',\n    SignInCustomerSucceeded = 'SIGN_IN_CUSTOMER_SUCCEEDED',\n    SignInCustomerFailed = 'SIGN_IN_CUSTOMER_FAILED',\n\n    SignOutCustomerRequested = 'SIGN_OUT_CUSTOMER_REQUESTED',\n    SignOutCustomerSucceeded = 'SIGN_OUT_CUSTOMER_SUCCEEDED',\n    SignOutCustomerFailed = 'SIGN_OUT_CUSTOMER_FAILED',\n}\n\nexport type CustomerAction =\n    SignInCustomerAction |\n    SignOutCustomerAction;\n\nexport type SignInCustomerAction =\n    SignInCustomerRequestedAction |\n    SignInCustomerSucceededAction |\n    SignInCustomerFailedAction |\n    LoadCheckoutAction;\n\nexport type SignOutCustomerAction =\n    SignOutCustomerRequestedAction |\n    SignOutCustomerSucceededAction |\n    SignOutCustomerFailedAction |\n    LoadCheckoutAction;\n\nexport interface SignInCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignInCustomerRequested;\n}\n\nexport interface SignInCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignInCustomerSucceeded;\n}\n\nexport interface SignInCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignInCustomerFailed;\n}\n\nexport interface SignOutCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignOutCustomerRequested;\n}\n\nexport interface SignOutCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignOutCustomerSucceeded;\n}\n\nexport interface SignOutCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignOutCustomerFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum SpamProtectionActionType {\n    InitializeFailed = 'SPAM_PROTECTION_INITIALIZE_FAILED',\n    InitializeSucceeded = 'SPAM_PROTECTION_INITIALIZE_SUCCEEDED',\n    InitializeRequested = 'SPAM_PROTECTION_INITIALIZE_REQUESTED',\n    ExecuteRequested = 'SPAM_PROTECTION_EXECUTE_REQUESTED',\n    Completed = 'SPAM_PROTECTION_COMPLETED',\n    SubmitFailed = 'SPAM_PROTECTION_SUBMIT_FAILED',\n}\n\nexport type SpamProtectionAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction |\n    ExecuteRequestedAction |\n    CompletedAction |\n    SubmitFailedAction;\n\nexport interface InitializeRequestedAction extends Action {\n    type: SpamProtectionActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: SpamProtectionActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: SpamProtectionActionType.InitializeFailed;\n}\n\nexport interface ExecuteRequestedAction extends Action {\n    type: SpamProtectionActionType.ExecuteRequested;\n}\n\nexport interface CompletedAction extends Action<string> {\n    type: SpamProtectionActionType.Completed;\n}\n\nexport interface SubmitFailedAction extends Action {\n    type: SpamProtectionActionType.SubmitFailed;\n}\n","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n    SpamProtectionNotInitialized,\n}\n\n/**\n * Throw this error if a method requires a certain initialization call to be\n * made first. Some objects can be constructed but they cannot be used until a\n * separate initialization call is made.\n */\nexport default class NotInitializedError extends StandardError {\n    constructor(\n        public subtype: NotInitializedErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'NotInitializedError';\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n    case NotInitializedErrorType.CustomerNotInitialized:\n        return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.PaymentNotInitialized:\n        return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.ShippingNotInitialized:\n        return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.SpamProtectionNotInitialized:\n        return 'Unable to proceed because the checkout spam protection has not been initialized.';\n\n    default:\n        return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { RequestError } from '../../common/error/errors';\n\n/**\n * Throw this error if we are unable to successfully submit a server request\n * using a payment method because the method has invalid configuration or is in\n * an invalid state.\n */\nexport default class PaymentMethodInvalidError extends RequestError {\n    constructor(response?: Response) {\n        super(response, { message: 'There is a problem processing your payment. Please try again later.' });\n\n        this.name = 'PaymentMethodInvalidError';\n        this.type = 'payment_method_invalid';\n    }\n}\n","import { memoize } from '@bigcommerce/memoize';\nimport { createSelector as defaultSelectorCreator } from 'reselect';\n\n/**\n * Decorate selector creators with the ability to memoize the return value of\n * their combiner if it is a function (which effectively works as a partially\n * applied combiner).\n */\nexport default function withMemoizedCombiner<T extends typeof defaultSelectorCreator>(\n    creator: T\n): T {\n    return ((...args: any[]) => {\n        const combiner = args.pop();\n\n        // Reselect's default `createSelector` has many overloads. To avoid having\n        // to redefine all of them, we're using `any` to bypass the typechecker.\n        return (creator as any)(...args, (...combinerArgs: any[]) => {\n            // Although there are many overloads, all of them have the last argument\n            // as the combiner.\n            const result = combiner(...combinerArgs);\n\n            if (typeof result === 'function') {\n                return memoize(result);\n            }\n\n            return result;\n        });\n    }) as T;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum ErrorActionType {\n    ClearError = 'CLEAR_ERROR',\n}\n\nexport type ErrorAction = ClearErrorAction;\n\nexport interface ClearErrorAction extends Action {\n    type: ErrorActionType.ClearError;\n    payload: Error;\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { cachableAction, ActionOptions } from '../common/data-store';\nimport { RequestOptions } from '../common/http-request';\n\nimport { LoadPaymentMethodsAction, LoadPaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\n\nexport default class PaymentMethodActionCreator {\n    constructor(\n        private _requestSender: PaymentMethodRequestSender\n    ) {}\n\n    loadPaymentMethods(options?: RequestOptions): Observable<LoadPaymentMethodsAction> {\n        return Observable.create((observer: Observer<LoadPaymentMethodsAction>) => {\n            observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsRequested));\n\n            this._requestSender.loadPaymentMethods(options)\n                .then(response => {\n                    const meta = {\n                        deviceSessionId: response.headers['x-device-session-id'],\n                        sessionHash: response.headers['x-session-hash'],\n                    };\n\n                    observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsSucceeded, response.body, meta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(PaymentMethodActionType.LoadPaymentMethodsFailed, response));\n                });\n        });\n    }\n\n    @cachableAction\n    loadPaymentMethod(methodId: string, options?: RequestOptions & ActionOptions): Observable<LoadPaymentMethodAction> {\n        return Observable.create((observer: Observer<LoadPaymentMethodAction>) => {\n            observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodRequested, undefined, { methodId }));\n\n            this._requestSender.loadPaymentMethod(methodId, options)\n                .then(response => {\n                    observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodSucceeded, response.body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(PaymentMethodActionType.LoadPaymentMethodFailed, response, { methodId }));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions } from '../common/http-request';\n\nimport PaymentMethod from './payment-method';\n\nexport default class PaymentMethodRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadPaymentMethods({ timeout }: RequestOptions = {}): Promise<Response<PaymentMethod[]>> {\n        const url = '/api/storefront/payments';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n\n    loadPaymentMethod(methodId: string, { timeout }: RequestOptions = {}): Promise<Response<PaymentMethod>> {\n        const url = `/api/storefront/payments/${methodId}`;\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n}\n","import EmbeddedCheckoutStyles from '../embedded-checkout-styles';\n\nexport enum EmbeddedContentEventType {\n    StyleConfigured = 'STYLE_CONFIGURED',\n}\n\nexport interface EmbeddedContentEventMap {\n    [EmbeddedContentEventType.StyleConfigured]: EmbeddedContentStyleConfiguredEvent;\n}\n\nexport type EmbeddedContentEvent = (\n    EmbeddedContentStyleConfiguredEvent\n);\n\nexport interface EmbeddedContentStyleConfiguredEvent {\n    type: EmbeddedContentEventType.StyleConfigured;\n    payload: EmbeddedCheckoutStyles;\n}\n","import { parseUrl } from '../common/url';\nimport { bindDecorator as bind } from '../common/utility';\n\nimport { IframeEventMap } from './iframe-event';\nimport isIframeEvent from './is-iframe-event';\n\nexport default class IframeEventListener<TEventMap extends IframeEventMap<keyof TEventMap>> {\n    private _isListening: boolean;\n    private _listeners: EventListeners<TEventMap>;\n    private _sourceOrigin: string;\n\n    constructor(\n        sourceOrigin: string\n    ) {\n        this._sourceOrigin = parseUrl(sourceOrigin).origin;\n        this._isListening = false;\n        this._listeners = {};\n    }\n\n    listen(): void {\n        if (this._isListening) {\n            return;\n        }\n\n        this._isListening = true;\n\n        window.addEventListener('message', this._handleMessage);\n    }\n\n    stopListen(): void {\n        if (!this._isListening) {\n            return;\n        }\n\n        this._isListening = false;\n\n        window.removeEventListener('message', this._handleMessage);\n    }\n\n    addListener<TType extends keyof TEventMap>(type: TType, listener: (event: TEventMap[TType]) => void): void {\n        let listeners = this._listeners[type];\n\n        if (!listeners) {\n            this._listeners[type] = listeners = [];\n        }\n\n        listeners.push(listener);\n    }\n\n    removeListener<TType extends keyof TEventMap>(type: TType, listener: (event: TEventMap[TType]) => void): void {\n        const listeners = this._listeners[type];\n\n        if (!listeners) {\n            return;\n        }\n\n        const index = listeners.indexOf(listener);\n\n        if (index >= 0) {\n            listeners.splice(index, 1);\n        }\n    }\n\n    trigger<TType extends keyof TEventMap>(event: TEventMap[TType]): void {\n        const listeners = this._listeners[event.type];\n\n        if (!listeners) {\n            return;\n        }\n\n        listeners.forEach(listener => listener(event));\n    }\n\n    @bind\n    private _handleMessage(event: MessageEvent): void {\n        if ((event.origin !== this._sourceOrigin) ||\n            !isIframeEvent(event.data as TEventMap[keyof TEventMap], event.data.type)\n        ) {\n            return;\n        }\n\n        this.trigger(event.data);\n    }\n}\n\ntype EventListeners<TEventMap> = {\n    [key in keyof TEventMap]?: Array<(event: TEventMap[key]) => void>;\n};\n","const CHECKOUT_DEFAULT_INCLUDES = [\n    'cart.lineItems.physicalItems.options',\n    'cart.lineItems.digitalItems.options',\n    'customer',\n    'customer.customerGroup',\n    'payments',\n    'promotions.banners',\n];\n\nexport default CHECKOUT_DEFAULT_INCLUDES;\n","import InternalLineItem from './internal-line-item';\nimport { LineItem } from './line-item';\nimport LineItemMap from './line-item-map';\nimport mapGiftCertificateToInternalLineItem from './map-gift-certificate-to-internal-line-item';\nimport mapToInternalLineItem from './map-to-internal-line-item';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalLineItems(\n    itemMap: LineItemMap,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id'\n): InternalLineItem[] {\n    return (Object.keys(itemMap) as Array<keyof LineItemMap>)\n        .reduce((result, key) => [\n            ...result,\n            ...(itemMap[key] as LineItem[]).map((item: any) => {\n                if (key === 'giftCertificates') {\n                    return mapGiftCertificateToInternalLineItem(item, decimalPlaces);\n                }\n\n                return mapToInternalLineItem(\n                    item,\n                    mapToInternalLineItemType(key),\n                    decimalPlaces,\n                    idKey\n                );\n            }),\n        ], [] as InternalLineItem[]);\n}\n\nfunction mapToInternalLineItemType(type: string): string {\n    switch (type) {\n        case 'physicalItems':\n            return 'ItemPhysicalEntity';\n\n        case 'digitalItems':\n            return 'ItemDigitalEntity';\n\n        case 'giftCertificates':\n            return 'ItemGiftCertificateEntity';\n\n        default:\n            return '';\n    }\n}\n","import { AmountTransformer } from '../common/utility';\n\nimport InternalLineItem from './internal-line-item';\nimport { GiftCertificateItem } from './line-item';\n\nexport default function mapGiftCertificateToInternalLineItem(\n    item: GiftCertificateItem,\n    decimalPlaces: number\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: item.id,\n        imageUrl: '',\n        name: item.name,\n        amount: item.amount,\n        amountAfterDiscount: item.amount,\n        discount: 0,\n        integerAmount: amountTransformer.toInteger(item.amount),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.amount),\n        integerDiscount: 0,\n        quantity: 1,\n        sender: item.sender,\n        recipient: item.recipient,\n        type: 'ItemGiftCertificateEntity',\n        attributes: [],\n        variantId: null,\n    };\n}\n","export const INTERNAL_USE_ONLY = 'This API endpoint is for internal use only and may change in the future';\n","export enum CheckoutIncludes {\n    AvailableShippingOptions = 'consignments.availableShippingOptions',\n    PhysicalItemsCategoryNames = 'cart.lineItems.physicalItems.categoryNames',\n    DigitalItemsCategoryNames = 'cart.lineItems.digitalItems.categoryNames',\n}\n\nexport default interface CheckoutParams {\n    include?: CheckoutIncludes[];\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\nimport { GooglePayCreator } from '../googlepay';\n\nimport {\n    BraintreeClientCreator,\n    BraintreeDataCollectorCreator,\n    BraintreeHostWindow,\n    BraintreePaypalCheckoutCreator,\n    BraintreePaypalCreator,\n    BraintreeThreeDSecureCreator,\n    BraintreeVisaCheckoutCreator,\n} from './braintree';\n\nexport default class BraintreeScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: BraintreeHostWindow = window\n    ) {}\n\n    loadClient(): Promise<BraintreeClientCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/client.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.client) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.client;\n            });\n    }\n\n    load3DS(): Promise<BraintreeThreeDSecureCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/three-d-secure.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.threeDSecure) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.threeDSecure;\n            });\n    }\n\n    loadDataCollector(): Promise<BraintreeDataCollectorCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/data-collector.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.dataCollector) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.dataCollector;\n            });\n    }\n\n    loadPaypal(): Promise<BraintreePaypalCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/paypal.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypal) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.paypal;\n            });\n    }\n\n    loadPaypalCheckout(): Promise<BraintreePaypalCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/paypal-checkout.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypalCheckout) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.paypalCheckout;\n            });\n    }\n\n    loadVisaCheckout(): Promise<BraintreeVisaCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/visa-checkout.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.visaCheckout) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.visaCheckout;\n            });\n    }\n\n    loadGooglePayment(): Promise<GooglePayCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/google-payment.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.googlePayment) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.googlePayment;\n            });\n    }\n}\n","import { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport {\n    BraintreeClient,\n    BraintreeDataCollector,\n    BraintreeModule,\n    BraintreePaypal,\n    BraintreePaypalCheckout,\n    BraintreeThreeDSecure,\n    BraintreeVisaCheckout,\n    GooglePayBraintreeSDK,\n} from './braintree';\nimport BraintreeScriptLoader from './braintree-script-loader';\n\nexport default class BraintreeSDKCreator {\n    private _client?: Promise<BraintreeClient>;\n    private _3ds?: Promise<BraintreeThreeDSecure>;\n    private _paypal?: Promise<BraintreePaypal>;\n    private _paypalCheckout?: Promise<BraintreePaypalCheckout>;\n    private _clientToken?: string;\n    private _visaCheckout?: Promise<BraintreeVisaCheckout>;\n    private _dataCollectors: {\n        default?: Promise<BraintreeDataCollector>;\n        paypal?: Promise<BraintreeDataCollector>;\n    } = {};\n    private _googlePay?: Promise<GooglePayBraintreeSDK>;\n\n    constructor(\n        private _braintreeScriptLoader: BraintreeScriptLoader\n    ) {}\n\n    initialize(clientToken: string) {\n        this._clientToken = clientToken;\n    }\n\n    getClient(): Promise<BraintreeClient> {\n        if (!this._clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!this._client) {\n            this._client = this._braintreeScriptLoader.loadClient()\n                .then(client => client.create({ authorization: this._clientToken }));\n        }\n\n        return this._client;\n    }\n\n    getPaypal(): Promise<BraintreePaypal> {\n        if (!this._paypal) {\n            this._paypal = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypal(),\n            ])\n            .then(([client, paypal]) => paypal.create({ client }));\n        }\n\n        return this._paypal;\n    }\n\n    getPaypalCheckout(): Promise<BraintreePaypalCheckout> {\n        if (!this._paypalCheckout) {\n            this._paypalCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypalCheckout(),\n            ])\n                .then(([client, paypalCheckout]) => paypalCheckout.create({ client }));\n        }\n\n        return this._paypalCheckout;\n    }\n\n    get3DS(): Promise<BraintreeThreeDSecure> {\n        if (!this._3ds) {\n            this._3ds = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.load3DS(),\n            ])\n            .then(([client, threeDSecure]) => threeDSecure.create({ client }));\n        }\n\n        return this._3ds;\n    }\n\n    getDataCollector(options?: { paypal: boolean }): Promise<BraintreeDataCollector> {\n        const cacheKey = options && options.paypal ? 'paypal' : 'default';\n        let cached = this._dataCollectors[cacheKey];\n\n        if (!cached) {\n            cached = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadDataCollector(),\n            ])\n            .then(([client, dataCollector]) => dataCollector.create({ client, kount: true, ...options }))\n            .catch(error => {\n                if (error && error.code === 'DATA_COLLECTOR_KOUNT_NOT_ENABLED') {\n                    return { deviceData: undefined, teardown: () => Promise.resolve() };\n                }\n\n                throw error;\n            });\n\n            this._dataCollectors[cacheKey] = cached;\n        }\n\n        return cached;\n    }\n\n    getVisaCheckout(): Promise<BraintreeVisaCheckout> {\n        if (!this._visaCheckout) {\n            this._visaCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadVisaCheckout(),\n            ])\n            .then(([client, visaCheckout]) => visaCheckout.create({ client }));\n        }\n\n        return this._visaCheckout;\n    }\n\n    getGooglePaymentComponent(): Promise<GooglePayBraintreeSDK> {\n        if (!this._googlePay) {\n            this._googlePay = Promise.all ([\n                this.getClient(),\n                this._braintreeScriptLoader.loadGooglePayment(),\n            ])\n                .then(([client, googlePay]) => googlePay.create({ client }));\n        }\n\n        return this._googlePay;\n    }\n\n    teardown(): Promise<void> {\n        return Promise.all([\n            this._teardown(this._3ds),\n            this._teardown(this._dataCollectors.default),\n            this._teardown(this._dataCollectors.paypal),\n            this._teardown(this._visaCheckout),\n            this._teardown(this._googlePay),\n        ]).then(() => {\n            this._3ds = undefined;\n            this._visaCheckout = undefined;\n            this._dataCollectors = {};\n            this._googlePay = undefined;\n        });\n    }\n\n    private _teardown(module?: Promise<BraintreeModule>) {\n        return module ?\n            module.then(mod => mod.teardown()) :\n            Promise.resolve();\n    }\n}\n","import { AmountTransformer } from '../common/utility';\n\nimport InternalLineItem from './internal-line-item';\nimport { DigitalItem, LineItem } from './line-item';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalLineItem(\n    item: LineItem,\n    type: string,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id'\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: (item[idKey] as string | number),\n        imageUrl: item.imageUrl,\n        amount: item.extendedListPrice,\n        amountAfterDiscount: item.extendedSalePrice,\n        discount: item.discountAmount,\n        integerAmount: amountTransformer.toInteger(item.extendedListPrice),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.extendedSalePrice),\n        integerDiscount: amountTransformer.toInteger(item.discountAmount),\n        downloadsPageUrl: (item as DigitalItem).downloadPageUrl,\n        name: item.name,\n        quantity: item.quantity,\n        brand: item.brand,\n        categoryNames: item.categoryNames,\n        variantId: item.variantId,\n        productId: item.productId,\n        attributes: (item.options || []).map(option => ({\n            name: option.name,\n            value: option.value,\n        })),\n        addedByPromotion: item.addedByPromotion,\n        type,\n    };\n}\n","import { createErrorAction, Action } from '@bigcommerce/data-store';\nimport { concat, of, throwError, Observable } from 'rxjs';\n\nexport default function throwErrorAction<TPayload, TMeta, TType extends string>(\n    type: TType,\n    error?: TPayload,\n    meta?: TMeta\n): Observable<Action<TPayload, TMeta, TType>> {\n    if (isErrorAction(error)) {\n        return concat(of(error), throwError(createErrorAction(type, error.payload, meta)));\n    }\n\n    return throwError(createErrorAction(type, error, meta));\n}\n\nfunction isErrorAction(action: any): action is Action {\n    return action && action.type && action.error;\n}\n","export default class AmountTransformer {\n    constructor(private _decimalPlaces: number) {}\n\n    toInteger(amount: number): number {\n        return Math.round(amount * Math.pow(10, this._decimalPlaces));\n    }\n}\n","import { InvalidArgumentError } from '../error/errors';\n\nimport Url from './url';\n\nexport default function parseUrl(url: string): Url {\n    if (!/^(https?:)?\\/\\//.test(url)) {\n        throw new InvalidArgumentError('The provided URL must be absolute.');\n    }\n\n    // new URL() is not supported in IE11, use anchor tag instead\n    const anchor = document.createElement('a');\n\n    anchor.href = url;\n\n    // IE11 returns 80 or 443 for the port number depending on the URL scheme,\n    // even if the port number is not specified in the URL.\n    const port = anchor.port && url.indexOf(`${anchor.hostname}:${anchor.port}`) !== -1 ?\n        anchor.port :\n        '';\n\n    return {\n        hash: anchor.hash,\n        hostname: anchor.hostname,\n        href: anchor.href,\n        origin: `${anchor.protocol}//${anchor.hostname}${port ? ':' + port : ''}`,\n        pathname: anchor.pathname,\n        port,\n        protocol: anchor.protocol,\n        search: anchor.search,\n    };\n}\n","import { Action, ThunkAction } from '@bigcommerce/data-store';\nimport { memoize } from '@bigcommerce/memoize';\nimport { from, Observable } from 'rxjs';\nimport { shareReplay } from 'rxjs/operators';\n\nexport default function cacheAction<TFunction extends CreateActionFn>(\n    fn: TFunction\n): TFunction {\n    function decoratedFn(this: any, ...args: any[]) {\n        const action = fn.call(this, ...args);\n\n        if (action instanceof Observable) {\n            return from(action).pipe(shareReplay());\n        }\n\n        if (typeof action === 'function') {\n            return memoize(store => from(action(store)).pipe(shareReplay()));\n        }\n\n        return action;\n    }\n\n    return memoize(decoratedFn as TFunction);\n}\n\ntype CreateActionFn = (...args: any[]) => Observable<Action> | ThunkAction<Action> | Action;\n","import ActionOptions from './action-options';\n\nexport default function isActionOptions(param: any): param is ActionOptions {\n    return param && typeof param.useCache === 'boolean';\n}\n","import cacheAction from './cache-action';\nimport isActionOptions from './is-action-options';\n\nexport default function cachableActionDecorator<TMethod extends (...args: any[]) => any>(\n    _: object,\n    key: string,\n    descriptor: TypedPropertyDescriptor<TMethod>\n): TypedPropertyDescriptor<TMethod> {\n    const memoizedMethods = new WeakMap<object, { [key: string]: TMethod }>();\n\n    function decorateMethod(this: object, method: TMethod): TMethod {\n        return ((...args: any[]) => {\n            const lastArg = args[args.length - 1];\n            const { useCache } = isActionOptions(lastArg) ? lastArg : { useCache: false };\n\n            if (!useCache) {\n                return method.call(this, ...args);\n            }\n\n            const instanceMethods = memoizedMethods.get(this) || {};\n\n            if (!memoizedMethods.get(this)) {\n                memoizedMethods.set(this, instanceMethods);\n            }\n\n            if (!instanceMethods[key]) {\n                instanceMethods[key] = cacheAction(method);\n            }\n\n            return instanceMethods[key].call(this, ...args);\n        }) as TMethod;\n    }\n\n    return {\n        get() {\n            if (typeof descriptor.value !== 'function') {\n                throw new Error('Decorator should be used in functions');\n            }\n\n            const value = decorateMethod.call(this, descriptor.value);\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n    };\n}\n","/**\n * Decorates a class or a method by binding all its prototype methods or itself\n * to the calling instance respectively.\n */\nexport default function bindDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T>;\nexport default function bindDecorator<T extends Constructor<object>>(target: T): T;\nexport default function bindDecorator(target: any, key?: any, descriptor?: any): any {\n    if (!key || !descriptor) {\n        return bindClassDecorator(target);\n    }\n\n    return bindMethodDecorator(target, key, descriptor);\n}\n\n/**\n * Decorates a class by binding all its prototype methods to the calling\n * instance.\n */\nexport function bindClassDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                bindMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\n/**\n * Decorates a method by binding it to the calling instance.\n */\nexport function bindMethodDecorator<T extends Method>(_: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let method: T = descriptor.value;\n\n    return {\n        get() {\n            const boundMethod = method.bind(this) as T;\n\n            Object.defineProperty(this, key, {\n                ...descriptor,\n                value: boundMethod,\n            });\n\n            return boundMethod;\n        },\n        set(value) {\n            method = value;\n        },\n    };\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\nexport type Method = (...args: any[]) => any;\n","module.exports = require(\"iframe-resizer\");","module.exports = require(\"iframe-resizer/js/iframeResizer.contentWindow\");","import { isPlainObject, omitBy, transform } from 'lodash';\n\nexport default function omitDeep(object: any, predicate: (value: any, key: string) => boolean): any {\n    if (Array.isArray(object)) {\n        return object.map(value => omitDeep(value, predicate));\n    }\n\n    if (isPlainObject(object)) {\n        return transform(omitBy(object, predicate), (result, value, key) => {\n            result[key] = omitDeep(value, predicate);\n        }, {} as { [key: string]: any });\n    }\n\n    return object;\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, merge, of, Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { ConfigActionCreator } from '../config';\n\nimport { CheckoutRequestBody } from './checkout';\nimport { CheckoutActionType, LoadCheckoutAction, UpdateCheckoutAction } from './checkout-actions';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport default class CheckoutActionCreator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender,\n        private _configActionCreator: ConfigActionCreator\n    ) {}\n\n    loadCheckout(id: string, options?: RequestOptions): Observable<LoadCheckoutAction> {\n        return concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            merge(\n                this._configActionCreator.loadConfig({ ...options, useCache: true }),\n                defer(() => this._checkoutRequestSender.loadCheckout(id, options)\n                    .then(({ body }) => createAction(CheckoutActionType.LoadCheckoutSucceeded, body)))\n            )\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error))\n        );\n    }\n\n    loadDefaultCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            this._configActionCreator.loadConfig(),\n            defer(async () => {\n                const state = store.getState();\n                const context = state.config.getContextConfig();\n\n                if (!context || !context.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                const { body } = await this._checkoutRequestSender.loadCheckout(context.checkoutId, options);\n\n                return createAction(CheckoutActionType.LoadCheckoutSucceeded, body);\n            })\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error))\n        );\n    }\n\n    updateCheckout(\n        body: CheckoutRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateCheckoutAction, InternalCheckoutSelectors> {\n        return store => new Observable(observer => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CheckoutActionType.UpdateCheckoutRequested));\n\n            this._checkoutRequestSender.updateCheckout(checkout.id, body, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CheckoutActionType.UpdateCheckoutSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CheckoutActionType.UpdateCheckoutFailed, response));\n                });\n        });\n    }\n\n    loadCurrentCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            return this.loadCheckout(checkout.id, options);\n        };\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { find } from 'lodash';\nimport { Observable, Observer } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { Cart } from '../cart';\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { CheckoutIncludes } from '../checkout/checkout-params';\nimport CheckoutRequestSender from '../checkout/checkout-request-sender';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport Consignment, {\n    ConsignmentsRequestBody,\n    ConsignmentAssignmentRequestBody,\n    ConsignmentCreateRequestBody,\n    ConsignmentLineItem,\n    ConsignmentRequestBody,\n    ConsignmentShippingOptionRequestBody,\n    ConsignmentUpdateRequestBody\n} from './consignment';\nimport {\n    ConsignmentActionType,\n    CreateConsignmentsAction,\n    DeleteConsignmentAction,\n    LoadShippingOptionsAction,\n    UpdateConsignmentAction,\n    UpdateShippingOptionAction,\n} from './consignment-actions';\nimport ConsignmentRequestSender from './consignment-request-sender';\n\nexport default class ConsignmentActionCreator {\n    constructor(\n        private _consignmentRequestSender: ConsignmentRequestSender,\n        private _checkoutRequestSender: CheckoutRequestSender\n    ) {}\n\n    unassignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<DeleteConsignmentAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const existingConsignment = state.consignments.getConsignmentByAddress(consignment.shippingAddress);\n\n            if (!existingConsignment) {\n                throw new InvalidArgumentError('No consignment found for the specified address');\n            }\n\n            const lineItems = this._removeLineItems(\n                consignment.lineItems,\n                existingConsignment,\n                state.cart.getCart()\n            );\n\n            if (!lineItems.length) {\n                return this.deleteConsignment(existingConsignment.id, options)(store);\n            }\n\n            return this.updateConsignment({\n                id: existingConsignment.id,\n                shippingAddress: consignment.shippingAddress,\n                lineItems,\n            }, options)(store);\n        };\n    }\n\n    assignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const existingConsignment = state.consignments.getConsignmentByAddress(consignment.shippingAddress);\n\n            return this._createOrUpdateConsignment({\n                id: existingConsignment && existingConsignment.id,\n                shippingAddress: consignment.shippingAddress,\n                lineItems: this._addLineItems(\n                    consignment.lineItems,\n                    existingConsignment,\n                    state.cart.getCart()\n                ),\n            }, options)(store);\n        };\n    }\n\n    selectShippingOption(\n        id: string,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n            const consignments = state.consignments.getConsignments();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (!consignments || !consignments.length) {\n                throw new MissingDataError(MissingDataErrorType.MissingConsignments);\n            }\n\n            const consignmentUpdateBody = {\n                id: consignments[0].id,\n                shippingOptionId: id,\n            };\n\n            const consignmentMeta = {\n                id: consignments[0].id,\n            };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignmentUpdateBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(\n                        ConsignmentActionType.UpdateShippingOptionSucceeded,\n                        body,\n                        consignmentMeta\n                    ));\n\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(\n                        ConsignmentActionType.UpdateShippingOptionFailed,\n                        response,\n                        consignmentMeta\n                    ));\n                });\n        });\n    }\n\n    loadShippingOptions(options?: RequestOptions): ThunkAction<LoadShippingOptionsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<LoadShippingOptionsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.LoadShippingOptionsRequested));\n\n            this._checkoutRequestSender.loadCheckout(checkout.id, {\n                ...options,\n                params: {\n                    include: [CheckoutIncludes.AvailableShippingOptions],\n                },\n            })\n            .then(({ body }) => {\n                observer.next(createAction(ConsignmentActionType.LoadShippingOptionsSucceeded, body));\n                observer.complete();\n            })\n            .catch(response => {\n                observer.error(createErrorAction(ConsignmentActionType.LoadShippingOptionsFailed, response));\n            });\n        });\n    }\n\n    updateAddress(\n        address: AddressRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<CreateConsignmentsAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => {\n            const consignment = this._getConsignmentRequestBody(address, store);\n            const consignments = store.getState().consignments.getConsignments();\n\n            if (consignments && consignments.length) {\n                (consignment as ConsignmentUpdateRequestBody).id = consignments[0].id;\n            }\n\n            return this._createOrUpdateConsignment(consignment, options)(store);\n        };\n    }\n\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CreateConsignmentsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.CreateConsignmentsRequested));\n\n            this._consignmentRequestSender.createConsignments(checkout.id, consignments, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.CreateConsignmentsSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.CreateConsignmentsFailed, response));\n                });\n        });\n    }\n\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateConsignmentAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions\n    ): ThunkAction<DeleteConsignmentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<DeleteConsignmentAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n            const consignmentMeta = { id: consignmentId };\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.DeleteConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.deleteConsignment(checkout.id, consignmentId, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.DeleteConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.DeleteConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    updateShippingOption(\n        consignment: ConsignmentShippingOptionRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateShippingOptionSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateShippingOptionFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    private _createOrUpdateConsignment(\n        consignment: ConsignmentCreateRequestBody | ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (this._isUpdateConsignmentRequest(consignment)) {\n                return this.updateConsignment(consignment, options)(store);\n            }\n\n            return this.createConsignments([consignment], options)(store);\n        };\n    }\n\n    private _getConsignmentRequestBody(\n        shippingAddress: AddressRequestBody,\n        store: ReadableCheckoutStore\n    ): ConsignmentRequestBody {\n        const state = store.getState();\n        const cart = state.cart.getCart();\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return {\n            shippingAddress,\n            lineItems: (cart.lineItems && cart.lineItems.physicalItems || [])\n                .map(item => ({\n                    itemId: item.id,\n                    quantity: item.quantity,\n                })\n            ),\n        };\n    }\n\n    private _removeLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment: Consignment,\n        cart?: Cart\n    ): ConsignmentLineItem[] {\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return this._hydrateLineItems(consignment.lineItemIds, cart).map(existingItem => {\n            const sharedItem = find(lineItems, lineItem => lineItem.itemId === existingItem.itemId);\n\n            return {\n                ...existingItem,\n                quantity: sharedItem ? (existingItem.quantity - sharedItem.quantity) : existingItem.quantity,\n            };\n        }).filter(lineItem => lineItem.quantity > 0);\n    }\n\n    private _addLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment?: Consignment,\n        cart?: Cart\n    ): ConsignmentLineItem[] {\n        if (!consignment) {\n            return lineItems;\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return lineItems\n            .concat(this._hydrateLineItems(consignment.lineItemIds, cart))\n            .filter(lineItem => lineItem.quantity > 0);\n    }\n\n    private _hydrateLineItems(lineItemIds: string[], cart: Cart): ConsignmentLineItem[] {\n        return lineItemIds.map(itemId => {\n            const item = find(cart.lineItems.physicalItems, lineItem => lineItem.id === itemId);\n\n            return {\n                itemId,\n                quantity: item ? item.quantity : 0,\n            };\n        });\n    }\n\n    private _isUpdateConsignmentRequest(\n        request: ConsignmentRequestBody\n    ): request is ConsignmentUpdateRequestBody {\n        const updateRequest = request as ConsignmentUpdateRequestBody;\n\n        return !!updateRequest.id;\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport { ConsignmentsRequestBody, ConsignmentUpdateRequestBody } from './consignment';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'consignments.availableShippingOptions',\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ].join(','),\n};\n\nexport default class ConsignmentRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createConsignments(checkoutId: string, consignments: ConsignmentsRequestBody, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, { body: consignments, params: DEFAULT_PARAMS, headers, timeout });\n    }\n\n    updateConsignment(checkoutId: string, consignment: ConsignmentUpdateRequestBody, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const { id, ...body } = consignment;\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, { params: DEFAULT_PARAMS, body, headers, timeout });\n    }\n\n    deleteConsignment(checkoutId: string, consignmentId: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${consignmentId}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, { params: DEFAULT_PARAMS, headers, timeout });\n    }\n}\n","export default function getCallbackUrl(origin: string): string {\n    return `${window.location.origin}/checkout.php?action=set_external_checkout&provider=masterpass&gateway=stripe&origin=${origin}`;\n}\n","import InternalShippingOption from './internal-shipping-option';\nimport ShippingOption from './shipping-option';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalShippingOption(option: ShippingOption, isSelected: boolean): InternalShippingOption {\n    return {\n        description: option.description,\n        module: option.type,\n        price: option.cost,\n        id: option.id,\n        selected: isSelected,\n        isRecommended: option.isRecommended,\n        imageUrl: option.imageUrl,\n        transitTime: option.transitTime,\n    };\n}\n","export default function isPrivate(key: string): boolean {\n    return `${key}`.indexOf('$$') === 0 || `${key}`.indexOf('_') === 0;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\n/**\n * Throw this error if there is an unexpected error and it is not possible to\n * recover from unless the shopper creates a new checkout session.\n */\nexport default class UnrecoverableError extends RequestError {\n    constructor(response: Response, message?: string) {\n        super(response, {\n            message: message || 'An unexpected error has occurred. The checkout process cannot continue as a result.',\n        });\n\n        this.name = 'UnrecoverableError';\n        this.type = 'unrecoverable';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromInternalErrorResponse(\n    response: Response<InternalErrorResponseBody>,\n    message?: string\n): RequestError {\n    const { body } = response;\n    const { errors = [] } = body;\n\n    return new RequestError(response, {\n        message: joinErrors(errors) || body.detail || body.title || message,\n        errors: errors.length ?\n            errors.map(message => ({ code: body.type, message })) :\n            [{ code: body.type, message: body.detail || body.title }],\n    });\n}\n\nfunction joinErrors(errors: string[]): string | undefined {\n    return errors.reduce((result: string[], error) => {\n        if (error) {\n            return [...result, error];\n        }\n\n        return result;\n    }, []).join(' ');\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { PaymentErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromPaymentErrorResponse(\n    response: Response<PaymentErrorResponseBody>,\n    message?: string\n): RequestError {\n    const { body } = response;\n    const { errors = [] } = body;\n\n    return new RequestError(response, {\n        message: joinErrors(errors) || message,\n        errors,\n    });\n}\n\nfunction joinErrors(errors: Array<{ code: string; message?: string }>): string | undefined {\n    if (!Array.isArray(errors)) {\n        return;\n    }\n\n    return errors.reduce((result: string[], error) => {\n        if (error && error.message) {\n            return [...result, error.message];\n        }\n\n        return result;\n    }, []).join(' ');\n}\n","import { Response } from '@bigcommerce/request-sender';\nimport { last } from 'lodash';\n\nimport ErrorResponseBody, {\n    InternalErrorResponseBody,\n    StorefrontErrorResponseBody\n} from './error-response-body';\nimport { RequestError, TimeoutError } from './errors';\nimport mapFromInternalErrorResponse from './errors/map-from-internal-error-response';\nimport mapFromPaymentErrorResponse from './errors/map-from-payment-error-response';\nimport mapFromStorefrontErrorResponse from './errors/map-from-storefront-error-response';\n\nexport default class RequestErrorFactory {\n    private _factoryMethods: { [key: string]: ErrorFactoryMethod } = {};\n\n    constructor() {\n        this.register('default', (response, message) => new RequestError(response, { message }));\n        this.register('internal', (response, message) => mapFromInternalErrorResponse(response, message));\n        this.register('storefront', (response, message) => mapFromStorefrontErrorResponse(response, message));\n        this.register('payment', (response, message) => mapFromPaymentErrorResponse(response, message));\n        this.register('timeout', response => new TimeoutError(response));\n    }\n\n    register(type: string, factoryMethod: ErrorFactoryMethod): void {\n        this._factoryMethods[type] = factoryMethod;\n    }\n\n    createError(response: Response, message?: string): RequestError {\n        const factoryMethod = this._factoryMethods[this._getType(response)] || this._factoryMethods.default;\n\n        return factoryMethod(response, message);\n    }\n\n    private _getType(response: Response<ErrorResponseBody>): string {\n        if (response.status === 0) {\n            return 'timeout';\n        }\n\n        if (this._isStorefrontErrorResponseBody(response.body)) {\n            return 'storefront';\n        }\n\n        if (this._isInternalErrorResponseBody(response.body)) {\n            const internalType = last(response.body.type.split('/'));\n\n            return internalType && this._factoryMethods[internalType] ?\n                internalType :\n                'internal';\n        }\n\n        const error = last(response.body && response.body.errors);\n\n        if (error && error.code && this._factoryMethods[error.code]) {\n            return error.code;\n        }\n\n        return 'payment';\n    }\n\n    private _isStorefrontErrorResponseBody(\n        errorResponse: ErrorResponseBody\n    ): errorResponse is StorefrontErrorResponseBody {\n        const storefrontErrorResponse = errorResponse as StorefrontErrorResponseBody;\n\n        return !this._isInternalErrorResponseBody(errorResponse) &&\n            typeof storefrontErrorResponse.title === 'string' &&\n            typeof storefrontErrorResponse.type === 'string' &&\n            typeof storefrontErrorResponse.status === 'number' &&\n            typeof storefrontErrorResponse.detail === 'string';\n    }\n\n    private _isInternalErrorResponseBody(\n        errorResponse: ErrorResponseBody\n    ): errorResponse is InternalErrorResponseBody {\n        const internalErrorResponse = errorResponse as InternalErrorResponseBody;\n\n        return typeof internalErrorResponse.errors === 'object' &&\n            typeof internalErrorResponse.title === 'string' &&\n            typeof internalErrorResponse.type === 'string' &&\n            typeof internalErrorResponse.status === 'number';\n    }\n}\n\nexport type ErrorFactoryMethod = (response: Response, message?: string) => RequestError;\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { StorefrontErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromStorefrontErrorResponse(\n    response: Response<StorefrontErrorResponseBody>,\n    message?: string\n): RequestError<StorefrontErrorResponseBody> {\n    const { body } = response;\n\n    return new RequestError(response, {\n        message: message || body.detail || body.title,\n        errors: [{\n            code: body.code || body.type,\n            message: body.detail || body.title,\n        }],\n    });\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { omitDeep } from '../utility';\n\nimport { ClearErrorAction, ErrorActionType } from './error-actions';\n\nexport default function clearErrorReducer<TState extends { [key: string]: any }, TAction extends Action>(\n    state: TState,\n    action: TAction\n): TState | undefined {\n    if (isClearErrorAction(action)) {\n        return omitDeep(state, value => value === action.payload);\n    }\n\n    return state;\n}\n\nfunction isClearErrorAction(action: Action): action is ClearErrorAction {\n    return action.type === ErrorActionType.ClearError;\n}\n","import isEqual from './is-equal';\n\n/**\n * Replace the current value with a new value if the former is different to the\n * latter.\n */\nexport default function replace<T>(currentValue: T, newValue?: T): T {\n    if (newValue === undefined || isEqual(currentValue, newValue)) {\n        return currentValue;\n    }\n\n    return newValue;\n}\n","import isEqual from './is-equal';\n\n/**\n * Set a new value to an object under a key if the new value is different to the\n * current value of the key.\n */\nexport default function objectSet<T extends { [key: string]: any }, K extends keyof T>(\n    object: T | undefined,\n    key: K,\n    value: T[K]\n): T {\n    if (object && object.hasOwnProperty(key) && isEqual(object[key], value)) {\n        return object;\n    }\n\n    return {\n        ...object as any,\n        [key]: value,\n    };\n}\n","import BillingAddress from './billing-address';\n\nexport default interface BillingAddressState {\n    data?: BillingAddress;\n    errors: BillingAddressErrorsState;\n    statuses: BillingAddressStatusesState;\n}\n\nexport interface BillingAddressErrorsState {\n    loadError?: Error;\n    updateError?: Error;\n    continueAsGuestError?: Error;\n}\n\nexport interface BillingAddressStatusesState {\n    isLoading?: boolean;\n    isUpdating?: boolean;\n    isContinuingAsGuest?: boolean;\n}\n\nexport const DEFAULT_STATE: BillingAddressState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { objectSet, replace } from '../common/utility';\nimport { OrderAction, OrderActionType } from '../order';\n\nimport BillingAddress from './billing-address';\nimport { BillingAddressAction, BillingAddressActionType } from './billing-address-actions';\nimport BillingAddressState, { BillingAddressErrorsState, BillingAddressStatusesState, DEFAULT_STATE } from './billing-address-state';\n\nexport default function billingAddressReducer(\n    state: BillingAddressState = DEFAULT_STATE,\n    action: Action\n): BillingAddressState {\n    const reducer = combineReducers<BillingAddressState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: BillingAddress | undefined,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddress | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return replace(data, action.payload && action.payload.billingAddress);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: BillingAddressErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddressErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return objectSet(errors, 'updateError', undefined);\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n        return objectSet(errors, 'updateError', action.payload);\n\n    case BillingAddressActionType.ContinueAsGuestRequested:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n        return objectSet(errors, 'continueAsGuestError', undefined);\n\n    case BillingAddressActionType.ContinueAsGuestFailed:\n        return objectSet(errors, 'continueAsGuestError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: BillingAddressStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddressStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n        return objectSet(statuses, 'isUpdating', true);\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return objectSet(statuses, 'isUpdating', false);\n\n    case BillingAddressActionType.ContinueAsGuestRequested:\n        return objectSet(statuses, 'isContinuingAsGuest', true);\n\n    case BillingAddressActionType.ContinueAsGuestFailed:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n        return objectSet(statuses, 'isContinuingAsGuest', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { isArray } from 'lodash';\n\nimport isPlainObject from './is-plain-object';\nimport objectMerge from './object-merge';\nimport replace from './replace';\n\nexport interface ArrayReplaceOptions {\n    matchObject(objectA: any, objectB: any): boolean;\n}\n\nexport default function arrayReplace<T>(currentArray: T[] | undefined, newArray: T[], options?: ArrayReplaceOptions): T[];\nexport default function arrayReplace<T>(currentArray: T[], newArray?: T[], options?: ArrayReplaceOptions): undefined;\nexport default function arrayReplace<T>(currentArray?: T[], newArray?: T[], options?: ArrayReplaceOptions): T[] | undefined;\nexport default function arrayReplace<T>(currentArray?: T[], newArray?: T[], options?: ArrayReplaceOptions): T[] | undefined {\n    const { matchObject = (a: any, b: any) => a.id === b.id } = options || {};\n\n    // Return the new array if the current array does not exist\n    if (!currentArray) {\n        return newArray;\n    }\n\n    // If the new array does not exist, or the current array is strictly equal\n    // to the new array, exit early and return the current array so that the\n    // object reference doesn't change\n    if (!newArray || currentArray === newArray) {\n        return currentArray;\n    }\n\n    // Otherwise, try to replace the items of the current array with the new\n    // array. If the item from the two arrays are the same, keep the current\n    // one. Do it recursively until all arrays are replaced.\n    let sameAsCurrentCount = 0;\n    let sameAsNewCount = 0;\n\n    const countSameAsReplaced = <T>(replacedValue: T, currentValue: T, newValue: T): T => {\n        sameAsCurrentCount += replacedValue === currentValue ? 1 : 0;\n        sameAsNewCount += replacedValue === newValue ? 1 : 0;\n\n        return replacedValue;\n    };\n\n    const result = newArray.map((newItem, index) => {\n        const currentItem = currentArray && currentArray[index];\n\n        if (isPlainObject(currentItem) && isPlainObject(newItem)) {\n            if (matchObject(currentItem, newItem)) {\n                return countSameAsReplaced(\n                    objectMerge(currentItem, newItem),\n                    currentItem,\n                    newItem\n                );\n            }\n\n            return countSameAsReplaced(\n                replace(currentItem, newItem),\n                currentItem,\n                newItem\n            );\n        }\n\n        if (isArray(currentItem) && isArray(newItem)) {\n            return countSameAsReplaced(\n                arrayReplace(currentItem, newItem),\n                currentItem,\n                newItem\n            );\n        }\n\n        return countSameAsReplaced(\n            replace(currentItem, newItem),\n            currentItem,\n            newItem\n        );\n    }) as T[];\n\n    // If all items in the result are identical to the current array, and the\n    // current array and the new array have the same size, simply return the\n    // current array instead of the result.\n    if (sameAsCurrentCount === newArray.length && (currentArray && currentArray.length === newArray.length)) {\n        return currentArray;\n    }\n\n    // If all items in the result are identical to the new array, simply return\n    // the new array.\n    if (sameAsNewCount === newArray.length) {\n        return newArray;\n    }\n\n    return result;\n}\n","import { isArray } from 'lodash';\n\nimport arrayReplace from './array-replace';\nimport isPlainObject from './is-plain-object';\nimport objectSet from './object-set';\n\nexport default function objectMerge<T extends object>(currentObject: T, newObject?: Partial<T>): T;\nexport default function objectMerge<T extends object>(currentObject: T | undefined, newObject: Partial<T>): Partial<T>;\nexport default function objectMerge<T extends object>(currentObject?: T, newObject?: Partial<T>): T | undefined;\nexport default function objectMerge<T extends object>(currentObject?: T, newObject?: Partial<T>): T | Partial<T> | undefined {\n    if (!currentObject) {\n        return newObject;\n    }\n\n    // If the new object does not exist but the current object does, or the new\n    // object is strictly equal to the current object, return the current object\n    if (!newObject || currentObject === newObject) {\n        return currentObject;\n    }\n\n    // If both objects exist, but some values might be different, perform a merge.\n    // Retain values that are equal and only replace them with the new values if\n    // they are different.\n    return (Object.keys(newObject) as Array<keyof T>)\n        .reduce((result, key) => {\n            const currentValue = result[key];\n            const newValue = newObject[key];\n\n            if (isPlainObject(currentValue) && isPlainObject(newValue)) {\n                return objectSet(result, key, objectMerge(currentValue, newValue));\n            }\n\n            if (isArray(currentValue) && isArray(newValue)) {\n                return objectSet(result, key, arrayReplace(currentValue, newValue) as any);\n            }\n\n            return objectSet(result, key, newValue as any);\n        }, currentObject);\n}\n","import Cart from './cart';\n\nexport default interface CartState {\n    data?: Cart;\n    errors: CartErrorsState;\n    statuses: CartStatusesState;\n}\n\nexport interface CartErrorsState {\n    loadError?: Error;\n}\n\nexport interface CartStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: CartState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing/billing-address-actions';\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\nimport { CouponAction, CouponActionType } from '../coupon/coupon-actions';\nimport { GiftCertificateAction, GiftCertificateActionType } from '../coupon/gift-certificate-actions';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping/consignment-actions';\n\nimport Cart from './cart';\nimport CartState, { CartErrorsState, CartStatusesState, DEFAULT_STATE } from './cart-state';\n\nexport default function cartReducer(\n    state: CartState = DEFAULT_STATE,\n    action: Action\n): CartState {\n    const reducer = combineReducers<CartState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Cart | undefined,\n    action: BillingAddressAction | CheckoutAction | ConsignmentAction | CouponAction | GiftCertificateAction\n): Cart | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return objectMerge(data, action.payload && action.payload.cart);\n\n    default:\n        return data;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CartStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction\n): CartStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n\nfunction errorsReducer(\n    errors: CartErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction\n): CartErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n","import { CheckoutButtonMethodType } from './strategies';\n\nexport default interface CheckoutButtonState {\n    data: {\n        [key in CheckoutButtonMethodType]?: CheckoutButtonDataState | undefined\n    };\n    errors: {\n        [key in CheckoutButtonMethodType]?: CheckoutButtonErrorsState | undefined\n    };\n    statuses: {\n        [key in CheckoutButtonMethodType]?: CheckoutButtonStatusesState | undefined\n    };\n}\n\nexport interface CheckoutButtonDataState {\n    initializedContainers: {\n        [key: string]: boolean;\n    };\n}\n\nexport interface CheckoutButtonErrorsState {\n    initializeError?: Error;\n    deinitializeError?: Error;\n}\n\nexport interface CheckoutButtonStatusesState {\n    isInitializing?: boolean;\n    isDeinitializing?: boolean;\n}\n\nexport const DEFAULT_STATE: CheckoutButtonState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport { CheckoutButtonAction, CheckoutButtonActionType } from './checkout-button-actions';\nimport CheckoutButtonState, { CheckoutButtonDataState, CheckoutButtonErrorsState, CheckoutButtonStatusesState, DEFAULT_STATE } from './checkout-button-state';\n\nconst DEFAULT_DATA_STATE: CheckoutButtonDataState = { initializedContainers: {} };\nconst DEFAULT_ERROR_STATE: CheckoutButtonErrorsState = {};\nconst DEFAULT_STATUS_STATE: CheckoutButtonStatusesState = {};\n\nexport default function checkoutButtonReducer(\n    state: CheckoutButtonState = DEFAULT_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<CheckoutButtonState>({\n        data: combineReducers({\n            [action.meta.methodId]: dataReducer,\n        }),\n        errors: combineReducers({\n            [action.meta.methodId]: errorsReducer,\n        }),\n        statuses: combineReducers({\n            [action.meta.methodId]: statusesReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutButtonDataState = DEFAULT_DATA_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonDataState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        if (!action.meta || !action.meta.containerId) {\n            return data;\n        }\n\n        return objectMerge(data, {\n            initializedContainers: {\n                [action.meta.containerId]: true,\n            },\n        });\n\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return objectSet(data, 'initializedContainers', {});\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: CheckoutButtonErrorsState = DEFAULT_ERROR_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonErrorsState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonRequested:\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        return objectSet(errors, 'initializeError', undefined);\n\n    case CheckoutButtonActionType.InitializeButtonFailed:\n        return objectSet(errors, 'initializeError', action.payload);\n\n    case CheckoutButtonActionType.DeinitializeButtonRequested:\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return objectSet(errors, 'deinitializeError', undefined);\n\n    case CheckoutButtonActionType.DeinitializeButtonFailed:\n        return objectSet(errors, 'deinitializeError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutButtonStatusesState = DEFAULT_STATUS_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonStatusesState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonRequested:\n        return objectSet(statuses, 'isInitializing', true);\n\n    case CheckoutButtonActionType.InitializeButtonFailed:\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        return objectSet(statuses, 'isInitializing', false);\n\n    case CheckoutButtonActionType.DeinitializeButtonRequested:\n        return objectSet(statuses, 'isDeinitializing', true);\n\n    case CheckoutButtonActionType.DeinitializeButtonFailed:\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return objectSet(statuses, 'isDeinitializing', false);\n\n    default:\n        return statuses;\n    }\n}\n","import Config from './config';\n\nexport default interface ConfigState {\n    data?: Config;\n    meta?: ConfigMetaState;\n    errors: ConfigErrorsState;\n    statuses: ConfigStatusesState;\n}\n\nexport interface ConfigMetaState {\n    externalSource?: string;\n}\n\nexport interface ConfigErrorsState {\n    loadError?: Error;\n}\n\nexport interface ConfigStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: ConfigState = {\n    meta: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport Config from './config';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\nimport ConfigState, { ConfigErrorsState, ConfigStatusesState, DEFAULT_STATE } from './config-state';\n\nexport default function configReducer(\n    state: ConfigState = DEFAULT_STATE,\n    action: Action\n): ConfigState {\n    const reducer = combineReducers<ConfigState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Config | undefined,\n    action: LoadConfigAction\n): Config | undefined {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return objectMerge(data, action.payload);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConfigErrorsState = DEFAULT_STATE.errors,\n    action: LoadConfigAction\n): ConfigErrorsState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case ConfigActionType.LoadConfigFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConfigStatusesState = DEFAULT_STATE.statuses,\n    action: LoadConfigAction\n): ConfigStatusesState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case ConfigActionType.LoadConfigSucceeded:\n    case ConfigActionType.LoadConfigFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nimport Coupon from './coupon';\n\nexport default interface CouponState {\n    data?: Coupon[];\n    errors: CouponErrorsState;\n    statuses: CouponStatusesState;\n}\n\nexport interface CouponErrorsState {\n    applyCouponError?: RequestError<StorefrontErrorResponseBody>;\n    removeCouponError?: RequestError<StorefrontErrorResponseBody>;\n}\n\nexport interface CouponStatusesState {\n    isApplyingCoupon?: boolean;\n    isRemovingCoupon?: boolean;\n}\n\nexport const DEFAULT_STATE: CouponState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\nimport { OrderAction, OrderActionType } from '../order';\n\nimport Coupon from './coupon';\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport CouponState, { CouponErrorsState, CouponStatusesState, DEFAULT_STATE } from './coupon-state';\n\nexport default function couponReducer(\n    state: CouponState = DEFAULT_STATE,\n    action: Action\n): CouponState {\n    const reducer = combineReducers<CouponState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Coupon[] | undefined,\n    action: CouponAction | CheckoutAction | OrderAction\n): Coupon[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return arrayReplace(data, action.payload && action.payload.coupons);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CouponErrorsState = {},\n    action: CouponAction\n): CouponErrorsState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n    case CouponActionType.ApplyCouponSucceeded:\n        return objectSet(errors, 'applyCouponError', undefined);\n\n    case CouponActionType.ApplyCouponFailed:\n        return objectSet(errors, 'applyCouponError', action.payload);\n\n    case CouponActionType.RemoveCouponRequested:\n    case CouponActionType.RemoveCouponSucceeded:\n        return objectSet(errors, 'removeCouponError', undefined);\n\n    case CouponActionType.RemoveCouponFailed:\n        return objectSet(errors, 'removeCouponError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CouponStatusesState = {},\n    action: CouponAction\n): CouponStatusesState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n        return objectSet(statuses, 'isApplyingCoupon', true);\n\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.ApplyCouponFailed:\n        return objectSet(statuses, 'isApplyingCoupon', false);\n\n    case CouponActionType.RemoveCouponRequested:\n        return objectSet(statuses, 'isRemovingCoupon', true);\n\n    case CouponActionType.RemoveCouponSucceeded:\n    case CouponActionType.RemoveCouponFailed:\n        return objectSet(statuses, 'isRemovingCoupon', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nimport GiftCertificate from './gift-certificate';\n\nexport default interface GiftCertificateState {\n    data?: GiftCertificate[];\n    errors: GiftCertificateErrorsState;\n    statuses: GiftCertificateStatusesState;\n}\n\nexport interface GiftCertificateErrorsState {\n    applyGiftCertificateError?: RequestError<StorefrontErrorResponseBody>;\n    removeGiftCertificateError?: RequestError<StorefrontErrorResponseBody>;\n}\n\nexport interface GiftCertificateStatusesState {\n    isApplyingGiftCertificate?: boolean;\n    isRemovingGiftCertificate?: boolean;\n}\n\nexport const DEFAULT_STATE: GiftCertificateState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping/consignment-actions';\n\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport GiftCertificate from './gift-certificate';\nimport { GiftCertificateAction, GiftCertificateActionType } from './gift-certificate-actions';\nimport GiftCertificateState, { DEFAULT_STATE, GiftCertificateErrorsState, GiftCertificateStatusesState } from './gift-certificate-state';\n\nexport default function giftCertificateReducer(\n    state: GiftCertificateState = DEFAULT_STATE,\n    action: Action\n): GiftCertificateState {\n    const reducer = combineReducers<GiftCertificateState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: GiftCertificate[] | undefined,\n    action: CheckoutAction | GiftCertificateAction | ConsignmentAction | CouponAction\n): GiftCertificate[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return arrayReplace(data, action.payload && action.payload.giftCertificates);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: GiftCertificateErrorsState = DEFAULT_STATE.errors,\n    action: GiftCertificateAction\n): GiftCertificateErrorsState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n        return objectSet(errors, 'applyGiftCertificateError', undefined);\n\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return objectSet(errors, 'applyGiftCertificateError', action.payload);\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return objectSet(errors, 'removeGiftCertificateError', undefined);\n\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return objectSet(errors, 'removeGiftCertificateError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: GiftCertificateStatusesState = DEFAULT_STATE.statuses,\n    action: GiftCertificateAction\n): GiftCertificateStatusesState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n        return objectSet(statuses, 'isApplyingGiftCertificate', true);\n\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return objectSet(statuses, 'isApplyingGiftCertificate', false);\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n        return objectSet(statuses, 'isRemovingGiftCertificate', true);\n\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return objectSet(statuses, 'isRemovingGiftCertificate', false);\n\n    default:\n        return statuses;\n    }\n}\n","import Customer from './customer';\n\nexport default interface CustomerState {\n    data?: Customer;\n}\n\nexport const DEFAULT_STATE: CustomerState = {};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { objectMerge } from '../common/utility';\n\nimport Customer from './customer';\nimport CustomerState, { DEFAULT_STATE } from './customer-state';\n\nexport default function customerReducer(\n    state: CustomerState = DEFAULT_STATE,\n    action: CheckoutAction\n): CustomerState {\n    const reducer = combineReducers<CustomerState, CheckoutAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Customer | undefined,\n    action: CheckoutAction\n): Customer | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectMerge(data, action.payload && action.payload.customer);\n\n    default:\n        return data;\n    }\n}\n","export default interface CustomerStrategyState {\n    data: CustomerStrategyDataState;\n    errors: CustomerStrategyErrorsState;\n    statuses: CustomerStrategyStatusesState;\n}\n\nexport interface CustomerStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean;\n    };\n}\n\nexport interface CustomerStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    signInError?: Error;\n    signInMethodId?: string;\n    signOutError?: Error;\n    signOutMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface CustomerStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isSigningIn?: boolean;\n    isSigningOut?: boolean;\n    signInMethodId?: string;\n    signOutMethodId?: string;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: CustomerStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge } from '../common/utility';\n\nimport { CustomerStrategyAction, CustomerStrategyActionType } from './customer-strategy-actions';\nimport CustomerStrategyState, { CustomerStrategyDataState, CustomerStrategyErrorsState, CustomerStrategyStatusesState, DEFAULT_STATE } from './customer-strategy-state';\n\nexport default function customerStrategyReducer(\n    state: CustomerStrategyState = DEFAULT_STATE,\n    action: Action\n): CustomerStrategyState {\n    const reducer = combineReducers<CustomerStrategyState, CustomerStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CustomerStrategyDataState = DEFAULT_STATE.data,\n    action: CustomerStrategyAction\n): CustomerStrategyDataState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        });\n\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        });\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: CustomerStrategyErrorsState = DEFAULT_STATE.errors,\n    action: CustomerStrategyAction\n): CustomerStrategyErrorsState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return objectMerge(errors, {\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.InitializeFailed:\n        return objectMerge(errors, {\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(errors, {\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n        return objectMerge(errors, {\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.SignInRequested:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return objectMerge(errors, {\n            signInError: undefined,\n            signInMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.SignInFailed:\n        return objectMerge(errors, {\n            signInError: action.payload,\n            signInMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.SignOutRequested:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return objectMerge(errors, {\n            signOutError: undefined,\n            signOutMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.SignOutFailed:\n        return objectMerge(errors, {\n            signOutError: action.payload,\n            signOutMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n        return objectMerge(errors, {\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n        return objectMerge(errors, {\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CustomerStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: CustomerStrategyAction\n): CustomerStrategyStatusesState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n        return objectMerge(statuses, {\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.InitializeFailed:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return objectMerge(statuses, {\n            isInitializing: false,\n            initializeMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n        return objectMerge(statuses, {\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(statuses, {\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.SignInRequested:\n        return objectMerge(statuses, {\n            isSigningIn: true,\n            signInMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.SignInFailed:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return objectMerge(statuses, {\n            isSigningIn: false,\n            signInMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.SignOutRequested:\n        return objectMerge(statuses, {\n            isSigningOut: true,\n            signOutMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.SignOutFailed:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return objectMerge(statuses, {\n            isSigningOut: false,\n            signOutMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n        return objectMerge(statuses, {\n            isWidgetInteracting: true,\n            widgetInteractionMethodId: action.meta.methodId,\n         });\n\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n        return objectMerge(statuses, {\n            isWidgetInteracting: false,\n            widgetInteractionMethodId: undefined,\n         });\n\n    default:\n        return statuses;\n    }\n}\n","import Country from './country';\n\nexport default interface CountryState {\n    data?: Country[];\n    errors: CountryErrorsState;\n    statuses: CountryStatusesState;\n}\n\nexport interface CountryErrorsState {\n    loadError?: Error;\n}\n\nexport interface CountryStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: CountryState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\n\nimport Country from './country';\nimport { CountryActionType, LoadCountriesAction } from './country-actions';\nimport CountryState, { CountryErrorsState, CountryStatusesState, DEFAULT_STATE } from './country-state';\n\nexport default function countryReducer(\n    state: CountryState = DEFAULT_STATE,\n    action: Action\n): CountryState {\n    const reducer = combineReducers<CountryState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Country[] | undefined,\n    action: LoadCountriesAction\n): Country[] | undefined {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesSucceeded:\n        return arrayReplace(data, action.payload);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CountryErrorsState = DEFAULT_STATE.errors,\n    action: LoadCountriesAction\n): CountryErrorsState {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesRequested:\n    case CountryActionType.LoadCountriesSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CountryActionType.LoadCountriesFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CountryStatusesState = DEFAULT_STATE.statuses,\n    action: LoadCountriesAction\n): CountryStatusesState {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case CountryActionType.LoadCountriesSucceeded:\n    case CountryActionType.LoadCountriesFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { Omit } from '../common/types';\n\nimport { InternalOrderMeta, InternalOrderPayment } from './internal-order';\nimport Order from './order';\n\nexport default interface OrderState {\n    data?: OrderDataState;\n    meta?: OrderMetaState;\n    errors: OrderErrorsState;\n    statuses: OrderStatusesState;\n}\n\nexport type OrderDataState = Omit<Order, 'billingAddress' | 'coupons'>;\n\nexport interface OrderMetaState extends InternalOrderMeta {\n    token?: string;\n    orderToken?: string;\n    callbackUrl?: string;\n    payment?: InternalOrderPayment;\n    spamProtectionToken?: string;\n}\n\nexport interface OrderErrorsState {\n    loadError?: Error;\n    submitError?: Error;\n    finalizeError?: Error;\n}\n\nexport interface OrderStatusesState {\n    isLoading?: boolean;\n    isSubmitting?: boolean;\n    isFinalizing?: boolean;\n}\n\nexport const DEFAULT_STATE: OrderState = {\n    errors: {},\n    meta: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport { OrderAction, OrderActionType } from './order-actions';\nimport OrderState, { DEFAULT_STATE, OrderDataState, OrderErrorsState, OrderMetaState, OrderStatusesState } from './order-state';\nimport { SpamProtectionAction, SpamProtectionActionType } from './spam-protection';\n\nexport default function orderReducer(\n    state: OrderState = DEFAULT_STATE,\n    action: Action\n): OrderState {\n    const reducer = combineReducers<OrderState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: OrderDataState | undefined,\n    action: OrderAction\n): OrderDataState | undefined {\n    switch (action.type) {\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n        return objectMerge(data, omit(action.payload, ['billingAddress', 'coupons'])) as OrderDataState;\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: OrderMetaState | undefined,\n    action: OrderAction | SpamProtectionAction\n): OrderMetaState | undefined {\n    switch (action.type) {\n    case OrderActionType.FinalizeOrderSucceeded:\n    case OrderActionType.SubmitOrderSucceeded:\n        return objectMerge(meta, {\n            ...action.meta,\n            callbackUrl: action.payload && action.payload.order.callbackUrl,\n            orderToken: action.payload && action.payload.order.token,\n            payment: action.payload && action.payload.order && action.payload.order.payment,\n        });\n\n    case SpamProtectionActionType.Completed:\n        return objectSet(meta, 'spamProtectionToken', action.payload);\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: OrderErrorsState = DEFAULT_STATE.errors,\n    action: OrderAction\n): OrderErrorsState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return objectSet(errors, 'loadError', undefined);\n\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: OrderStatusesState = DEFAULT_STATE.statuses,\n    action: OrderAction\n): OrderStatusesState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { PaymentAction, PaymentActionType } from './payment-actions';\nimport PaymentResponseBody from './payment-response-body';\nimport PaymentState from './payment-state';\n\nexport default function paymentReducer(state: PaymentState = {}, action: PaymentAction): PaymentState {\n    const reducer = combineReducers<PaymentState, PaymentAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: PaymentResponseBody | undefined, action: PaymentAction): PaymentResponseBody | undefined {\n    switch (action.type) {\n    case PaymentActionType.SubmitPaymentSucceeded:\n        return action.payload;\n\n    default:\n        return data;\n    }\n}\n","import PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\n\nexport default interface PaymentMethodState {\n    data?: PaymentMethod[];\n    meta?: PaymentMethodMeta;\n    errors: PaymentMethodErrorsState;\n    statuses: PaymentMethodStatusesState;\n}\n\nexport interface PaymentMethodErrorsState {\n    loadMethodId?: string;\n    loadError?: Error;\n    loadMethodError?: Error;\n}\n\nexport interface PaymentMethodStatusesState {\n    loadMethodId?: string;\n    isLoading?: boolean;\n    isLoadingMethod?: boolean;\n}\n\nexport const DEFAULT_STATE: PaymentMethodState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, mergeOrPush, objectMerge, objectSet } from '../common/utility';\n\nimport PaymentMethod from './payment-method';\nimport { PaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState, { DEFAULT_STATE, PaymentMethodErrorsState, PaymentMethodStatusesState } from './payment-method-state';\n\nexport default function paymentMethodReducer(\n    state: PaymentMethodState = DEFAULT_STATE,\n    action: Action\n): PaymentMethodState {\n    const reducer = combineReducers<PaymentMethodState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentMethod[] | undefined,\n    action: PaymentMethodAction\n): PaymentMethod[] | undefined {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        return mergeOrPush(data || [], action.payload, action.payload && {\n            id: action.payload.id,\n            gateway: action.payload.gateway,\n        });\n\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return arrayReplace(data, action.payload, {\n            matchObject: (methodA, methodB) => (\n                methodA.id === methodB.id && methodA.gateway === methodB.gateway\n            ),\n        });\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: PaymentMethodMeta | undefined,\n    action: PaymentMethodAction\n): PaymentMethodMeta | undefined {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return objectMerge(meta, action.meta);\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: PaymentMethodErrorsState = DEFAULT_STATE.errors,\n    action: PaymentMethodAction\n): PaymentMethodErrorsState {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsRequested:\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case PaymentMethodActionType.LoadPaymentMethodsFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case PaymentMethodActionType.LoadPaymentMethodRequested:\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        return objectMerge(errors, {\n            loadMethodId: undefined,\n            loadMethodError: undefined,\n        });\n\n    case PaymentMethodActionType.LoadPaymentMethodFailed:\n        return objectMerge(errors, {\n            loadMethodId: action.meta.methodId,\n            loadMethodError: action.payload,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentMethodStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentMethodAction\n): PaymentMethodStatusesState {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n    case PaymentMethodActionType.LoadPaymentMethodsFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    case PaymentMethodActionType.LoadPaymentMethodRequested:\n        return objectMerge(statuses, {\n            isLoadingMethod: true,\n            loadMethodId: action.meta.methodId,\n        });\n\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n    case PaymentMethodActionType.LoadPaymentMethodFailed:\n        return objectMerge(statuses, {\n            isLoadingMethod: false,\n            loadMethodId: undefined,\n        });\n\n    default:\n        return statuses;\n    }\n}\n","import { findIndex, pick, pickBy, ValueKeyIteratee } from 'lodash';\n\nimport isPlainObject from './is-plain-object';\nimport objectMerge from './object-merge';\n\n/**\n * Push an item to an array if it doesn't exist in the array. Otherwise, merge\n * with the existing item in the array. This function always returns a new array.\n */\nexport default function mergeOrPush<T>(\n    array: T[],\n    item?: T,\n    predicate?: ValueKeyIteratee<T>\n): T[] {\n    if (!item) {\n        return array;\n    }\n\n    const defaultPredicate = pick(item, 'id');\n    const index = findIndex(array, typeof predicate === 'object' ? pickBy(predicate) : (predicate || defaultPredicate));\n    const newArray = [...array];\n\n    if (index === -1) {\n        newArray.push(item);\n    } else {\n        const existingItem = array[index];\n\n        newArray[index] = isPlainObject(existingItem) && isPlainObject(item) ?\n            objectMerge(existingItem, item) :\n            item;\n    }\n\n    return newArray;\n}\n","export default interface PaymentStrategyState {\n    data: PaymentStrategyDataState;\n    errors: PaymentStrategyErrorsState;\n    statuses: PaymentStrategyStatusesState;\n}\n\nexport interface PaymentStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean;\n    };\n}\n\nexport interface PaymentStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    executeError?: Error;\n    executeMethodId?: string;\n    finalizeError?: Error;\n    finalizeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface PaymentStrategyStatusesState {\n    deinitializeMethodId?: string;\n    executeMethodId?: string;\n    finalizeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isExecuting?: boolean;\n    isFinalizing?: boolean;\n    isInitializing?: boolean;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: PaymentStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge } from '../common/utility';\n\nimport { PaymentStrategyAction, PaymentStrategyActionType } from './payment-strategy-actions';\nimport PaymentStrategyState, { DEFAULT_STATE, PaymentStrategyDataState, PaymentStrategyErrorsState, PaymentStrategyStatusesState } from './payment-strategy-state';\n\nexport default function paymentStrategyReducer(\n    state: PaymentStrategyState = DEFAULT_STATE,\n    action: Action\n): PaymentStrategyState {\n    const reducer = combineReducers<PaymentStrategyState, PaymentStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentStrategyDataState = DEFAULT_STATE.data,\n    action: PaymentStrategyAction\n): PaymentStrategyDataState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        });\n\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        });\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: PaymentStrategyErrorsState = DEFAULT_STATE.errors,\n    action: PaymentStrategyAction\n): PaymentStrategyErrorsState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return objectMerge(errors, {\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.InitializeFailed:\n        return objectMerge(errors, {\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(errors, {\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n        return objectMerge(errors, {\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.ExecuteRequested:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return objectMerge(errors, {\n            executeError: undefined,\n            executeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.ExecuteFailed:\n        return objectMerge(errors, {\n            executeError: action.payload,\n            executeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.FinalizeRequested:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return objectMerge(errors, {\n            finalizeError: undefined,\n            finalizeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.FinalizeFailed:\n        return objectMerge(errors, {\n            finalizeError: action.payload,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n        return objectMerge(errors, {\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n        return objectMerge(errors, {\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentStrategyAction\n): PaymentStrategyStatusesState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n        return objectMerge(statuses, {\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.InitializeFailed:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return objectMerge(statuses, {\n            isInitializing: false,\n            initializeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n        return objectMerge(statuses, {\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(statuses, {\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.ExecuteRequested:\n        return objectMerge(statuses, {\n            isExecuting: true,\n            executeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.ExecuteFailed:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return objectMerge(statuses, {\n            isExecuting: false,\n            executeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.FinalizeRequested:\n        return objectMerge(statuses, {\n            isFinalizing: true,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.FinalizeFailed:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return objectMerge(statuses, {\n            isFinalizing: false,\n            finalizeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n        return objectMerge(statuses, {\n            isWidgetInteracting: true,\n            widgetInteractionMethodId: action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n        return objectMerge(statuses, {\n            isWidgetInteracting: false,\n            widgetInteractionMethodId: undefined,\n        });\n\n    default:\n        return statuses;\n    }\n}\n","import Instrument, { VaultAccessToken } from './instrument';\n\nexport default interface InstrumentState {\n    data?: Instrument[];\n    meta?: InstrumentMeta;\n    errors: InstrumentErrorState;\n    statuses: InstrumentStatusState;\n}\n\nexport interface InstrumentErrorState {\n    deleteError?: Error;\n    failedInstrument?: string;\n    loadError?: Error;\n    vaultError?: Error;\n}\n\nexport interface InstrumentStatusState {\n    isDeleting?: boolean;\n    isLoading?: boolean;\n    isVaulting?: boolean;\n    deletingInstrument?: string;\n}\n\nexport type InstrumentMeta = VaultAccessToken;\n\nexport const DEFAULT_STATE = {\n    data: [],\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../../common/error';\nimport { arrayReplace, objectMerge, objectSet } from '../../common/utility';\n\nimport Instrument from './instrument';\nimport { InstrumentAction, InstrumentActionType } from './instrument-actions';\nimport InstrumentState, { DEFAULT_STATE, InstrumentErrorState, InstrumentMeta, InstrumentStatusState } from './instrument-state';\n\nexport default function instrumentReducer(\n    state: InstrumentState = DEFAULT_STATE,\n    action: Action\n): InstrumentState {\n    const reducer = combineReducers<InstrumentState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Instrument[] = DEFAULT_STATE.data,\n    action: InstrumentAction\n): Instrument[] {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n        return arrayReplace(data, action.payload && action.payload.vaultedInstruments || []);\n\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return arrayReplace(data, data.filter(instrument =>\n            instrument.bigpayToken !== (action.meta && action.meta.instrumentId)\n        ));\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: InstrumentMeta | undefined,\n    action: InstrumentAction\n): InstrumentMeta | undefined {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return objectMerge(meta, action.meta);\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: InstrumentErrorState = DEFAULT_STATE.errors,\n    action: InstrumentAction\n): InstrumentErrorState {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsRequested:\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case InstrumentActionType.DeleteInstrumentRequested:\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return objectMerge(errors, {\n            deleteError: undefined,\n            failedInstrument: undefined,\n        });\n\n    case InstrumentActionType.LoadInstrumentsFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case InstrumentActionType.DeleteInstrumentFailed:\n        return objectMerge(errors, {\n            deleteError: action.payload,\n            failedInstrument: action.meta.instrumentId,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: InstrumentStatusState = DEFAULT_STATE.statuses,\n    action: InstrumentAction\n): InstrumentStatusState {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case InstrumentActionType.DeleteInstrumentRequested:\n        return objectMerge(statuses, {\n            isDeleting: true,\n            deletingInstrument: action.meta.instrumentId,\n        });\n\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n    case InstrumentActionType.LoadInstrumentsFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n    case InstrumentActionType.DeleteInstrumentFailed:\n        return objectMerge(statuses, {\n            isDeleting: false,\n            deletingInstrument: undefined,\n        });\n\n    default:\n        return statuses;\n    }\n}\n","import { AmazonPayRemoteCheckout } from './methods';\n\nexport default interface RemoteCheckoutState {\n    data: RemoteCheckoutStateData;\n}\n\nexport interface RemoteCheckoutStateData {\n    amazon?: AmazonPayRemoteCheckout;\n}\n\nexport const DEFAULT_STATE: RemoteCheckoutState = {\n    data: {},\n};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport RemoteCheckout from './remote-checkout';\nimport { RemoteCheckoutAction, RemoteCheckoutActionType } from './remote-checkout-actions';\nimport RemoteCheckoutState, { DEFAULT_STATE, RemoteCheckoutStateData } from './remote-checkout-state';\n\nexport default function remoteCheckoutReducer(\n    state: RemoteCheckoutState = DEFAULT_STATE,\n    action: RemoteCheckoutAction\n): RemoteCheckoutState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<RemoteCheckoutState>({\n        data: combineReducers<RemoteCheckoutStateData>({\n            [action.meta.methodId]: dataReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: RemoteCheckout,\n    action: RemoteCheckoutAction\n): RemoteCheckout {\n    switch (action.type) {\n    case RemoteCheckoutActionType.InitializeRemoteBillingSucceeded:\n        return objectSet(data, 'billing' as any, action.payload && action.payload.billing);\n\n    case RemoteCheckoutActionType.InitializeRemoteShippingSucceeded:\n        return objectSet(data, 'shipping' as any, action.payload && action.payload.shipping);\n\n    case RemoteCheckoutActionType.LoadRemoteSettingsSucceeded:\n        return objectSet(data, 'settings', action.payload);\n\n    case RemoteCheckoutActionType.UpdateRemoteCheckout:\n        return objectMerge(data, action.payload);\n\n    default:\n        return data;\n    }\n}\n","import Consignment from './consignment';\n\nexport default interface ConsignmentState {\n    data?: Consignment[];\n    errors: ConsignmentErrorsState;\n    statuses: ConsignmentStatusesState;\n}\n\nexport interface ConsignmentErrorsState {\n    loadError?: Error;\n    loadShippingOptionsError?: Error;\n    createError?: Error;\n    updateError: { [key: string]: Error | undefined };\n    deleteError: { [key: string]: Error | undefined };\n    updateShippingOptionError: { [key: string]: Error | undefined };\n}\n\nexport interface ConsignmentStatusesState {\n    isLoading?: boolean;\n    isLoadingShippingOptions?: boolean;\n    isCreating?: boolean;\n    isUpdating: { [key: string]: boolean };\n    isDeleting: { [key: string]: boolean };\n    isUpdatingShippingOption: { [key: string]: boolean };\n}\n\nexport const DEFAULT_STATE: ConsignmentState = {\n    errors: {\n        updateShippingOptionError: {},\n        updateError: {},\n        deleteError: {},\n    },\n    statuses: {\n        isUpdating: {},\n        isUpdatingShippingOption: {},\n        isDeleting: {},\n    },\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectMerge, objectSet } from '../common/utility';\nimport { CouponAction, CouponActionType } from '../coupon';\nimport { CustomerAction, CustomerActionType } from '../customer';\n\nimport Consignment from './consignment';\nimport { ConsignmentAction, ConsignmentActionType } from './consignment-actions';\nimport ConsignmentState, { ConsignmentErrorsState, ConsignmentStatusesState, DEFAULT_STATE } from './consignment-state';\n\nexport default function consignmentReducer(\n    state: ConsignmentState = DEFAULT_STATE,\n    action: Action\n): ConsignmentState {\n    const reducer = combineReducers<ConsignmentState, ConsignmentAction | CheckoutAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Consignment[] | undefined,\n    action: ConsignmentAction | CheckoutAction | CouponAction | CustomerAction\n): Consignment[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n        return arrayReplace(data, action.payload && action.payload.consignments);\n\n    case CustomerActionType.SignOutCustomerSucceeded:\n        return arrayReplace(data, []);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConsignmentErrorsState = DEFAULT_STATE.errors,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n        return objectSet(errors, 'createError', undefined);\n\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return objectSet(errors, 'createError', action.payload);\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            return objectMerge(errors, {\n                updateError: {\n                    [action.meta.id]: undefined,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            return objectMerge(errors, {\n                updateError: {\n                    [action.meta.id]: action.payload,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentRequested:\n        if (action.meta) {\n            return objectMerge(errors, {\n                deleteError: {\n                    [action.meta.id]: undefined,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.DeleteConsignmentFailed:\n        if (action.meta) {\n            return objectMerge(errors, {\n                deleteError: {\n                    [action.meta.id]: action.payload,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        if (action.meta) {\n            return objectMerge(errors, {\n                updateShippingOptionError: {\n                    [action.meta.id]: undefined,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            return objectMerge(errors, {\n                updateShippingOptionError: {\n                    [action.meta.id]: action.payload,\n                },\n            });\n        }\n\n        return errors;\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConsignmentStatusesState = DEFAULT_STATE.statuses,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return objectSet(statuses, 'isLoadingShippingOptions', true);\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return objectSet(statuses, 'isLoadingShippingOptions', false);\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n        return objectSet(statuses, 'isCreating', true);\n\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return objectSet(statuses, 'isCreating', false);\n\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isUpdating: {\n                    [action.meta.id]: true,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isUpdating: {\n                    [action.meta.id]: false,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.DeleteConsignmentRequested:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isDeleting: {\n                    [action.meta.id]: true,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentFailed:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isDeleting: {\n                    [action.meta.id]: false,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isUpdatingShippingOption: {\n                    [action.meta.id]: true,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isUpdatingShippingOption: {\n                    [action.meta.id]: false,\n                },\n            });\n        }\n\n        return statuses;\n\n    default:\n        return statuses;\n    }\n}\n","import { Country } from '../geography';\n\nexport default interface ShippingCountryState {\n    data?: Country[];\n    errors: ShippingCountryErrorsState;\n    statuses: ShippingCountryStatusesState;\n}\n\nexport interface ShippingCountryErrorsState {\n    loadError?: Error;\n}\n\nexport interface ShippingCountryStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: ShippingCountryState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\nimport { Country } from '../geography';\n\nimport { LoadShippingCountriesAction, ShippingCountryActionType } from './shipping-country-actions';\nimport ShippingCountryState, { DEFAULT_STATE, ShippingCountryErrorsState, ShippingCountryStatusesState } from './shipping-country-state';\n\nexport default function shippingCountryReducer(\n    state: ShippingCountryState = DEFAULT_STATE,\n    action: Action\n): ShippingCountryState {\n    const reducer = combineReducers<ShippingCountryState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Country[] | undefined,\n    action: LoadShippingCountriesAction\n): Country[] | undefined {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n        return arrayReplace(data, action.payload);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ShippingCountryErrorsState = DEFAULT_STATE.errors,\n    action: LoadShippingCountriesAction\n): ShippingCountryErrorsState {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesRequested:\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case ShippingCountryActionType.LoadShippingCountriesFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingCountryStatusesState = DEFAULT_STATE.statuses,\n    action: LoadShippingCountriesAction\n): ShippingCountryStatusesState {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n    case ShippingCountryActionType.LoadShippingCountriesFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n","export default interface ShippingStrategyState {\n    data: ShippingStrategyDataState;\n    errors: ShippingStrategyErrorsState;\n    statuses: ShippingStrategyStatusesState;\n}\n\nexport interface ShippingStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean;\n    };\n}\n\nexport interface ShippingStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    updateAddressError?: Error;\n    updateAddressMethodId?: string;\n    selectOptionError?: Error;\n    selectOptionMethodId?: string;\n}\n\nexport interface ShippingStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isUpdatingAddress?: boolean;\n    isSelectingOption?: boolean;\n    updateAddressMethodId?: string;\n    selectOptionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: ShippingStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge } from '../common/utility';\n\nimport { ShippingStrategyAction, ShippingStrategyActionType } from './shipping-strategy-actions';\nimport ShippingStrategyState, { DEFAULT_STATE, ShippingStrategyDataState, ShippingStrategyErrorsState, ShippingStrategyStatusesState } from './shipping-strategy-state';\n\nexport default function shippingStrategyReducer(\n    state: ShippingStrategyState = DEFAULT_STATE,\n    action: Action\n): ShippingStrategyState {\n    const reducer = combineReducers<ShippingStrategyState, ShippingStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: ShippingStrategyDataState = DEFAULT_STATE.data,\n    action: ShippingStrategyAction\n): ShippingStrategyDataState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        });\n\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        });\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: ShippingStrategyErrorsState = DEFAULT_STATE.errors,\n    action: ShippingStrategyAction\n): ShippingStrategyErrorsState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return objectMerge(errors, {\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.InitializeFailed:\n        return objectMerge(errors, {\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(errors, {\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n        return objectMerge(errors, {\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return objectMerge(errors, {\n            updateAddressError: undefined,\n            updateAddressMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n        return objectMerge(errors, {\n            updateAddressError: action.payload,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return objectMerge(errors, {\n            selectOptionError: undefined,\n            selectOptionMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n        return objectMerge(errors, {\n            selectOptionError: action.payload,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: ShippingStrategyAction\n): ShippingStrategyStatusesState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n        return objectMerge(statuses, {\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.InitializeFailed:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return objectMerge(statuses, {\n            isInitializing: false,\n            initializeMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n        return objectMerge(statuses, {\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(statuses, {\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n        return objectMerge(statuses, {\n            isUpdatingAddress: true,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return objectMerge(statuses, {\n            isUpdatingAddress: false,\n            updateAddressMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n        return objectMerge(statuses, {\n            isSelectingOption: true,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return objectMerge(statuses, {\n            isSelectingOption: false,\n            selectOptionMethodId: undefined,\n        });\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectSet } from '../common/utility';\n\nimport { StoreCreditAction, StoreCreditActionType } from './store-credit-actions';\nimport StoreCreditState, { StoreCreditErrorsState, StoreCreditStatusesState } from './store-credit-state';\n\nconst DEFAULT_STATE: StoreCreditState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function storeCreditReducer(\n    state: StoreCreditState = DEFAULT_STATE,\n    action: Action\n): StoreCreditState {\n    const reducer = combineReducers<StoreCreditState>({\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction errorsReducer(\n    errors: StoreCreditErrorsState = DEFAULT_STATE.errors,\n    action: StoreCreditAction\n): StoreCreditErrorsState {\n    switch (action.type) {\n    case StoreCreditActionType.ApplyStoreCreditRequested:\n    case StoreCreditActionType.ApplyStoreCreditSucceeded:\n        return objectSet(errors, 'applyError', undefined);\n\n    case StoreCreditActionType.ApplyStoreCreditFailed:\n        return objectSet(errors, 'applyError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: StoreCreditStatusesState = DEFAULT_STATE.statuses,\n    action: StoreCreditAction\n): StoreCreditStatusesState {\n    switch (action.type) {\n    case StoreCreditActionType.ApplyStoreCreditRequested:\n        return objectSet(statuses, 'isApplying', true);\n\n    case StoreCreditActionType.ApplyStoreCreditSucceeded:\n    case StoreCreditActionType.ApplyStoreCreditFailed:\n        return objectSet(statuses, 'isApplying', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { Omit } from '../common/types';\n\nimport Checkout from './checkout';\n\nexport default interface CheckoutState {\n    data?: CheckoutDataState;\n    errors: CheckoutErrorsState;\n    statuses: CheckoutStatusesState;\n}\n\nexport type CheckoutDataState = Omit<Checkout, 'billingAddress' | 'cart' | 'consignments' | 'coupons' | 'giftCertificates'>;\n\nexport interface CheckoutErrorsState {\n    loadError?: Error;\n    updateError?: Error;\n}\n\nexport interface CheckoutStatusesState {\n    isLoading?: boolean;\n    isUpdating?: boolean;\n}\n\nexport const DEFAULT_STATE: CheckoutState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing';\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\nimport { CouponAction, CouponActionType, GiftCertificateAction, GiftCertificateActionType } from '../coupon';\nimport { OrderAction, OrderActionType } from '../order';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\nimport { StoreCreditAction, StoreCreditActionType } from '../store-credit/store-credit-actions';\n\nimport { CheckoutAction, CheckoutActionType } from './checkout-actions';\nimport CheckoutState, { CheckoutDataState, CheckoutErrorsState, CheckoutStatusesState, DEFAULT_STATE } from './checkout-state';\n\nexport default function checkoutReducer(\n    state: CheckoutState = DEFAULT_STATE,\n    action: Action\n): CheckoutState {\n    const reducer = combineReducers<CheckoutState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutDataState | undefined,\n    action: CheckoutAction | BillingAddressAction | ConsignmentAction | CouponAction |\n        GiftCertificateAction | OrderAction | StoreCreditAction\n): CheckoutDataState | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n    case StoreCreditActionType.ApplyStoreCreditSucceeded:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return objectMerge(data, omit(action.payload, [\n            'billingAddress',\n            'cart',\n            'consignments',\n            'customer',\n            'coupons',\n            'giftCertificates',\n        ])) as CheckoutDataState;\n\n    case OrderActionType.SubmitOrderSucceeded:\n        return objectSet(data, 'orderId', action.payload && action.payload.order.orderId) ;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CheckoutErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | OrderAction\n): CheckoutErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return objectSet(errors, 'updateError', undefined);\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n        return objectSet(errors, 'updateError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | OrderAction\n): CheckoutStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(statuses, 'isLoading', false);\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n        return objectSet(statuses, 'isUpdating', true);\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return objectSet(statuses, 'isUpdating', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { deepFreeze } from '@bigcommerce/data-store';\n\n// tslint:disable-next-line:ban-types\ntype FunctionProperties<T> = { [K in keyof T]: T[K] extends Function ? T[K] : never };\n\nexport default function createFreezeProxy<T extends object>(target: T): T {\n    return createProxy(target, (target, name) =>\n        (...args: any[]) => deepFreeze(target[name].call(target, ...args))\n    );\n}\n\nexport function createFreezeProxies<T extends object, TMap extends { [key: string]: T }>(map: TMap): TMap {\n    return Object.keys(map)\n        .reduce((result, key) => {\n            result[key] = createFreezeProxy(map[key]);\n\n            return result;\n        }, {} as { [key: string]: T }) as TMap;\n}\n\nfunction createProxy<T extends object>(target: T, trap: (target: FunctionProperties<T>, name: keyof FunctionProperties<T>, proxy: T) => any): T {\n    const proxy = Object.create(target);\n\n    traversePrototypeOf(target, prototype => {\n        Object.getOwnPropertyNames(prototype)\n            .forEach(name => {\n                if (name === 'constructor' || typeof proxy[name] !== 'function' || name.charAt(0) === '_') {\n                    return;\n                }\n\n                proxy[name] = trap(target as FunctionProperties<T>, name as keyof T, proxy);\n            });\n    });\n\n    return proxy;\n}\n\nfunction traversePrototypeOf(target: object, iteratee: (prototype: object) => void): void {\n    let prototype = Object.getPrototypeOf(target);\n\n    while (prototype) {\n        iteratee(prototype);\n\n        prototype = Object.getPrototypeOf(prototype);\n    }\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { createSelector } from '../common/selector';\nimport { ConfigState } from '../config';\nimport { DEFAULT_STATE } from '../config/config-state';\nimport { Country } from '../geography';\n\nimport FormField from './form-field';\n\nexport default interface FormSelector {\n    getShippingAddressFields(countries: Country[] | undefined, countryCode: string): FormField[];\n    getBillingAddressFields(countries: Country[] | undefined, countryCode: string): FormField[];\n}\n\nexport type FormSelectorFactory = (state: ConfigState) => FormSelector;\n\nexport function createFormSelectorFactory(): FormSelectorFactory {\n    const getShippingAddressFields = createSelector(\n        (state: ConfigState) => state.data,\n        config => (countries: Country[] = [], countryCode: string) => {\n            const selectedCountry = find(countries, { code: countryCode });\n            const fields = config ? config.storeConfig.formFields.shippingAddressFields : [];\n\n            return fields.map((field: any) => processField(field, countries, selectedCountry));\n        }\n    );\n\n    const getBillingAddressFields = createSelector(\n        (state: ConfigState) => state.data,\n        config => (countries: Country[] = [], countryCode: string) => {\n            const selectedCountry = find(countries, { code: countryCode });\n            const fields = config ? config.storeConfig.formFields.billingAddressFields : [];\n\n            return fields.map((field: any) => processField(field, countries, selectedCountry));\n        }\n    );\n\n    function processField(field: FormField, countries: Country[], selectedCountry?: Country): FormField {\n        if (field.name === 'countryCode') {\n            return processCountry(field, countries, selectedCountry);\n        }\n\n        if (field.name === 'stateOrProvince') {\n            return processProvince(field, selectedCountry);\n        }\n\n        if (field.name === 'postalCode') {\n            return processsPostCode(field, selectedCountry);\n        }\n\n        return field;\n    }\n\n    function processCountry(field: FormField, countries: Country[] = [], country?: Country): FormField {\n        if (!countries.length) {\n            return field;\n        }\n\n        const { code = '' } = country || {};\n        const items = countries.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            options: { items },\n            default: code,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    function processProvince(field: FormField, country?: Country): FormField {\n        const { subdivisions = [] } = country || {};\n\n        if (!subdivisions.length) {\n            return {\n                ...field,\n                required: false,\n            };\n        }\n\n        const items = subdivisions.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            name: 'stateOrProvinceCode',\n            options: { items },\n            required: true,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    function processsPostCode(field: FormField, country?: Country): FormField {\n        const { hasPostalCodes = [] } = country || {};\n\n        if (hasPostalCodes === undefined) {\n            return field;\n        }\n\n        return { ...field, required: Boolean(hasPostalCodes) };\n    }\n\n    return memoizeOne((\n        state: ConfigState = DEFAULT_STATE\n    ): FormSelector => {\n        return {\n            getShippingAddressFields: getShippingAddressFields(state),\n            getBillingAddressFields: getBillingAddressFields(state),\n        };\n    });\n}\n","import { identity, isEqual, pickBy } from 'lodash';\n\nimport Address from './address';\n\nexport default function isAddressEqual(addressA: Partial<Address>, addressB: Partial<Address>): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<Address>): Partial<Address> {\n    return pickBy({\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        address1: address.address1,\n        address2: address.address2,\n        city: address.city,\n        stateOrProvince: address.stateOrProvince,\n        countryCode: address.countryCode,\n        postalCode: address.postalCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    }, identity);\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { isAddressEqual, AddressRequestBody } from '../address';\nimport { CartSelector, PhysicalItem } from '../cart';\nimport { createSelector } from '../common/selector';\n\nimport Consignment from './consignment';\nimport ConsignmentState, { DEFAULT_STATE } from './consignment-state';\nimport ShippingOption from './shipping-option';\n\nexport default interface ConsignmentSelector {\n    getConsignments(): Consignment[] | undefined;\n    getConsignmentById(id: string): Consignment | undefined;\n    getConsignmentByAddress(address: AddressRequestBody): Consignment | undefined;\n    getShippingOption(): ShippingOption | undefined;\n    getLoadError(): Error | undefined;\n    getCreateError(): Error | undefined;\n    getLoadShippingOptionsError(): Error | undefined;\n    getUnassignedItems(): PhysicalItem[];\n    getUpdateError(consignmentId?: string): Error | undefined;\n    getDeleteError(consignmentId?: string): Error | undefined;\n    getItemAssignmentError(address: AddressRequestBody): Error | undefined;\n    getUpdateShippingOptionError(consignmentId?: string): Error | undefined;\n    isLoading(): boolean;\n    isLoadingShippingOptions(): boolean;\n    isCreating(): boolean;\n    isUpdating(consignmentId?: string): boolean;\n    isDeleting(consignmentId?: string): boolean;\n    isAssigningItems(address: AddressRequestBody): boolean;\n    isUpdatingShippingOption(consignmentId?: string): boolean;\n}\n\nexport type ConsignmentSelectorFactory = (\n    state: ConsignmentState,\n    cart: CartSelector\n) => ConsignmentSelector;\n\ninterface ConsignmentSelectorDependencies {\n    cart: CartSelector;\n}\n\nexport function createConsignmentSelectorFactory(): ConsignmentSelectorFactory {\n    const getConsignments = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => () => consignments\n    );\n\n    const getConsignmentById = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => (id: string) => {\n            if (!consignments || !consignments.length) {\n                return;\n            }\n\n            return find(consignments, { id });\n        }\n    );\n\n    const getConsignmentByAddress = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => (address: AddressRequestBody) => {\n            if (!consignments || !consignments.length) {\n                return;\n            }\n\n            return find(consignments, consignment =>\n                isAddressEqual(consignment.shippingAddress, address)\n            );\n        }\n    );\n\n    const getShippingOption = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => () => {\n            if (consignments && consignments.length) {\n                return consignments[0].selectedShippingOption;\n            }\n        }\n    );\n\n    const getLoadError = createSelector(\n        (state: ConsignmentState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const getCreateError = createSelector(\n        (state: ConsignmentState) => state.errors.createError,\n        error => () => error\n    );\n\n    const getLoadShippingOptionsError = createSelector(\n        (state: ConsignmentState) => state.errors.loadShippingOptionsError,\n        error => () => error\n    );\n\n    const getUnassignedItems = createSelector(\n        getConsignments,\n        (_: ConsignmentState, { cart }: ConsignmentSelectorDependencies) => cart.getCart,\n        (getConsignments, getCart) => () => {\n            const cart = getCart();\n\n            if (!cart) {\n                return [];\n            }\n\n            const assignedLineItemIds = (getConsignments() || []).reduce(\n                (itemIds, consignment) => itemIds.concat(consignment.lineItemIds),\n                [] as string[]\n            );\n\n            return (cart.lineItems.physicalItems || []).filter(\n                item => assignedLineItemIds.indexOf(item.id as string) < 0\n            );\n        }\n    );\n\n    const getUpdateError = createSelector(\n        (state: ConsignmentState) => state.errors.updateError,\n        updateError => (consignmentId?: string) => {\n            if (consignmentId) {\n                return updateError[consignmentId];\n            }\n\n            return find(updateError);\n        }\n    );\n\n    const getDeleteError = createSelector(\n        (state: ConsignmentState) => state.errors.deleteError,\n        deleteError => (consignmentId?: string) => {\n            if (consignmentId) {\n                return deleteError[consignmentId];\n            }\n\n            return find(deleteError);\n        }\n    );\n\n    const getItemAssignmentError = createSelector(\n        getConsignmentByAddress,\n        getUpdateError,\n        getCreateError,\n        (getConsignmentByAddress, getUpdateError, getCreateError) => (address: AddressRequestBody) => {\n            const consignment = getConsignmentByAddress(address);\n\n            return consignment ? getUpdateError(consignment.id) : getCreateError();\n        }\n    );\n\n    const getUpdateShippingOptionError = createSelector(\n        (state: ConsignmentState) => state.errors.updateShippingOptionError,\n        updateShippingOptionError => (consignmentId?: string) => {\n            if (consignmentId) {\n                return updateShippingOptionError[consignmentId];\n            }\n\n            return find(updateShippingOptionError);\n        }\n    );\n\n    const isLoading = createSelector(\n        (state: ConsignmentState) => state.statuses.isLoading,\n        isLoading => () => isLoading === true\n    );\n\n    const isLoadingShippingOptions = createSelector(\n        (state: ConsignmentState) => state.statuses.isLoadingShippingOptions,\n        isLoadingShippingOptions => () => isLoadingShippingOptions === true\n    );\n\n    const isCreating = createSelector(\n        (state: ConsignmentState) => state.statuses.isCreating,\n        isCreating => () => isCreating === true\n    );\n\n    const isUpdating = createSelector(\n        (state: ConsignmentState) => state.statuses.isUpdating,\n        isUpdating => (consignmentId?: string) => {\n            if (consignmentId) {\n                return isUpdating[consignmentId] === true;\n            }\n\n            return find(isUpdating) === true;\n        }\n    );\n\n    const isDeleting = createSelector(\n        (state: ConsignmentState) => state.statuses.isDeleting,\n        isDeleting => (consignmentId?: string) => {\n            if (consignmentId) {\n                return isDeleting[consignmentId] === true;\n            }\n\n            return find(isDeleting) === true;\n        }\n    );\n\n    const isAssigningItems = createSelector(\n        getConsignmentByAddress,\n        isUpdating,\n        isCreating,\n        (getConsignmentByAddress, isUpdating, isCreating) => (address: AddressRequestBody) => {\n            const consignment = getConsignmentByAddress(address);\n\n            return consignment ? isUpdating(consignment.id) : isCreating();\n        }\n    );\n\n    const isUpdatingShippingOption = createSelector(\n        (state: ConsignmentState) => state.statuses.isUpdatingShippingOption,\n        isUpdatingShippingOption => (consignmentId?: string) => {\n            if (consignmentId) {\n                return isUpdatingShippingOption[consignmentId] === true;\n            }\n\n            return find(isUpdatingShippingOption) === true;\n        }\n    );\n\n    return memoizeOne((\n        state: ConsignmentState = DEFAULT_STATE,\n        cart: CartSelector\n    ): ConsignmentSelector => {\n        return {\n            getConsignments: getConsignments(state),\n            getConsignmentById: getConsignmentById(state),\n            getConsignmentByAddress: getConsignmentByAddress(state),\n            getShippingOption: getShippingOption(state),\n            getLoadError: getLoadError(state),\n            getCreateError: getCreateError(state),\n            getLoadShippingOptionsError: getLoadShippingOptionsError(state),\n            getUnassignedItems: getUnassignedItems(state, { cart }),\n            getUpdateError: getUpdateError(state),\n            getDeleteError: getDeleteError(state),\n            getItemAssignmentError: getItemAssignmentError(state),\n            getUpdateShippingOptionError: getUpdateShippingOptionError(state),\n            isLoading: isLoading(state),\n            isLoadingShippingOptions: isLoadingShippingOptions(state),\n            isCreating: isCreating(state),\n            isUpdating: isUpdating(state),\n            isDeleting: isDeleting(state),\n            isAssigningItems: isAssigningItems(state),\n            isUpdatingShippingOption: isUpdatingShippingOption(state),\n        };\n    });\n}\n","import { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport default interface StoreCreditState {\n    errors: StoreCreditErrorsState;\n    statuses: StoreCreditStatusesState;\n}\n\nexport interface StoreCreditErrorsState {\n    applyError?: RequestError<StorefrontErrorResponseBody>;\n}\n\nexport interface StoreCreditStatusesState {\n    isApplying?: boolean;\n}\n\nexport const DEFAULT_STATE: StoreCreditState = {\n    errors: {},\n    statuses: {},\n};\n","import { createBillingAddressSelectorFactory } from '../billing';\nimport { createCartSelectorFactory } from '../cart/cart-selector';\nimport { createCheckoutButtonSelectorFactory } from '../checkout-buttons';\nimport { createFreezeProxies } from '../common/utility';\nimport { createConfigSelectorFactory } from '../config';\nimport { createCouponSelectorFactory, createGiftCertificateSelectorFactory } from '../coupon';\nimport { createCustomerSelectorFactory, createCustomerStrategySelectorFactory } from '../customer';\nimport { createFormSelectorFactory } from '../form';\nimport { createCountrySelectorFactory } from '../geography';\nimport { createOrderSelectorFactory } from '../order';\nimport { createPaymentMethodSelectorFactory, createPaymentSelectorFactory, createPaymentStrategySelectorFactory } from '../payment';\nimport { createInstrumentSelectorFactory } from '../payment/instrument';\nimport { createRemoteCheckoutSelectorFactory } from '../remote-checkout';\nimport { createConsignmentSelectorFactory, createShippingAddressSelectorFactory, createShippingCountrySelectorFactory, createShippingStrategySelectorFactory } from '../shipping';\nimport { createStoreCreditSelectorFactory } from '../store-credit/store-credit-selector';\n\nimport { createCheckoutSelectorFactory } from './checkout-selector';\nimport { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport type InternalCheckoutSelectorsFactory = (\n    state: CheckoutStoreState,\n    options?: CheckoutStoreOptions\n) => InternalCheckoutSelectors;\n\nexport function createInternalCheckoutSelectorsFactory(): InternalCheckoutSelectorsFactory {\n    const createBillingAddressSelector = createBillingAddressSelectorFactory();\n    const createCartSelector = createCartSelectorFactory();\n    const createCheckoutButtonSelector = createCheckoutButtonSelectorFactory();\n    const createConfigSelector = createConfigSelectorFactory();\n    const createCountrySelector = createCountrySelectorFactory();\n    const createCouponSelector = createCouponSelectorFactory();\n    const createCustomerSelector = createCustomerSelectorFactory();\n    const createCustomerStrategySelector = createCustomerStrategySelectorFactory();\n    const createGiftCertificateSelector = createGiftCertificateSelectorFactory();\n    const createInstrumentSelector = createInstrumentSelectorFactory();\n    const createFormSelector = createFormSelectorFactory();\n    const createPaymentMethodSelector = createPaymentMethodSelectorFactory();\n    const createPaymentStrategySelector = createPaymentStrategySelectorFactory();\n    const createRemoteCheckoutSelector = createRemoteCheckoutSelectorFactory();\n    const createShippingAddressSelector = createShippingAddressSelectorFactory();\n    const createShippingCountrySelector = createShippingCountrySelectorFactory();\n    const createShippingStrategySelector = createShippingStrategySelectorFactory();\n    const createConsignmentSelector = createConsignmentSelectorFactory();\n    const createCheckoutSelector = createCheckoutSelectorFactory();\n    const createOrderSelector = createOrderSelectorFactory();\n    const createPaymentSelector = createPaymentSelectorFactory();\n    const createStoreCreditSelector = createStoreCreditSelectorFactory();\n\n    return (state, options = {}) => {\n        const billingAddress = createBillingAddressSelector(state.billingAddress);\n        const cart = createCartSelector(state.cart);\n        const checkoutButton = createCheckoutButtonSelector(state.checkoutButton);\n        const config = createConfigSelector(state.config);\n        const countries = createCountrySelector(state.countries);\n        const coupons = createCouponSelector(state.coupons);\n        const customer = createCustomerSelector(state.customer);\n        const customerStrategies = createCustomerStrategySelector(state.customerStrategies);\n        const form = createFormSelector(state.config);\n        const giftCertificates = createGiftCertificateSelector(state.giftCertificates);\n        const instruments = createInstrumentSelector(state.instruments);\n        const paymentMethods = createPaymentMethodSelector(state.paymentMethods);\n        const paymentStrategies = createPaymentStrategySelector(state.paymentStrategies);\n        const remoteCheckout = createRemoteCheckoutSelector(state.remoteCheckout);\n        const shippingAddress = createShippingAddressSelector(state.consignments);\n        const shippingCountries = createShippingCountrySelector(state.shippingCountries);\n        const shippingStrategies = createShippingStrategySelector(state.shippingStrategies);\n        const storeCredit = createStoreCreditSelector(state.storeCredit);\n\n        // Compose selectors\n        const consignments = createConsignmentSelector(state.consignments, cart);\n        const checkout = createCheckoutSelector(state.checkout, billingAddress, cart, consignments, coupons, customer, giftCertificates);\n        const order = createOrderSelector(state.order, billingAddress, coupons);\n        const payment = createPaymentSelector(checkout, order);\n\n        const selectors = {\n            billingAddress,\n            cart,\n            checkout,\n            checkoutButton,\n            config,\n            consignments,\n            countries,\n            coupons,\n            customer,\n            customerStrategies,\n            form,\n            giftCertificates,\n            instruments,\n            order,\n            payment,\n            paymentMethods,\n            paymentStrategies,\n            remoteCheckout,\n            shippingAddress,\n            shippingCountries,\n            shippingStrategies,\n            storeCredit,\n        };\n\n        return options.shouldWarnMutation ? createFreezeProxies(selectors) : selectors;\n    };\n}\n\nexport default function createInternalCheckoutSelectors(\n    state: CheckoutStoreState,\n    options?: CheckoutStoreOptions\n): InternalCheckoutSelectors {\n    return createInternalCheckoutSelectorsFactory()(state, options);\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport BillingAddress from './billing-address';\nimport BillingAddressState, { DEFAULT_STATE } from './billing-address-state';\n\nexport default interface BillingAddressSelector {\n    getBillingAddress(): BillingAddress | undefined;\n    getUpdateError(): Error | undefined;\n    getContinueAsGuestError(): Error | undefined;\n    getLoadError(): Error | undefined;\n    isUpdating(): boolean;\n    isContinuingAsGuest(): boolean;\n    isLoading(): boolean;\n}\n\nexport type BillingAddressSelectorFactory = (state: BillingAddressState) => BillingAddressSelector;\n\nexport function createBillingAddressSelectorFactory(): BillingAddressSelectorFactory {\n    const getBillingAddress = createSelector(\n        (state: BillingAddressState) => state.data,\n        data => () => data\n    );\n\n    const getUpdateError = createSelector(\n        (state: BillingAddressState) => state.errors.updateError,\n        error => () => error\n    );\n\n    const getContinueAsGuestError = createSelector(\n        (state: BillingAddressState) => state.errors.continueAsGuestError,\n        error => () => error\n    );\n\n    const getLoadError = createSelector(\n        (state: BillingAddressState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isUpdating = createSelector(\n        (state: BillingAddressState) => !!state.statuses.isUpdating,\n        status => () => status\n    );\n\n    const isContinuingAsGuest = createSelector(\n        (state: BillingAddressState) => !!state.statuses.isContinuingAsGuest,\n        status => () => status\n    );\n\n    const isLoading = createSelector(\n        (state: BillingAddressState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: BillingAddressState = DEFAULT_STATE\n    ): BillingAddressSelector => {\n        return {\n            getBillingAddress: getBillingAddress(state),\n            getUpdateError: getUpdateError(state),\n            getContinueAsGuestError: getContinueAsGuestError(state),\n            getLoadError: getLoadError(state),\n            isUpdating: isUpdating(state),\n            isContinuingAsGuest: isContinuingAsGuest(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoize, memoizeOne } from '@bigcommerce/memoize';\nimport { find, some, values } from 'lodash';\n\nimport { createSelector } from '../common/selector';\n\nimport CheckoutButtonState, { DEFAULT_STATE } from './checkout-button-state';\nimport { CheckoutButtonMethodType } from './strategies';\n\nexport default interface CheckoutButtonSelector {\n    getState(): CheckoutButtonState;\n    isInitializing(methodId?: CheckoutButtonMethodType): boolean;\n    isInitialized(methodId: CheckoutButtonMethodType, containerId?: string): boolean;\n    isDeinitializing(methodId?: CheckoutButtonMethodType): boolean;\n    getInitializeError(methodId?: CheckoutButtonMethodType): Error | undefined;\n    getDeinitializeError(methodId?: CheckoutButtonMethodType): Error | undefined;\n}\n\nexport type CheckoutButtonSelectorFactory = (state: CheckoutButtonState) => CheckoutButtonSelector;\n\nexport function createCheckoutButtonSelectorFactory(): CheckoutButtonSelectorFactory {\n    const getState = createSelector(\n        (state: CheckoutButtonState) => state,\n        state => () => state\n    );\n\n    const isInitializing = createSelector(\n        (state: CheckoutButtonState) => state.statuses,\n        statuses => memoize((methodId?: CheckoutButtonMethodType) => {\n            if (methodId) {\n                const method = statuses[methodId];\n\n                return (method && method.isInitializing) === true;\n            }\n\n            return some(statuses, { isInitializing: true });\n        })\n    );\n\n    const isInitialized = createSelector(\n        (state: CheckoutButtonState) => state.data,\n        data => memoize((methodId: CheckoutButtonMethodType, containerId?: string) => {\n            const method = data[methodId];\n\n            if (!method) {\n                return false;\n            }\n\n            if (!containerId) {\n                return some(method.initializedContainers, isInitialized => isInitialized === true);\n            }\n\n            return method.initializedContainers[containerId] === true;\n        })\n    );\n\n    const isDeinitializing = createSelector(\n        (state: CheckoutButtonState) => state.statuses,\n        statuses => memoize((methodId?: CheckoutButtonMethodType) => {\n            if (methodId) {\n                const method = statuses[methodId];\n\n                return (method && method.isDeinitializing) === true;\n            }\n\n            return some(statuses, { isDeinitializing: true });\n        })\n    );\n\n    const getInitializeError = createSelector(\n        (state: CheckoutButtonState) => state.errors,\n        errors => memoize((methodId?: CheckoutButtonMethodType) => {\n            const method = methodId ?\n                errors[methodId] :\n                find(values(errors), method => !!(method && method.initializeError));\n\n            return method && method.initializeError;\n        })\n    );\n\n    const getDeinitializeError = createSelector(\n        (state: CheckoutButtonState) => state.errors,\n        errors => memoize((methodId?: CheckoutButtonMethodType) => {\n            const method = methodId ?\n                errors[methodId] :\n                find(values(errors), method => !!(method && method.deinitializeError));\n\n            return method && method.deinitializeError;\n        })\n    );\n\n    return memoizeOne((\n        state: CheckoutButtonState = DEFAULT_STATE\n    ): CheckoutButtonSelector => {\n        return {\n            getState: getState(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isDeinitializing: isDeinitializing(state),\n            getInitializeError: getInitializeError(state),\n            getDeinitializeError: getDeinitializeError(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { RequestError } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\n\nimport Coupon from './coupon';\nimport CouponState, { DEFAULT_STATE } from './coupon-state';\n\nexport default interface CouponSelector {\n    getCoupons(): Coupon[] | undefined;\n    getRemoveError(): RequestError | undefined;\n    getApplyError(): RequestError | undefined;\n    isApplying(): boolean;\n    isRemoving(): boolean;\n}\n\nexport type CouponSelectorFactory = (state: CouponState) => CouponSelector;\n\nexport function createCouponSelectorFactory(): CouponSelectorFactory {\n    const getCoupons = createSelector(\n        (state: CouponState) => state.data,\n        data => () => data\n    );\n\n    const getRemoveError = createSelector(\n        (state: CouponState) => state.errors.removeCouponError,\n        error => () => error\n    );\n\n    const getApplyError = createSelector(\n        (state: CouponState) => state.errors.applyCouponError,\n        error => () => error\n    );\n\n    const isApplying = createSelector(\n        (state: CouponState) => !!state.statuses.isApplyingCoupon,\n        status => () => status\n    );\n\n    const isRemoving = createSelector(\n        (state: CouponState) => !!state.statuses.isRemovingCoupon,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: CouponState = DEFAULT_STATE\n    ): CouponSelector => {\n        return {\n            getCoupons: getCoupons(state),\n            getRemoveError: getRemoveError(state),\n            getApplyError: getApplyError(state),\n            isApplying: isApplying(state),\n            isRemoving: isRemoving(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport Customer from './customer';\nimport CustomerState, { DEFAULT_STATE } from './customer-state';\n\nexport default interface CustomerSelector {\n    getCustomer(): Customer | undefined;\n}\n\nexport type CustomerSelectorFactory = (state: CustomerState) => CustomerSelector;\n\nexport function createCustomerSelectorFactory(): CustomerSelectorFactory {\n    const getCustomer = createSelector(\n        (state: CustomerState) => state.data,\n        customer => () => customer\n    );\n\n    return memoizeOne((\n        state: CustomerState = DEFAULT_STATE\n    ): CustomerSelector => {\n        return {\n            getCustomer: getCustomer(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport RemoteCheckoutState, { DEFAULT_STATE, RemoteCheckoutStateData } from './remote-checkout-state';\n\nexport default interface RemoteCheckoutSelector {\n    getCheckout<TMethodId extends keyof RemoteCheckoutStateData>(\n        methodId: TMethodId\n    ): RemoteCheckoutStateData[TMethodId] | undefined;\n}\n\nexport type RemoteCheckoutSelectorFactory = (state: RemoteCheckoutState) => RemoteCheckoutSelector;\n\nexport function createRemoteCheckoutSelectorFactory(): RemoteCheckoutSelectorFactory {\n    const getCheckout = createSelector(\n        (state: RemoteCheckoutState) => state.data,\n        data => <TMethodId extends keyof RemoteCheckoutStateData>(methodId: TMethodId) => {\n            return data[methodId];\n        }\n    );\n\n    return memoizeOne((\n        state: RemoteCheckoutState = DEFAULT_STATE\n    ): RemoteCheckoutSelector => {\n        return {\n            getCheckout: getCheckout(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { Address } from '../address';\nimport { createSelector } from '../common/selector';\n\nimport ConsignmentState, { DEFAULT_STATE } from './consignment-state';\n\nexport default interface ShippingAddressSelector {\n    getShippingAddress(): Address | undefined;\n}\n\nexport type ShippingAddressSelectorFactory = (state: ConsignmentState) => ShippingAddressSelector;\n\nexport function createShippingAddressSelectorFactory(): ShippingAddressSelectorFactory {\n    const getShippingAddress = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => () => {\n            if (!consignments || !consignments[0]) {\n                return;\n            }\n\n            return consignments[0].shippingAddress;\n        }\n    );\n\n    return memoizeOne((\n        state: ConsignmentState = DEFAULT_STATE\n    ): ShippingAddressSelector => {\n        return {\n            getShippingAddress: getShippingAddress(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { CheckoutSelector } from '../checkout';\nimport { createSelector } from '../common/selector';\nimport { GatewayOrderPayment, OrderSelector } from '../order';\n\nimport PaymentMethod from './payment-method';\nimport { HOSTED } from './payment-method-types';\nimport { ACKNOWLEDGE, FINALIZE } from './payment-status-types';\n\nexport default interface PaymentSelector {\n    getPaymentId(): { providerId: string; gatewayId?: string } | undefined;\n    getPaymentStatus(): string | undefined;\n    getPaymentToken(): string | undefined;\n    getPaymentRedirectUrl(): string | undefined;\n    isPaymentDataRequired(useStoreCredit?: boolean): boolean;\n    isPaymentDataSubmitted(paymentMethod?: PaymentMethod): boolean;\n}\n\nexport type PaymentSelectorFactory = (\n    checkout: CheckoutSelector,\n    order: OrderSelector\n) => PaymentSelector;\n\ninterface PaymentSelectorDependencies {\n    checkout: CheckoutSelector;\n    order: OrderSelector;\n}\n\nexport function createPaymentSelectorFactory(): PaymentSelectorFactory {\n    const getInternalPayment = createSelector(\n        ({ order }: PaymentSelectorDependencies) => order.getOrderMeta,\n        getOrderMeta => () => {\n            const meta = getOrderMeta();\n\n            return meta && meta.payment;\n        }\n    );\n\n    const getGatewayPayment = createSelector(\n        ({ order }: PaymentSelectorDependencies) => order.getOrder,\n        getOrder => () => {\n            const order = getOrder();\n\n            return find(order && order.payments, ({ providerId }) =>\n                providerId !== 'giftcertificate' && providerId !== 'storecredit'\n            ) as GatewayOrderPayment;\n        }\n    );\n\n    const getHostedPayment = createSelector(\n        ({ checkout }: PaymentSelectorDependencies) => checkout.getCheckout,\n        getCheckout => () => {\n            const checkout = getCheckout();\n\n            return find(checkout && checkout.payments, ({ providerType }) =>\n                providerType === HOSTED\n            );\n        }\n    );\n\n    const getPaymentId = createSelector(\n        getInternalPayment,\n        getHostedPayment,\n        getGatewayPayment,\n        (getInternalPayment, getHostedPayment, getGatewayPayment) => () => {\n            const internalPayment = getInternalPayment();\n\n            if (internalPayment && internalPayment.id) {\n                return {\n                    providerId: internalPayment.id,\n                    gatewayId: internalPayment.gateway,\n                };\n            }\n\n            const payment = getHostedPayment() || getGatewayPayment();\n\n            if (payment && payment.providerId) {\n                return {\n                    providerId: payment.providerId,\n                    gatewayId: payment.gatewayId,\n                };\n            }\n        }\n    );\n\n    const getPaymentStatus = createSelector(\n        getInternalPayment,\n        getHostedPayment,\n        getGatewayPayment,\n        (getInternalPayment, getHostedPayment, getGatewayPayment) => () => {\n            const internalPayment = getInternalPayment();\n\n            if (internalPayment && internalPayment.status) {\n                return internalPayment.status.replace('PAYMENT_STATUS_', '');\n            }\n\n            const payment = getHostedPayment() || getGatewayPayment();\n\n            if (payment) {\n                return payment.detail.step;\n            }\n        }\n    );\n\n    const getPaymentToken = createSelector(\n        ({ order }: PaymentSelectorDependencies) => order.getOrderMeta,\n        getOrderMeta => () => {\n            const meta = getOrderMeta();\n\n            return meta && meta.token;\n        }\n    );\n\n    const getPaymentRedirectUrl = createSelector(\n        getInternalPayment,\n        getInternalPayment => () => {\n            const payment = getInternalPayment();\n\n            return payment && payment.redirectUrl;\n        }\n    );\n\n    const isPaymentDataRequired = createSelector(\n        ({ checkout }: PaymentSelectorDependencies) => checkout.getOutstandingBalance,\n        getOutstandingBalance => (useStoreCredit: boolean = false) => {\n            const grandTotal = getOutstandingBalance(useStoreCredit);\n\n            return grandTotal ? grandTotal > 0 : false;\n        }\n    );\n\n    const isPaymentDataSubmitted = createSelector(\n        getPaymentStatus,\n        getPaymentStatus => (paymentMethod?: PaymentMethod) => {\n            if (paymentMethod && paymentMethod.nonce) {\n                return true;\n            }\n\n            return getPaymentStatus() === ACKNOWLEDGE || getPaymentStatus() === FINALIZE;\n        }\n    );\n\n    return memoizeOne((\n        checkout: CheckoutSelector,\n        order: OrderSelector\n    ): PaymentSelector => {\n        return {\n            getPaymentId: getPaymentId({ checkout, order }),\n            getPaymentStatus: getPaymentStatus({ checkout, order }),\n            getPaymentToken: getPaymentToken({ checkout, order }),\n            getPaymentRedirectUrl: getPaymentRedirectUrl({ checkout, order }),\n            isPaymentDataRequired: isPaymentDataRequired({ checkout, order }),\n            isPaymentDataSubmitted: isPaymentDataSubmitted({ checkout, order }),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport Cart from './cart';\nimport CartState, { DEFAULT_STATE } from './cart-state';\n\nexport default interface CartSelector {\n    getCart(): Cart | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type CartSelectorFactory = (state: CartState) => CartSelector;\n\nexport function createCartSelectorFactory() {\n    const getCart = createSelector(\n        (state: CartState) => state.data,\n        cart => () => cart\n    );\n\n    const getLoadError = createSelector(\n        (state: CartState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: CartState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: CartState = DEFAULT_STATE\n    ): CartSelector => {\n        return {\n            getCart: getCart(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport Config, { ContextConfig, StoreConfig } from './config';\nimport ConfigState, { DEFAULT_STATE } from './config-state';\n\nexport default interface ConfigSelector {\n    getConfig(): Config | undefined;\n    getStoreConfig(): StoreConfig | undefined;\n    getContextConfig(): ContextConfig | undefined;\n    getExternalSource(): string | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type ConfigSelectorFactory = (state: ConfigState) => ConfigSelector;\n\nexport function createConfigSelectorFactory(): ConfigSelectorFactory {\n\n    const getConfig = createSelector(\n        (state: ConfigState) => state.data,\n        data => () => data\n    );\n\n    const getStoreConfig = createSelector(\n        (state: ConfigState) => state.data && state.data.storeConfig,\n        data => () => data\n    );\n\n    const getContextConfig = createSelector(\n        (state: ConfigState) => state.data && state.data.context,\n        data => () => data\n    );\n\n    const getExternalSource = createSelector(\n        (state: ConfigState) => state.meta && state.meta.externalSource,\n        data => () => data\n    );\n\n    const getLoadError = createSelector(\n        (state: ConfigState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: ConfigState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: ConfigState = DEFAULT_STATE\n    ): ConfigSelector => {\n        return {\n            getConfig: getConfig(state),\n            getStoreConfig: getStoreConfig(state),\n            getContextConfig: getContextConfig(state),\n            getExternalSource: getExternalSource(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport Country from './country';\nimport CountryState, { DEFAULT_STATE } from './country-state';\n\nexport default interface CountrySelector {\n    getCountries(): Country[] | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type CountrySelectorFactory = (state: CountryState) => CountrySelector;\n\nexport function createCountrySelectorFactory(): CountrySelectorFactory {\n    const getCountries = createSelector(\n        (state: CountryState) => state.data,\n        countries => () => countries\n    );\n\n    const getLoadError = createSelector(\n        (state: CountryState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: CountryState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: CountryState = DEFAULT_STATE\n    ): CountrySelector => {\n        return {\n            getCountries: getCountries(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport CustomerStrategyState, { DEFAULT_STATE } from './customer-strategy-state';\n\nexport default interface CustomerStrategySelector {\n    getSignInError(methodId?: string): Error | undefined;\n    getSignOutError(methodId?: string): Error | undefined;\n    getInitializeError(methodId?: string): Error | undefined;\n    getWidgetInteractionError(methodId?: string): Error | undefined;\n    isSigningIn(methodId?: string): boolean;\n    isSigningOut(methodId?: string): boolean;\n    isInitializing(methodId?: string): boolean;\n    isInitialized(methodId: string): boolean;\n    isWidgetInteracting(methodId?: string): boolean;\n}\n\nexport type CustomerStrategySelectorFactory = (state: CustomerStrategyState) => CustomerStrategySelector;\n\nexport function createCustomerStrategySelectorFactory(): CustomerStrategySelectorFactory {\n    const getSignInError = createSelector(\n        (state: CustomerStrategyState) => state.errors.signInMethodId,\n        (state: CustomerStrategyState) => state.errors.signInError,\n        (signInMethodId, signInError) => (methodId?: string) => {\n            if (methodId && signInMethodId !== methodId) {\n                return;\n            }\n\n            return signInError;\n        }\n    );\n\n    const getSignOutError = createSelector(\n        (state: CustomerStrategyState) => state.errors.signOutMethodId,\n        (state: CustomerStrategyState) => state.errors.signOutError,\n        (signOutMethodId, signOutError) => (methodId?: string) => {\n            if (methodId && signOutMethodId !== methodId) {\n                return;\n            }\n\n            return signOutError;\n        }\n    );\n\n    const getInitializeError = createSelector(\n        (state: CustomerStrategyState) => state.errors.initializeMethodId,\n        (state: CustomerStrategyState) => state.errors.initializeError,\n        (initializeMethodId, initializeError) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return;\n            }\n\n            return initializeError;\n        }\n    );\n\n    const getWidgetInteractionError = createSelector(\n        (state: CustomerStrategyState) => state.errors.widgetInteractionMethodId,\n        (state: CustomerStrategyState) => state.errors.widgetInteractionError,\n        (widgetInteractionMethodId, widgetInteractionError) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return;\n            }\n\n            return widgetInteractionError;\n        }\n    );\n\n    const isSigningIn = createSelector(\n        (state: CustomerStrategyState) => state.statuses.signInMethodId,\n        (state: CustomerStrategyState) => state.statuses.isSigningIn,\n        (signInMethodId, isSigningIn) => (methodId?: string) => {\n            if (methodId && signInMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isSigningIn;\n        }\n    );\n\n    const isSigningOut = createSelector(\n        (state: CustomerStrategyState) => state.statuses.signOutMethodId,\n        (state: CustomerStrategyState) => state.statuses.isSigningOut,\n        (signOutMethodId, isSigningOut) => (methodId?: string) => {\n            if (methodId && signOutMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isSigningOut;\n        }\n    );\n\n    const isInitializing = createSelector(\n        (state: CustomerStrategyState) => state.statuses.initializeMethodId,\n        (state: CustomerStrategyState) => state.statuses.isInitializing,\n        (initializeMethodId, isInitializing) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isInitializing;\n        }\n    );\n\n    const isInitialized = createSelector(\n        (state: CustomerStrategyState) => state.data,\n        data => (methodId: string) => {\n            return !!(\n                data[methodId] &&\n                data[methodId].isInitialized\n            );\n        }\n    );\n\n    const isWidgetInteracting = createSelector(\n        (state: CustomerStrategyState) => state.statuses.widgetInteractionMethodId,\n        (state: CustomerStrategyState) => state.statuses.isWidgetInteracting,\n        (widgetInteractionMethodId, isWidgetInteracting) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isWidgetInteracting;\n        }\n    );\n\n    return memoizeOne((\n        state: CustomerStrategyState = DEFAULT_STATE\n    ): CustomerStrategySelector => {\n        return {\n            getSignInError: getSignInError(state),\n            getSignOutError: getSignOutError(state),\n            getInitializeError: getInitializeError(state),\n            getWidgetInteractionError: getWidgetInteractionError(state),\n            isSigningIn: isSigningIn(state),\n            isSigningOut: isSigningOut(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isWidgetInteracting: isWidgetInteracting(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\n\nimport GiftCertificate from './gift-certificate';\nimport GiftCertificateState, { DEFAULT_STATE } from './gift-certificate-state';\n\nexport default interface GiftCertificateSelector {\n    getGiftCertificates(): GiftCertificate[] | undefined;\n    getRemoveError(): RequestError<StorefrontErrorResponseBody> | undefined;\n    getApplyError(): RequestError<StorefrontErrorResponseBody> | undefined;\n    isApplying(): boolean;\n    isRemoving(): boolean;\n}\n\nexport type GiftCertificateSelectorFactory = (state: GiftCertificateState) => GiftCertificateSelector;\n\nexport function createGiftCertificateSelectorFactory(): GiftCertificateSelectorFactory {\n    const getGiftCertificates = createSelector(\n        (state: GiftCertificateState) => state.data,\n        data => () => data\n    );\n\n    const getRemoveError = createSelector(\n        (state: GiftCertificateState) => state.errors.removeGiftCertificateError,\n        error => () => error\n    );\n\n    const getApplyError = createSelector(\n        (state: GiftCertificateState) => state.errors.applyGiftCertificateError,\n        error => () => error\n    );\n\n    const isApplying = createSelector(\n        (state: GiftCertificateState) => !!state.statuses.isApplyingGiftCertificate,\n        status => () => status\n    );\n\n    const isRemoving = createSelector(\n        (state: GiftCertificateState) => !!state.statuses.isRemovingGiftCertificate,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: GiftCertificateState = DEFAULT_STATE\n    ): GiftCertificateSelector => {\n        return {\n            getGiftCertificates: getGiftCertificates(state),\n            getRemoveError: getRemoveError(state),\n            getApplyError: getApplyError(state),\n            isApplying: isApplying(state),\n            isRemoving: isRemoving(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../../common/selector';\n\nimport Instrument from './instrument';\nimport InstrumentState, { DEFAULT_STATE, InstrumentMeta } from './instrument-state';\n\nexport default interface InstrumentSelector {\n    getInstruments(): Instrument[] | undefined;\n    getInstrumentsMeta(): InstrumentMeta | undefined;\n    getLoadError(): Error | undefined;\n    getDeleteError(instrumentId?: string): Error | undefined;\n    isLoading(): boolean ;\n    isDeleting(instrumentId?: string): boolean;\n}\n\nexport type InstrumentSelectorFactory = (state: InstrumentState) => InstrumentSelector;\n\nexport function createInstrumentSelectorFactory(): InstrumentSelectorFactory {\n    const getInstruments = createSelector(\n        (state: InstrumentState) => state.data,\n        instruments => () => instruments\n    );\n\n    const getInstrumentsMeta = createSelector(\n        (state: InstrumentState) => state.meta,\n        meta => () => meta\n    );\n\n    const getLoadError = createSelector(\n        (state: InstrumentState) => state.errors.loadError,\n        loadError => () => loadError\n    );\n\n    const getDeleteError = createSelector(\n        (state: InstrumentState) => state.errors.failedInstrument,\n        (state: InstrumentState) => state.errors.deleteError,\n        (failedInstrument, deleteError) => (instrumentId?: string) => {\n            if (instrumentId && failedInstrument !== instrumentId) {\n                return;\n            }\n\n            return deleteError;\n        }\n    );\n\n    const isLoading = createSelector(\n        (state: InstrumentState) => state.statuses.isLoading,\n        isLoading => () => !!isLoading\n    );\n\n    const isDeleting = createSelector(\n        (state: InstrumentState) => state.statuses.deletingInstrument,\n        (state: InstrumentState) => state.statuses.isDeleting,\n        (deletingInstrument, isDeleting) => (instrumentId?: string) => {\n            if (instrumentId && deletingInstrument !== instrumentId) {\n                return false;\n            }\n\n            return !!isDeleting;\n        }\n    );\n\n    return memoizeOne((\n        state: InstrumentState = DEFAULT_STATE\n    ): InstrumentSelector => {\n        return {\n            getInstruments: getInstruments(state),\n            getInstrumentsMeta: getInstrumentsMeta(state),\n            getLoadError: getLoadError(state),\n            getDeleteError: getDeleteError(state),\n            isLoading: isLoading(state),\n            isDeleting: isDeleting(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { createSelector } from '../common/selector';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState, { DEFAULT_STATE } from './payment-method-state';\n\nexport default interface PaymentMethodSelector {\n    getPaymentMethods(): PaymentMethod[] | undefined;\n    getPaymentMethodsMeta(): PaymentMethodMeta | undefined;\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined;\n    getLoadError(): Error | undefined;\n    getLoadMethodError(methodId?: string): Error | undefined;\n    isLoading(): boolean;\n    isLoadingMethod(methodId?: string): boolean;\n}\n\nexport type PaymentMethodSelectorFactory = (state: PaymentMethodState) => PaymentMethodSelector;\n\nexport function createPaymentMethodSelectorFactory(): PaymentMethodSelectorFactory {\n    const getPaymentMethods = createSelector(\n        (state: PaymentMethodState) => state.data,\n        paymentMethods => () => paymentMethods\n    );\n\n    const getPaymentMethodsMeta = createSelector(\n        (state: PaymentMethodState) => state.meta,\n        meta => () => meta\n    );\n\n    const getPaymentMethod = createSelector(\n        (state: PaymentMethodState) => state.data,\n        paymentMethods => (methodId: string, gatewayId?: string) => {\n            return gatewayId ?\n                find(paymentMethods, { id: methodId, gateway: gatewayId }) :\n                find(paymentMethods, { id: methodId });\n        }\n    );\n\n    const getLoadError = createSelector(\n        (state: PaymentMethodState) => state.errors.loadError,\n        loadError => () => loadError\n    );\n\n    const getLoadMethodError = createSelector(\n        (state: PaymentMethodState) => state.errors.loadMethodId,\n        (state: PaymentMethodState) => state.errors.loadMethodError,\n        (loadMethodId, loadMethodError) => (methodId?: string) => {\n            if (methodId && loadMethodId !== methodId) {\n                return;\n            }\n\n            return loadMethodError;\n        }\n    );\n\n    const isLoading = createSelector(\n        (state: PaymentMethodState) => state.statuses.isLoading,\n        isLoading => () => !!isLoading\n    );\n\n    const isLoadingMethod = createSelector(\n        (state: PaymentMethodState) => state.statuses.loadMethodId,\n        (state: PaymentMethodState) => state.statuses.isLoadingMethod,\n        (loadMethodId, isLoadingMethod) => (methodId?: string) => {\n            if (methodId && loadMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isLoadingMethod;\n        }\n    );\n\n    return memoizeOne((\n        state: PaymentMethodState = DEFAULT_STATE\n    ): PaymentMethodSelector => {\n        return {\n            getPaymentMethods: getPaymentMethods(state),\n            getPaymentMethodsMeta: getPaymentMethodsMeta(state),\n            getPaymentMethod: getPaymentMethod(state),\n            getLoadError: getLoadError(state),\n            getLoadMethodError: getLoadMethodError(state),\n            isLoading: isLoading(state),\n            isLoadingMethod: isLoadingMethod(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport PaymentStrategyState, { DEFAULT_STATE } from './payment-strategy-state';\n\nexport default interface PaymentStrategySelector {\n    getInitializeError(methodId?: string): Error | undefined;\n    getExecuteError(methodId?: string): Error | undefined;\n    getFinalizeError(methodId?: string): Error | undefined;\n    getWidgetInteractingError(methodId?: string): Error | undefined;\n    isInitializing(methodId?: string): boolean;\n    isInitialized(methodId: string): boolean;\n    isExecuting(methodId?: string): boolean;\n    isFinalizing(methodId?: string): boolean;\n    isWidgetInteracting(methodId?: string): boolean;\n}\n\nexport type PaymentStrategySelectorFactory = (state: PaymentStrategyState) => PaymentStrategySelector;\n\nexport function createPaymentStrategySelectorFactory(): PaymentStrategySelectorFactory {\n    const getInitializeError = createSelector(\n        (state: PaymentStrategyState) => state.errors.initializeMethodId,\n        (state: PaymentStrategyState) => state.errors.initializeError,\n        (initializeMethodId, initializeError) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return;\n            }\n\n            return initializeError;\n        }\n    );\n\n    const getExecuteError = createSelector(\n        (state: PaymentStrategyState) => state.errors.executeMethodId,\n        (state: PaymentStrategyState) => state.errors.executeError,\n        (executeMethodId, executeError) => (methodId?: string) => {\n            if (methodId && executeMethodId !== methodId) {\n                return;\n            }\n\n            return executeError;\n        }\n    );\n\n    const getFinalizeError = createSelector(\n        (state: PaymentStrategyState) => state.errors.finalizeMethodId,\n        (state: PaymentStrategyState) => state.errors.finalizeError,\n        (finalizeMethodId, finalizeError) => (methodId?: string) => {\n            if (methodId && finalizeMethodId !== methodId) {\n                return;\n            }\n\n            return finalizeError;\n        }\n    );\n\n    const getWidgetInteractingError = createSelector(\n        (state: PaymentStrategyState) => state.errors.widgetInteractionMethodId,\n        (state: PaymentStrategyState) => state.errors.widgetInteractionError,\n        (widgetInteractionMethodId, widgetInteractionError) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return;\n            }\n\n            return widgetInteractionError;\n        }\n    );\n\n    const isInitializing = createSelector(\n        (state: PaymentStrategyState) => state.statuses.initializeMethodId,\n        (state: PaymentStrategyState) => state.statuses.isInitializing,\n        (initializeMethodId, isInitializing) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isInitializing;\n        }\n    );\n\n    const isInitialized = createSelector(\n        (state: PaymentStrategyState) => state.data,\n        data => (methodId: string) => {\n            return !!(\n                data[methodId] &&\n                data[methodId].isInitialized\n            );\n        }\n    );\n\n    const isExecuting = createSelector(\n        (state: PaymentStrategyState) => state.statuses.executeMethodId,\n        (state: PaymentStrategyState) => state.statuses.isExecuting,\n        (executeMethodId, isExecuting) => (methodId?: string) => {\n            if (methodId && executeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isExecuting;\n        }\n    );\n\n    const isFinalizing = createSelector(\n        (state: PaymentStrategyState) => state.statuses.finalizeMethodId,\n        (state: PaymentStrategyState) => state.statuses.isFinalizing,\n        (finalizeMethodId, isFinalizing) => (methodId?: string) => {\n            if (methodId && finalizeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isFinalizing;\n        }\n    );\n\n    const isWidgetInteracting = createSelector(\n        (state: PaymentStrategyState) => state.statuses.widgetInteractionMethodId,\n        (state: PaymentStrategyState) => state.statuses.isWidgetInteracting,\n        (widgetInteractionMethodId, isWidgetInteracting) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isWidgetInteracting;\n        }\n    );\n\n    return memoizeOne((\n        state: PaymentStrategyState = DEFAULT_STATE\n    ): PaymentStrategySelector => {\n        return {\n            getInitializeError: getInitializeError(state),\n            getExecuteError: getExecuteError(state),\n            getFinalizeError: getFinalizeError(state),\n            getWidgetInteractingError: getWidgetInteractingError(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isExecuting: isExecuting(state),\n            isFinalizing: isFinalizing(state),\n            isWidgetInteracting: isWidgetInteracting(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\nimport { Country } from '../geography';\n\nimport ShippingCountryState, { DEFAULT_STATE } from './shipping-country-state';\n\nexport default interface ShippingCountrySelector {\n    getShippingCountries(): Country[] | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type ShippingCountrySelectorFactory = (state: ShippingCountryState) => ShippingCountrySelector;\n\nexport function createShippingCountrySelectorFactory(): ShippingCountrySelectorFactory {\n    const getShippingCountries = createSelector(\n        (state: ShippingCountryState) => state.data,\n        data => () => data\n    );\n\n    const getLoadError = createSelector(\n        (state: ShippingCountryState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: ShippingCountryState) => state.statuses.isLoading,\n        status => () => !!status\n    );\n\n    return memoizeOne((\n        state: ShippingCountryState = DEFAULT_STATE\n    ): ShippingCountrySelector => {\n        return {\n            getShippingCountries: getShippingCountries(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport ShippingStrategyState, { DEFAULT_STATE } from './shipping-strategy-state';\n\nexport default interface ShippingStrategySelector {\n    getUpdateAddressError(methodId?: string): Error | undefined;\n    getSelectOptionError(methodId?: string): Error | undefined;\n    getInitializeError(methodId?: string): Error | undefined;\n    isUpdatingAddress(methodId?: string): boolean;\n    isSelectingOption(methodId?: string): boolean;\n    isInitializing(methodId?: string): boolean;\n    isInitialized(methodId: string): boolean;\n}\n\nexport type ShippingStrategySelectorFactory = (state: ShippingStrategyState) => ShippingStrategySelector;\n\nexport function createShippingStrategySelectorFactory(): ShippingStrategySelectorFactory {\n    const getUpdateAddressError = createSelector(\n        (state: ShippingStrategyState) => state.errors.updateAddressMethodId,\n        (state: ShippingStrategyState) => state.errors.updateAddressError,\n        (updateAddressMethodId, updateAddressError) => (methodId?: string) => {\n            if (methodId && updateAddressMethodId !== methodId) {\n                return;\n            }\n\n            return updateAddressError;\n        }\n    );\n\n    const getSelectOptionError = createSelector(\n        (state: ShippingStrategyState) => state.errors.selectOptionMethodId,\n        (state: ShippingStrategyState) => state.errors.selectOptionError,\n        (selectOptionMethodId, selectOptionError) => (methodId?: string) => {\n            if (methodId && selectOptionMethodId !== methodId) {\n                return;\n            }\n\n            return selectOptionError;\n        }\n    );\n\n    const getInitializeError = createSelector(\n        (state: ShippingStrategyState) => state.errors.initializeMethodId,\n        (state: ShippingStrategyState) => state.errors.initializeError,\n        (initializeMethodId, initializeError) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return;\n            }\n\n            return initializeError;\n        }\n    );\n\n    const isUpdatingAddress = createSelector(\n        (state: ShippingStrategyState) => state.statuses.updateAddressMethodId,\n        (state: ShippingStrategyState) => state.statuses.isUpdatingAddress,\n        (updateAddressMethodId, isUpdatingAddress) => (methodId?: string) => {\n            if (methodId && updateAddressMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isUpdatingAddress;\n        }\n    );\n\n    const isSelectingOption = createSelector(\n        (state: ShippingStrategyState) => state.statuses.selectOptionMethodId,\n        (state: ShippingStrategyState) => state.statuses.isSelectingOption,\n        (selectOptionMethodId, isSelectingOption) => (methodId?: string) => {\n            if (methodId && selectOptionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isSelectingOption;\n        }\n    );\n\n    const isInitializing = createSelector(\n        (state: ShippingStrategyState) => state.statuses.initializeMethodId,\n        (state: ShippingStrategyState) => state.statuses.isInitializing,\n        (initializeMethodId, isInitializing) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isInitializing;\n        }\n    );\n\n    const isInitialized = createSelector(\n        (state: ShippingStrategyState) => state.data,\n        data => (methodId: string) => {\n            return !!(\n                data[methodId] &&\n                data[methodId].isInitialized\n            );\n        }\n    );\n\n    return memoizeOne((\n        state: ShippingStrategyState = DEFAULT_STATE\n    ): ShippingStrategySelector => {\n        return {\n            getUpdateAddressError: getUpdateAddressError(state),\n            getSelectOptionError: getSelectOptionError(state),\n            getInitializeError: getInitializeError(state),\n            isUpdatingAddress: isUpdatingAddress(state),\n            isSelectingOption: isSelectingOption(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { createSelector } from '../common/selector';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerSelector } from '../customer';\nimport { ConsignmentSelector } from '../shipping';\n\nimport Checkout from './checkout';\nimport CheckoutState, { DEFAULT_STATE } from './checkout-state';\n\nexport default interface CheckoutSelector {\n    getCheckout(): Checkout | undefined;\n    getOutstandingBalance(useStoreCredit?: boolean): number | undefined;\n    getLoadError(): Error | undefined;\n    getUpdateError(): Error | undefined;\n    isLoading(): boolean;\n    isUpdating(): boolean;\n}\n\nexport type CheckoutSelectorFactory = (\n    state: CheckoutState,\n    billingAddress: BillingAddressSelector,\n    cart: CartSelector,\n    consignments: ConsignmentSelector,\n    coupons: CouponSelector,\n    customer: CustomerSelector,\n    giftCertificates: GiftCertificateSelector\n) => CheckoutSelector;\n\ninterface CheckoutSelectorDependencies {\n    billingAddress: BillingAddressSelector;\n    cart: CartSelector;\n    consignments: ConsignmentSelector;\n    coupons: CouponSelector;\n    customer: CustomerSelector;\n    giftCertificates: GiftCertificateSelector;\n}\n\nexport function createCheckoutSelectorFactory(): CheckoutSelectorFactory {\n    const getCheckout = createSelector(\n        (state: CheckoutState) => state.data,\n        (_: CheckoutState, { billingAddress }: CheckoutSelectorDependencies) => billingAddress.getBillingAddress,\n        (_: CheckoutState, { cart }: CheckoutSelectorDependencies) => cart.getCart,\n        (_: CheckoutState, { customer }: CheckoutSelectorDependencies) => customer.getCustomer,\n        (_: CheckoutState, { consignments }: CheckoutSelectorDependencies) => consignments.getConsignments,\n        (_: CheckoutState, { coupons }: CheckoutSelectorDependencies) => coupons.getCoupons,\n        (_: CheckoutState, { giftCertificates }: CheckoutSelectorDependencies) => giftCertificates.getGiftCertificates,\n        (data, getBillingAddress, getCart, getCustomer, getConsignments, getCoupons, getGiftCertificates) => () => {\n            const billingAddress = getBillingAddress();\n            const cart = getCart();\n            const customer = getCustomer();\n            const consignments = getConsignments() || [];\n            const coupons = getCoupons() || [];\n            const giftCertificates = getGiftCertificates() || [];\n\n            if (!data || !cart || !customer) {\n                return;\n            }\n\n            return {\n                ...data,\n                billingAddress,\n                cart,\n                customer,\n                consignments,\n                coupons,\n                giftCertificates,\n            };\n        }\n    );\n\n    const getOutstandingBalance = createSelector(\n        getCheckout,\n        getCheckout => (useStoreCredit?: boolean) => {\n            const checkout = getCheckout();\n\n            if (!checkout) {\n                return;\n            }\n\n            const grandTotal = checkout.grandTotal || 0;\n            const storeCredit = checkout.customer.storeCredit || 0;\n\n            return useStoreCredit ? Math.max(grandTotal - storeCredit, 0) : checkout.outstandingBalance;\n        }\n    );\n\n    const getLoadError = createSelector(\n        (state: CheckoutState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const getUpdateError = createSelector(\n        (state: CheckoutState) => state.errors.updateError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: CheckoutState) => state.statuses.isLoading,\n        isLoading => () => isLoading === true\n    );\n\n    const isUpdating = createSelector(\n        (state: CheckoutState) => state.statuses.isUpdating,\n        isUpdating => () => isUpdating === true\n    );\n\n    return memoizeOne((\n        state: CheckoutState = DEFAULT_STATE,\n        billingAddress: BillingAddressSelector,\n        cart: CartSelector,\n        consignments: ConsignmentSelector,\n        coupons: CouponSelector,\n        customer: CustomerSelector,\n        giftCertificates: GiftCertificateSelector\n    ): CheckoutSelector => {\n        return {\n            getCheckout: getCheckout(state, {\n                billingAddress,\n                cart,\n                consignments,\n                coupons,\n                customer,\n                giftCertificates,\n            }),\n            getOutstandingBalance: getOutstandingBalance(state, {\n                billingAddress,\n                cart,\n                consignments,\n                coupons,\n                customer,\n                giftCertificates,\n            }),\n            getLoadError: getLoadError(state),\n            getUpdateError: getUpdateError(state),\n            isLoading: isLoading(state),\n            isUpdating: isUpdating(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { BillingAddressSelector } from '../billing';\nimport { createSelector } from '../common/selector';\nimport { CouponSelector } from '../coupon';\n\nimport Order from './order';\nimport OrderState, { DEFAULT_STATE, OrderMetaState } from './order-state';\n\nexport default interface OrderSelector {\n    getOrder(): Order | undefined;\n    getOrderMeta(): OrderMetaState | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type OrderSelectorFactory = (\n    state: OrderState,\n    billingAddress: BillingAddressSelector,\n    coupons: CouponSelector\n) => OrderSelector;\n\ninterface OrderSelectorDependencies {\n    billingAddress: BillingAddressSelector;\n    coupons: CouponSelector;\n}\n\nexport function createOrderSelectorFactory(): OrderSelectorFactory {\n    const getOrder = createSelector(\n        (state: OrderState) => state.data,\n        (_: OrderState, { billingAddress }: OrderSelectorDependencies) => billingAddress.getBillingAddress(),\n        (_: OrderState, { coupons }: OrderSelectorDependencies) => coupons.getCoupons(),\n        (data, billingAddress, coupons = []) => () => {\n            if (!data || !billingAddress) {\n                return;\n            }\n\n            return {\n                ...data,\n                billingAddress,\n                coupons,\n            };\n        }\n    );\n\n    const getOrderMeta = createSelector(\n        (state: OrderState) => state.meta,\n        meta => () => meta\n    );\n\n    const getLoadError = createSelector(\n        (state: OrderState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: OrderState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: OrderState = DEFAULT_STATE,\n        billingAddress: BillingAddressSelector,\n        coupons: CouponSelector\n    ): OrderSelector => {\n        return {\n            getOrder: getOrder(state, { billingAddress, coupons }),\n            getOrderMeta: getOrderMeta(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { RequestError } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\n\nimport StoreCreditState, { DEFAULT_STATE } from './store-credit-state';\n\nexport default interface StoreCreditSelector {\n    getApplyError(): RequestError | undefined;\n    isApplying(): boolean;\n}\n\nexport type StoreCreditSelectorFactory = (state: StoreCreditState) => StoreCreditSelector;\n\nexport function createStoreCreditSelectorFactory(): StoreCreditSelectorFactory {\n    const getApplyError = createSelector(\n        (state: StoreCreditState) => state.errors.applyError,\n        error => () => error\n    );\n\n    const isApplying = createSelector(\n        (state: StoreCreditState) => !!state.statuses.isApplying,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: StoreCreditState = DEFAULT_STATE\n    ): StoreCreditSelector => {\n        return {\n            getApplyError: getApplyError(state),\n            isApplying: isApplying(state),\n        };\n    });\n}\n","import { createDataStore } from '@bigcommerce/data-store';\n\nimport { createRequestErrorFactory } from '../common/error';\n\nimport CheckoutStore, { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport createActionTransformer from './create-action-transformer';\nimport createCheckoutStoreReducer from './create-checkout-store-reducer';\nimport { createInternalCheckoutSelectorsFactory } from './create-internal-checkout-selectors';\n\nexport default function createCheckoutStore(\n    initialState: Partial<CheckoutStoreState> = {},\n    options?: CheckoutStoreOptions\n): CheckoutStore {\n    const actionTransformer = createActionTransformer(createRequestErrorFactory());\n    const createInternalCheckoutSelectors = createInternalCheckoutSelectorsFactory();\n    const stateTransformer = (state: CheckoutStoreState) => createInternalCheckoutSelectors(state);\n\n    return createDataStore(\n        createCheckoutStoreReducer(),\n        initialState,\n        { actionTransformer, stateTransformer, ...options }\n    );\n}\n","import { Action } from '@bigcommerce/data-store';\nimport { from, Observable, Subscribable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { RequestErrorFactory } from '../common/error';\n\nexport default function createActionTransformer(\n    requestErrorFactory: RequestErrorFactory\n): (action: Subscribable<Action>) => Observable<Action> {\n    return action$ => from(action$).pipe(catchError<Action, never>(action => {\n        if (action instanceof Error || action.payload instanceof Error) {\n            throw action;\n        }\n\n        if (isResponse(action.payload)) {\n            const message = action.payload.body && action.payload.body.detail;\n\n            throw { ...action, payload: requestErrorFactory.createError(action.payload, message) };\n        }\n\n        throw action;\n    }));\n}\n\nfunction isResponse(object: any) {\n    if (!object || typeof object !== 'object') {\n        return false;\n    }\n\n    return ['body', 'headers', 'status', 'statusText'].every(key =>\n        object.hasOwnProperty(key)\n    );\n}\n","import { PaymentMethodInvalidError } from '../../payment/errors';\n\nimport { UnrecoverableError } from './errors';\nimport RequestErrorFactory from './request-error-factory';\n\nexport default function createRequestErrorFactory(): RequestErrorFactory {\n    const factory = new RequestErrorFactory();\n\n    const unrecoverableErrorTypes = [\n        'catalog_only',\n        'empty_cart',\n        'invalid_order_id',\n        'invalid_order_token',\n        'missing_order_token',\n        'missing_provider_token',\n        'missing_shipping_method',\n        'order_completion_error',\n        'order_could_not_be_finalized_error',\n        'order_create_failed',\n        'provider_fatal_error',\n        'provider_setup_error',\n        'stock_too_low',\n    ];\n\n    unrecoverableErrorTypes.forEach(type => {\n        factory.register(type, (response, message) => new UnrecoverableError(response, message));\n    });\n\n    factory.register('invalid_payment_provider', response => new PaymentMethodInvalidError(response));\n    factory.register('payment_config_not_found', response => new PaymentMethodInvalidError(response));\n\n    return factory;\n}\n","import { combineReducers, Action, Reducer } from '@bigcommerce/data-store';\n\nimport { billingAddressReducer } from '../billing';\nimport { cartReducer } from '../cart';\nimport { checkoutButtonReducer } from '../checkout-buttons';\nimport { configReducer } from '../config';\nimport { couponReducer, giftCertificateReducer } from '../coupon';\nimport { customerReducer, customerStrategyReducer } from '../customer';\nimport { countryReducer } from '../geography';\nimport { orderReducer } from '../order';\nimport { paymentMethodReducer, paymentReducer, paymentStrategyReducer } from '../payment';\nimport { instrumentReducer } from '../payment/instrument';\nimport { remoteCheckoutReducer } from '../remote-checkout';\nimport { consignmentReducer, shippingCountryReducer, shippingStrategyReducer } from '../shipping';\nimport { storeCreditReducer } from '../store-credit';\n\nimport checkoutReducer from './checkout-reducer';\nimport CheckoutStoreState from './checkout-store-state';\n\nexport default function createCheckoutStoreReducer(): Reducer<CheckoutStoreState, Action> {\n    return combineReducers({\n        billingAddress: billingAddressReducer,\n        cart: cartReducer,\n        checkout: checkoutReducer,\n        checkoutButton: checkoutButtonReducer,\n        config: configReducer,\n        consignments: consignmentReducer,\n        countries: countryReducer,\n        coupons: couponReducer,\n        customer: customerReducer,\n        customerStrategies: customerStrategyReducer,\n        giftCertificates: giftCertificateReducer,\n        instruments: instrumentReducer,\n        order: orderReducer,\n        payment: paymentReducer,\n        paymentMethods: paymentMethodReducer,\n        paymentStrategies: paymentStrategyReducer,\n        remoteCheckout: remoteCheckoutReducer,\n        shippingCountries: shippingCountryReducer,\n        shippingStrategies: shippingStrategyReducer,\n        storeCredit: storeCreditReducer,\n    });\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../../common/error';\nimport { RequestError } from '../../common/error/errors';\n\n/**\n * Throw this error when we are unable to retrieve a checkout object from the\n * server using the provided ID. It could be because the shopper does not have\n * permission to view the object, or the ID itself is invalid.\n */\nexport default class CheckoutNotAvailableError extends RequestError {\n    constructor(response: Response<InternalErrorResponseBody>) {\n        super(response, { message: response.body.title });\n\n        this.name = 'CheckoutNotAvailableError';\n        this.type = 'checkout_not_available';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nimport Checkout, { CheckoutRequestBody } from './checkout';\nimport CHECKOUT_DEFAULT_INCLUDES from './checkout-default-includes';\nimport CheckoutParams from './checkout-params';\nimport { CheckoutNotAvailableError } from './errors';\n\nexport default class CheckoutRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadCheckout(id: string, { params, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.get(url, {\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    ...(params && params.include || []),\n                ]),\n            },\n            headers,\n            timeout,\n        }).catch(error => {\n            if (error.status >= 400 && error.status < 500) {\n                throw new CheckoutNotAvailableError(error);\n            }\n\n            throw error;\n        });\n    }\n\n    updateCheckout(id: string, body: CheckoutRequestBody, { params, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, {\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    ...(params && params.include || []),\n                ]),\n            },\n            body,\n            headers,\n            timeout,\n        });\n    }\n}\n","import Coupon from './coupon';\nimport InternalCoupon from './internal-coupon';\n\nconst couponTypes = [\n    'per_item_discount',\n    'percentage_discount',\n    'per_total_discount',\n    'shipping_discount',\n    'free_shipping',\n];\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCoupon(coupon: Coupon): InternalCoupon {\n    return {\n        code: coupon.code,\n        discount: coupon.displayName,\n        discountType: couponTypes.indexOf(coupon.couponType),\n    };\n}\n","import { isBillingAddressLike } from '../billing';\nimport BillingAddress from '../billing/billing-address';\nimport { Consignment } from '../shipping';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalAddress(\n    address: Address | BillingAddress,\n    consignments?: Consignment[]\n): InternalAddress<any> {\n    let addressId;\n\n    if (isBillingAddressLike(address)) {\n        addressId = address.id;\n    } else if (consignments && consignments.length) {\n        addressId = consignments[0].id;\n    }\n\n    return {\n        id: addressId,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        addressLine1: address.address1,\n        addressLine2: address.address2,\n        city: address.city,\n        province: address.stateOrProvince,\n        provinceCode: address.stateOrProvinceCode,\n        postCode: address.postalCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","import Address from '../address/address';\n\nimport BillingAddress from './billing-address';\n\nexport default function isBillingAddressLike(address: Address): address is BillingAddress {\n    const billingAddress = address as BillingAddress;\n\n    return typeof billingAddress.id !== 'undefined';\n}\n","import { memoize } from '@bigcommerce/memoize';\n\nimport { bindDecorator, isEqual, isPrivate, CacheKeyResolver } from '../utility';\n\n/**\n * Decorates a class by patching all of its methods to cache their return values\n * and return them if they are called again with the same set of parameters. The\n * decorator also binds all the methods to the calling instance so it can be\n * destructed.\n */\nexport default function selectorDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                selectorMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\nfunction selectorMethodDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let resolver = new CacheKeyResolver();\n    let method = descriptor.value;\n    let memoizedMethod = memoize(method);\n\n    return bindDecorator(target, key, {\n        get() {\n            const value = ((...args: any[]) => {\n                const cachedValue = memoizedMethod.call(this, ...args);\n\n                if (resolver.getUsedCount(...args) === 1) {\n                    return cachedValue;\n                }\n\n                const newValue = method.call(this, ...args);\n\n                if (isEqual(newValue, cachedValue, { keyFilter: key => !isPrivate(key) })) {\n                    return cachedValue;\n                }\n\n                memoizedMethod.cache.set(resolver.getKey(...args), newValue);\n\n                return newValue;\n            }) as T;\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n        set(value) {\n            resolver = new CacheKeyResolver();\n            method = value;\n            memoizedMethod = memoize(method);\n        },\n    });\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\ntype Method = (...args: any[]) => any;\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonErrorSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    getInitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        return this._checkoutButton.getInitializeError(methodId);\n    }\n\n    getDeinitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        return this._checkoutButton.getDeinitializeError(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonStatusSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    isInitializingButton(methodId?: CheckoutButtonMethodType): boolean {\n        return this._checkoutButton.isInitializing(methodId);\n    }\n\n    isDeinitializingButton(methodId?: CheckoutButtonMethodType): boolean {\n        return this._checkoutButton.isDeinitializing(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\n\nimport CheckoutButtonErrorSelector from './checkout-button-error-selector';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStatusSelector from './checkout-button-status-selector';\n\nexport default function createCheckoutButtonSelectors(selectors: InternalCheckoutSelectors): CheckoutButtonSelectors {\n    const errors = new CheckoutButtonErrorSelector(selectors);\n    const statuses = new CheckoutButtonStatusSelector(selectors);\n\n    return {\n        errors,\n        statuses,\n    };\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../checkout';\nimport { isElementId, setUniqueElementId } from '../common/dom';\nimport { bindDecorator as bind } from '../common/utility';\n\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonSelectors from './create-checkout-button-selectors';\n\n@bind\nexport default class CheckoutButtonInitializer {\n    private _state: CheckoutButtonSelectors;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _buttonStrategyActionCreator: CheckoutButtonStrategyActionCreator\n    ) {\n        this._state = createCheckoutButtonSelectors(this._store.getState());\n\n        this._store.subscribe(state => {\n            this._state = createCheckoutButtonSelectors(state);\n        });\n    }\n\n    /**\n     * Returns a snapshot of the current state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * state. You can query the state by calling any of its getter methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.errors.getInitializeButtonError());\n     * console.log(state.statuses.isInitializingButton());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutButtonSelectors {\n        return this._state;\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the current state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.statuses.isInitializingButton());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.errors.getInitializeButtonError();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.errors.getInitializeButtonError())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutButtonSelectors) => void,\n        ...filters: Array<(state: CheckoutButtonSelectors) => any>\n    ): () => void {\n        return this._store.subscribe(\n            () => subscriber(this.getState()),\n            state => state.checkoutButton.getState(),\n            ...filters.map(filter => (state: InternalCheckoutSelectors) => filter(createCheckoutButtonSelectors(state)))\n        );\n    }\n\n    /**\n     * Initializes the checkout button of a payment method.\n     *\n     * When the checkout button is initialized, it will be inserted into the DOM,\n     * ready to be interacted with by the customer.\n     *\n     * ```js\n     * initializer.initializeButton({\n     *     methodId: 'braintreepaypal',\n     *     containerId: 'checkoutButton',\n     *     braintreepaypal: {\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeButton(options: CheckoutButtonInitializeOptions): Promise<CheckoutButtonSelectors> {\n        const containerIds = isElementId(options.containerId) ?\n            [options.containerId] :\n            setUniqueElementId(options.containerId, `${options.methodId}-container`);\n\n        return Promise.all(\n            containerIds.map(containerId => {\n                const action = this._buttonStrategyActionCreator.initialize({ ...options, containerId });\n                const queueId = `checkoutButtonStrategy:${options.methodId}:${containerId}`;\n\n                return this._store.dispatch(action, { queueId });\n            })\n        )\n            .then(() => this.getState());\n    }\n\n    /**\n     * De-initializes the checkout button by performing any necessary clean-ups.\n     *\n     * ```js\n     * await service.deinitializeButton({\n     *     methodId: 'braintreepaypal',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeButton(options: CheckoutButtonOptions): Promise<CheckoutButtonSelectors> {\n        const action = this._buttonStrategyActionCreator.deinitialize(options);\n        const queueId = `checkoutButtonStrategy:${options.methodId}`;\n\n        return this._store.dispatch(action, { queueId })\n            .then(() => this.getState());\n    }\n}\n","enum CheckoutButtonMethodType {\n    BRAINTREE_PAYPAL = 'braintreepaypal',\n    BRAINTREE_PAYPAL_CREDIT = 'braintreepaypalcredit',\n    GOOGLEPAY_BRAINTREE = 'googlepaybraintree',\n    GOOGLEPAY_STRIPE = 'googlepaystripe',\n    MASTERPASS = 'masterpass',\n    PAYPALEXPRESS = 'paypalexpress',\n}\n\nexport default CheckoutButtonMethodType;\n","export default function isElementId(id: string): boolean {\n    return /^\\w[\\w\\-\\:\\.]*$/.test(id);\n}\n","import { uniqueId } from 'lodash';\n\nimport { InvalidArgumentError } from '../error/errors';\n\nexport default function setUniqueElementId(selector: string, idPrefix: string): string[] {\n    const containers = document.querySelectorAll(selector);\n\n    if (!containers.length) {\n        throw new InvalidArgumentError(`Unable to find any element with the specified selector: ${selector}`);\n    }\n\n    return Array.prototype.slice.call(containers)\n        .map((container: HTMLElement) => {\n            if (!container.id) {\n                container.id = uniqueId(idPrefix);\n            }\n\n            return container.id;\n        });\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, empty, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator } from '../payment';\n\nimport { CheckoutButtonActionType, DeinitializeButtonAction, InitializeButtonAction } from './checkout-button-actions';\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport { CheckoutButtonStrategy } from './strategies';\n\nexport default class CheckoutButtonStrategyActionCreator {\n    constructor(\n        private _registry: Registry<CheckoutButtonStrategy>,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): ThunkAction<InitializeButtonAction, InternalCheckoutSelectors> {\n        return store => {\n            const meta = { methodId: options.methodId, containerId: options.containerId };\n\n            if (store.getState().checkoutButton.isInitialized(options.methodId, options.containerId)) {\n                return empty();\n            }\n\n            return concat(\n                of(createAction(CheckoutButtonActionType.InitializeButtonRequested, undefined, meta)),\n                this._paymentMethodActionCreator.loadPaymentMethod(options.methodId, { timeout: options.timeout, useCache: true }),\n                defer(() => this._registry.get(options.methodId).initialize(options)\n                    .then(() => createAction(CheckoutButtonActionType.InitializeButtonSucceeded, undefined, meta)))\n            ).pipe(\n                catchError(error => throwErrorAction(CheckoutButtonActionType.InitializeButtonFailed, error, meta))\n            );\n        };\n    }\n\n    deinitialize(options: CheckoutButtonOptions): ThunkAction<DeinitializeButtonAction, InternalCheckoutSelectors> {\n        return store => {\n            const meta = { methodId: options.methodId };\n\n            if (!store.getState().checkoutButton.isInitialized(options.methodId)) {\n                return empty();\n            }\n\n            return concat(\n                of(createAction(CheckoutButtonActionType.DeinitializeButtonRequested, undefined, meta)),\n                defer(() => this._registry.get(options.methodId).deinitialize()\n                    .then(() => createAction(CheckoutButtonActionType.DeinitializeButtonSucceeded, undefined, meta)))\n            ).pipe(\n                catchError(error => throwErrorAction(CheckoutButtonActionType.DeinitializeButtonFailed, error, meta))\n            );\n        };\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { pick } from 'lodash';\n\nimport { Address, LegacyAddress } from '../../../address';\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { PaymentMethod } from '../../../payment';\nimport { BraintreeAddress, BraintreeError, BraintreePaypalCheckout, BraintreeSDKCreator, BraintreeTokenizePayload } from '../../../payment/strategies/braintree';\nimport { PaypalAuthorizeData, PaypalScriptLoader } from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class BraintreePaypalButtonStrategy implements CheckoutButtonStrategy {\n    private _paypalCheckout?: BraintreePaypalCheckout;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _paypalScriptLoader: PaypalScriptLoader,\n        private _formPoster: FormPoster,\n        private _offerCredit: boolean = false\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const paypalOptions = (this._offerCredit ? options.braintreepaypalcredit : options.braintreepaypal) || {};\n        const state = this._store.getState();\n        const paymentMethod = this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paymentMethod || !paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n\n        return Promise.all([\n            this._braintreeSDKCreator.getPaypalCheckout(),\n            this._paypalScriptLoader.loadPaypal(),\n        ])\n            .then(([paypalCheckout, paypal]) => {\n                this._paypalCheckout = paypalCheckout;\n\n                const allowedSources = [];\n                const disallowedSources = [];\n\n                if (paypalOptions.allowCredit) {\n                    allowedSources.push(paypal.FUNDING.CREDIT);\n                } else {\n                    disallowedSources.push(paypal.FUNDING.CREDIT);\n                }\n\n                return paypal.Button.render({\n                    env: paymentMethod.config.testMode ? 'sandbox' : 'production',\n                    commit: paypalOptions.shouldProcessPayment ? true : false,\n                    funding: {\n                        allowed: allowedSources,\n                        disallowed: disallowedSources,\n                    },\n                    style: {\n                        shape: 'rect',\n                        label: this._offerCredit ? 'credit' : undefined,\n                        ...pick(paypalOptions.style, 'layout', 'size', 'color', 'label', 'shape', 'tagline', 'fundingicons'),\n                    },\n                    payment: () => this._setupPayment(paypalOptions.shippingAddress, paypalOptions.onPaymentError),\n                    onAuthorize: data => this._tokenizePayment(data, paypalOptions.shouldProcessPayment, paypalOptions.onAuthorizeError),\n                }, options.containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        this._paypalCheckout = undefined;\n        this._paymentMethod = undefined;\n\n        this._braintreeSDKCreator.teardown();\n\n        return Promise.resolve();\n    }\n\n    private _setupPayment(\n        address?: Address | null,\n        onError?: (error: BraintreeError | StandardError) => void\n    ): Promise<string> {\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const checkout = state.checkout.getCheckout();\n                const config = state.config.getStoreConfig();\n                const customer = state.customer.getCustomer();\n                const shippingAddress = address === undefined ?\n                    customer && customer.addresses && customer.addresses[0] :\n                    address;\n\n                if (!this._paypalCheckout) {\n                    throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!config) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                return this._paypalCheckout.createPayment({\n                    flow: 'checkout',\n                    enableShippingAddress: true,\n                    shippingAddressEditable: false,\n                    shippingAddressOverride: shippingAddress ? this._mapToBraintreeAddress(shippingAddress) : undefined,\n                    amount: checkout.outstandingBalance,\n                    currency: config.currency.code,\n                    offerCredit: this._offerCredit,\n                });\n            })\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _tokenizePayment(\n        data: PaypalAuthorizeData,\n        shouldProcessPayment?: boolean,\n        onError?: (error: BraintreeError | StandardError) => void\n    ): Promise<BraintreeTokenizePayload> {\n        if (!this._paypalCheckout || !this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        const methodId = this._paymentMethod.id;\n\n        return Promise.all([\n            this._paypalCheckout.tokenizePayment(data),\n            this._braintreeSDKCreator.getDataCollector({ paypal: true }),\n        ])\n            .then(([payload, { deviceData }]) => {\n                this._formPoster.postForm('/checkout.php', {\n                    payment_type: 'paypal',\n                    provider: methodId,\n                    action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                    nonce: payload.nonce,\n                    device_data: deviceData,\n                    shipping_address: JSON.stringify(this._mapToLegacyShippingAddress(payload)),\n                    billing_address: JSON.stringify(this._mapToLegacyBillingAddress(payload)),\n                });\n\n                return payload;\n            })\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _mapToLegacyShippingAddress(payload: BraintreeTokenizePayload): Partial<LegacyAddress> {\n        const shippingAddress = payload.details.shippingAddress;\n        const recipientName = shippingAddress && shippingAddress.recipientName || '';\n        const [firstName, lastName] = recipientName.split(' ');\n\n        return {\n            email: payload.details.email,\n            first_name: firstName,\n            last_name: lastName,\n            phone_number: shippingAddress && shippingAddress.phone || payload.details.phone,\n            address_line_1: shippingAddress && shippingAddress.line1,\n            address_line_2: shippingAddress && shippingAddress.line2,\n            city: shippingAddress && shippingAddress.city,\n            state: shippingAddress && shippingAddress.state,\n            country_code: shippingAddress && shippingAddress.countryCode,\n            postal_code: shippingAddress && shippingAddress.postalCode,\n        };\n    }\n\n    private _mapToLegacyBillingAddress(payload: BraintreeTokenizePayload): Partial<LegacyAddress> {\n        const billingAddress = payload.details.billingAddress;\n        const shippingAddress = payload.details.shippingAddress;\n\n        if (billingAddress) {\n            return {\n                email: payload.details.email,\n                first_name: billingAddress.firstName || payload.details.firstName,\n                last_name: billingAddress.lastName || payload.details.lastName,\n                phone_number: billingAddress.phone || payload.details.phone,\n                address_line_1: billingAddress.line1,\n                address_line_2: billingAddress.line2,\n                city: billingAddress.city,\n                state: billingAddress.state,\n                country_code: billingAddress.countryCode,\n                postal_code: billingAddress.postalCode,\n            };\n        }\n\n        return {\n            email: payload.details.email,\n            first_name: payload.details.firstName,\n            last_name: payload.details.lastName,\n            phone_number: payload.details.phone,\n            address_line_1: shippingAddress && shippingAddress.line1,\n            address_line_2: shippingAddress && shippingAddress.line2,\n            city: shippingAddress && shippingAddress.city,\n            state: shippingAddress && shippingAddress.state,\n            country_code: shippingAddress && shippingAddress.countryCode,\n            postal_code: shippingAddress && shippingAddress.postalCode,\n        };\n    }\n\n    private _mapToBraintreeAddress(address: Address): BraintreeAddress {\n        return {\n            line1: address.address1,\n            line2: address.address2,\n            city: address.city,\n            state: address.stateOrProvinceCode,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phone,\n            recipientName: `${address.firstName} ${address.lastName}`,\n        };\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { GooglePayPaymentProcessor } from '../../../payment/strategies/googlepay';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class GooglePayButtonStrategy implements CheckoutButtonStrategy {\n    private _methodId?: string;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _formPoster: FormPoster,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId } = options;\n\n        if (!containerId || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"containerId\" argument is not provided.');\n        }\n\n        this._methodId = methodId;\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(() => this._googlePayPaymentProcessor.initialize(this._getMethodId()))\n            .then(() => {\n                this._walletButton = this._createSignInButton(containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._walletButton && this._walletButton.parentNode) {\n            this._walletButton.parentNode.removeChild(this._walletButton);\n            this._walletButton = undefined;\n        }\n\n        return this._googlePayPaymentProcessor.deinitialize();\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.getElementById(containerId);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const googlePayButton = this._googlePayPaymentProcessor.createButton(this._handleWalletButtonClick);\n\n        container.appendChild(googlePayButton);\n\n        return googlePayButton;\n    }\n\n    private _getMethodId(): string {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._methodId;\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<void> {\n        event.preventDefault();\n\n        return this._googlePayPaymentProcessor.displayWallet()\n            .then(paymentData => this._googlePayPaymentProcessor.handleSuccess(paymentData)\n            .then(() => {\n                if (paymentData.shippingAddress) {\n                    this._googlePayPaymentProcessor.updateShippingAddress(paymentData.shippingAddress);\n                }\n            }))\n            .then(() => this._onPaymentSelectComplete())\n            .catch(error => this._onError(error));\n    }\n\n    private _onPaymentSelectComplete(): void {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n        });\n    }\n\n    private _onError(error?: Error): void {\n        if (error && error.message !== 'CANCELED') {\n            throw error;\n        }\n    }\n}\n","import { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType\n} from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { getCallbackUrl, Masterpass, MasterpassCheckoutOptions, MasterpassScriptLoader } from '../../../payment/strategies/masterpass';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class MasterpassButtonStrategy implements CheckoutButtonStrategy {\n    private _masterpassClient?: Masterpass;\n    private _methodId?: string;\n    private _signInButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId } = options;\n\n        if (!containerId || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"containerId\" argument is not provided.');\n        }\n\n        this._methodId = methodId;\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!paymentMethod || !paymentMethod.initializationData.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._masterpassScriptLoader.load(paymentMethod.config.testMode);\n            })\n            .then(masterpass => {\n                this._masterpassClient = masterpass;\n                this._signInButton = this._createSignInButton(containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._signInButton && this._signInButton.parentNode) {\n            this._signInButton.removeEventListener('click', this._handleWalletButtonClick);\n            this._signInButton.parentNode.removeChild(this._signInButton);\n            this._signInButton = undefined;\n        }\n\n        return Promise.resolve();\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const buttonContainer = document.getElementById(containerId);\n\n        if (!buttonContainer) {\n            throw new Error('Need a container to place the button');\n        }\n\n        const button = document.createElement('input');\n\n        button.type = 'image';\n        button.src = 'https://static.masterpass.com/dyn/img/btn/global/mp_chk_btn_160x037px.svg';\n        buttonContainer.appendChild(button);\n\n        button.addEventListener('click', this._handleWalletButtonClick);\n\n        return button;\n    }\n\n    private _createMasterpassPayload(): MasterpassCheckoutOptions {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const paymentMethod = this._methodId ? state.paymentMethods.getPaymentMethod(this._methodId) : null;\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return {\n            checkoutId: paymentMethod.initializationData.checkoutId,\n            allowedCardTypes: paymentMethod.initializationData.allowedCardTypes,\n            amount: checkout.cart.cartAmount.toString(),\n            currency: checkout.cart.currency.code,\n            cartId: checkout.cart.id,\n            suppressShippingAddress: false,\n            callbackUrl: getCallbackUrl('cart'),\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(): void {\n        if (!this._masterpassClient) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        this._masterpassClient.checkout(this._createMasterpassPayload());\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { pick } from 'lodash';\n\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { INTERNAL_USE_ONLY } from '../../../common/http-request';\nimport { PaymentMethod } from '../../../payment';\nimport { PaypalActions, PaypalAuthorizeData, PaypalClientToken, PaypalScriptLoader } from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class PaypalButtonStrategy implements CheckoutButtonStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paypalScriptLoader: PaypalScriptLoader,\n        private _formPoster: FormPoster,\n        private _host: string = ''\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const paypalOptions = options.paypal;\n        const state = this._store.getState();\n        const paymentMethod = this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paypalOptions) {\n            throw new InvalidArgumentError();\n        }\n\n        return this._paypalScriptLoader.loadPaypal()\n            .then(paypal => {\n                if (!paymentMethod || !paymentMethod.config.merchantId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const merchantId = paymentMethod.config.merchantId;\n                const env = paymentMethod.config.testMode ? 'sandbox' : 'production';\n                const clientToken: PaypalClientToken = { [env]: paypalOptions.clientId };\n\n                const allowedSources = [];\n                const disallowedSources = [];\n\n                if (paypalOptions.allowCredit) {\n                    allowedSources.push(paypal.FUNDING.CREDIT);\n                } else {\n                    disallowedSources.push(paypal.FUNDING.CREDIT);\n                }\n\n                return paypal.Button.render({\n                    env,\n                    client: clientToken,\n                    commit: paypalOptions.shouldProcessPayment,\n                    funding: {\n                        allowed: allowedSources,\n                        disallowed: disallowedSources,\n                    },\n                    style: {\n                        shape: 'rect',\n                        ...pick(paypalOptions.style, 'layout', 'size', 'color', 'label', 'shape', 'tagline', 'fundingicons'),\n                    },\n                    payment: (_, actions) => this._setupPayment(merchantId, actions, paypalOptions.onPaymentError),\n                    onAuthorize: (data, actions) => this._tokenizePayment(data, actions, paypalOptions.shouldProcessPayment, paypalOptions.onAuthorizeError),\n                }, options.containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve();\n    }\n\n    private _setupPayment(merchantId: string, actions?: PaypalActions, onError?: (error: StandardError) => void): Promise<string> {\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const cart = state.cart.getCart();\n                const cartId = cart ? cart.id : '';\n\n                return actions.request.post(`${this._host}/api/storefront/payment/paypalexpress`, { merchantId, cartId }, {\n                    headers: {\n                        'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                    },\n                });\n            })\n            .then(res => res.id)\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _tokenizePayment(\n        data: PaypalAuthorizeData,\n        actions?: PaypalActions,\n        shouldProcessPayment?: boolean,\n        _onError?: (error: StandardError) => void // FIXME: This parameter seems to be unused\n    ): Promise<void> {\n        if (!this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!data.paymentID || !data.payerID) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        const methodId = this._paymentMethod.id;\n\n        return actions.payment.get(data.paymentID).then(payload => {\n            this._formPoster.postForm('/checkout.php', {\n                payment_type: 'paypal',\n                provider: methodId,\n                action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                paymentId: data.paymentID,\n                payerId: data.payerID,\n                payerInfo: JSON.stringify(payload.payer.payer_info),\n            });\n        });\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { createCheckoutStore } from '../checkout';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\n\nimport CheckoutButtonInitializer from './checkout-button-initializer';\nimport CheckoutButtonInitializerOptions from './checkout-button-initializer-options';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonRegistry from './create-checkout-button-registry';\n\n/**\n * Creates an instance of `CheckoutButtonInitializer`.\n *\n * @remarks\n * ```js\n * const initializer = createCheckoutButtonInitializer();\n *\n * initializer.initializeButton({\n *     methodId: 'braintreepaypal',\n *     braintreepaypal: {\n *         container: '#checkoutButton',\n *     },\n * });\n * ```\n *\n * @alpha\n * Please note that `CheckoutButtonInitializer` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutButtonInitializer`.\n */\nexport default function createCheckoutButtonInitializer(\n    options?: CheckoutButtonInitializerOptions\n): CheckoutButtonInitializer {\n    const host = options && options.host;\n    const store = createCheckoutStore();\n    const requestSender = createRequestSender({ host });\n    const formPoster = createFormPoster({ host });\n\n    return new CheckoutButtonInitializer(\n        store,\n        new CheckoutButtonStrategyActionCreator(\n            createCheckoutButtonRegistry(store, requestSender, formPoster, host),\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender))\n        )\n    );\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { BraintreeScriptLoader, BraintreeSDKCreator } from '../payment/strategies/braintree';\nimport { createGooglePayPaymentProcessor, GooglePayBraintreeInitializer, GooglePayStripeInitializer } from '../payment/strategies/googlepay';\nimport { MasterpassScriptLoader } from '../payment/strategies/masterpass';\nimport { PaypalScriptLoader } from '../payment/strategies/paypal';\n\nimport { CheckoutButtonMethodType, CheckoutButtonStrategy } from './strategies';\nimport { BraintreePaypalButtonStrategy } from './strategies/braintree';\nimport { GooglePayButtonStrategy } from './strategies/googlepay';\nimport { MasterpassButtonStrategy } from './strategies/masterpass';\nimport { PaypalButtonStrategy } from './strategies/paypal';\n\nexport default function createCheckoutButtonRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender,\n    formPoster: FormPoster,\n    host?: string\n): Registry<CheckoutButtonStrategy, CheckoutButtonMethodType> {\n    const registry = new Registry<CheckoutButtonStrategy, CheckoutButtonMethodType>();\n    const scriptLoader = getScriptLoader();\n    const checkoutActionCreator = new CheckoutActionCreator(\n        new CheckoutRequestSender(requestSender),\n        new ConfigActionCreator(new ConfigRequestSender(requestSender))\n    );\n\n    registry.register(CheckoutButtonMethodType.BRAINTREE_PAYPAL, () =>\n        new BraintreePaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader)),\n            new PaypalScriptLoader(scriptLoader),\n            formPoster\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.BRAINTREE_PAYPAL_CREDIT, () =>\n        new BraintreePaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader)),\n            new PaypalScriptLoader(scriptLoader),\n            formPoster,\n            true\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.MASTERPASS, () =>\n        new MasterpassButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        ));\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_BRAINTREE, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_STRIPE, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.PAYPALEXPRESS, () =>\n        new PaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new PaypalScriptLoader(scriptLoader),\n            formPoster,\n            host\n        )\n    );\n\n    return registry;\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport enum NotEmbeddableErrorType {\n    MissingContainer = 'missing_container',\n    MissingContent = 'missing_content',\n    UnknownError = 'unknown_error',\n}\n\n/**\n * Throw this error if we are not able to embed the checkout form as an iframe.\n * This can be due to the fact that the provided container ID is invalid, or the\n * checkout form fails to load inside the iframe. It can also be due to an\n * unknown reason.\n */\nexport default class NotEmbeddableError extends StandardError {\n    constructor(\n        message?: string,\n        public subtype: NotEmbeddableErrorType = NotEmbeddableErrorType.UnknownError\n    ) {\n        super(message || 'Unable to embed the checkout form.');\n\n        this.name = 'NotEmbeddableError';\n        this.type = 'not_embeddable';\n    }\n}\n","import { default as storage } from 'local-storage-fallback';\n\nexport default class BrowserStorage {\n    constructor(\n        private _namespace: string\n    ) {}\n\n    getItem<TValue = any>(key: string): TValue | null {\n        const rawValue = storage.getItem(this.withNamespace(key));\n\n        if (rawValue === null) {\n            return null;\n        }\n\n        try {\n            return JSON.parse(rawValue);\n        } catch (error) {\n            // Clean up invalid values\n            this.removeItem(this.withNamespace(key));\n\n            return null;\n        }\n    }\n\n    getItemOnce<TValue = any>(key: string): TValue | null {\n        const value = this.getItem(key);\n\n        this.removeItem(key);\n\n        return value;\n    }\n\n    setItem<TValue = any>(key: string, value: TValue): void {\n        return storage.setItem(this.withNamespace(key), JSON.stringify(value));\n    }\n\n    removeItem(key: string): void {\n        return storage.removeItem(this.withNamespace(key));\n    }\n\n    private withNamespace(key: string): string {\n        return `${this._namespace}.${key}`;\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../../common/error';\nimport { RequestError } from '../../common/error/errors';\n\n/**\n * Throw this error we are not able to sign in a shopper because the provided\n * login token is invalid.\n */\nexport default class InvalidLoginTokenError extends RequestError {\n    constructor(response: Response<InternalErrorResponseBody>) {\n        super(response, { message: response.body.title });\n\n        this.name = 'InvalidLoginTokenError';\n        this.type = 'invalid_login_token';\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport { IFrameComponent } from '../common/iframe';\nimport { BrowserStorage } from '../common/storage';\nimport { parseUrl } from '../common/url';\nimport { bindDecorator as bind } from '../common/utility';\n\nimport EmbeddedCheckoutError from './embedded-checkout-error';\nimport { EmbeddedCheckoutEventMap, EmbeddedCheckoutEventType } from './embedded-checkout-events';\nimport EmbeddedCheckoutOptions from './embedded-checkout-options';\nimport { InvalidLoginTokenError, NotEmbeddableError, NotEmbeddableErrorType } from './errors';\nimport { EmbeddedContentEvent, EmbeddedContentEventType } from './iframe-content/embedded-content-events';\nimport IframeEventListener from './iframe-event-listener';\nimport IframeEventPoster from './iframe-event-poster';\nimport LoadingIndicator from './loading-indicator';\nimport ResizableIframeCreator from './resizable-iframe-creator';\n\nconst CAN_RETRY_ALLOW_COOKIE = 'canRetryAllowCookie';\nconst IS_COOKIE_ALLOWED_KEY = 'isCookieAllowed';\n\n@bind\nexport default class EmbeddedCheckout {\n    private _iframe?: IFrameComponent;\n    private _isAttached: boolean;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _iframeCreator: ResizableIframeCreator,\n        private _messageListener: IframeEventListener<EmbeddedCheckoutEventMap>,\n        private _messagePoster: IframeEventPoster<EmbeddedContentEvent>,\n        private _loadingIndicator: LoadingIndicator,\n        private _requestSender: RequestSender,\n        private _storage: BrowserStorage,\n        private _location: Location,\n        private _options: EmbeddedCheckoutOptions\n    ) {\n        this._isAttached = false;\n\n        if (this._options.onComplete) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutComplete, this._options.onComplete);\n        }\n\n        if (this._options.onError) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutError, this._options.onError);\n        }\n\n        if (this._options.onLoad) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutLoaded, this._options.onLoad);\n        }\n\n        if (this._options.onFrameLoad) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.FrameLoaded, this._options.onFrameLoad);\n        }\n\n        if (this._options.onSignOut) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.SignedOut, this._options.onSignOut);\n        }\n\n        this._messageListener.addListener(EmbeddedCheckoutEventType.FrameLoaded, () => this._configureStyles());\n    }\n\n    attach(): Promise<this> {\n        if (this._isAttached) {\n            return Promise.resolve(this);\n        }\n\n        this._isAttached = true;\n        this._messageListener.listen();\n        this._loadingIndicator.show(this._options.containerId);\n\n        return this._allowCookie()\n            .then(() => this._attemptLogin())\n            .then(url => this._iframeCreator.createFrame(url, this._options.containerId))\n            .then(iframe => {\n                this._iframe = iframe;\n\n                this._configureStyles();\n                this._loadingIndicator.hide();\n            })\n            .catch(error => {\n                this._isAttached = false;\n\n                return this._retryAllowCookie(error)\n                    .catch(() => {\n                        this._messageListener.trigger({\n                            type: EmbeddedCheckoutEventType.FrameError,\n                            payload: error,\n                        });\n\n                        this._loadingIndicator.hide();\n\n                        throw error;\n                    });\n            })\n            .then(() => this);\n    }\n\n    detach(): void {\n        if (!this._isAttached) {\n            return;\n        }\n\n        this._isAttached = false;\n        this._messageListener.stopListen();\n\n        if (this._iframe && this._iframe.parentNode) {\n            this._iframe.parentNode.removeChild(this._iframe);\n            this._iframe.iFrameResizer.close();\n        }\n    }\n\n    private _configureStyles(): void {\n        if (!this._iframe || !this._iframe.contentWindow || !this._options.styles) {\n            return;\n        }\n\n        this._messagePoster.setTarget(this._iframe.contentWindow);\n\n        this._messagePoster.post({\n            type: EmbeddedContentEventType.StyleConfigured,\n            payload: this._options.styles,\n        });\n    }\n\n    private _attemptLogin(): Promise<string> {\n        if (!/^\\/login\\/token/.test(parseUrl(this._options.url).pathname)) {\n            return Promise.resolve(this._options.url);\n        }\n\n        return this._requestSender.post(this._options.url)\n            .then(({ body: { redirectUrl } }) => redirectUrl)\n            .catch(response => Promise.reject(new InvalidLoginTokenError(response)));\n    }\n\n    /**\n     * This workaround is required for certain browsers (namely Safari) that\n     * prevent session cookies to be set for a third party website unless the\n     * user has recently visited such website. Therefore, before we attempt to\n     * login or set an active cart in the session, we need to first redirect the\n     * user to the domain of Embedded Checkout.\n     */\n    private _allowCookie(): Promise<void> {\n        if (this._storage.getItem(IS_COOKIE_ALLOWED_KEY)) {\n            // It could be possible that the flag is set to true but the browser\n            // has already removed the permission to store cookie. In that case,\n            // we should try to redirect the user again.\n            this._storage.setItem(CAN_RETRY_ALLOW_COOKIE, true);\n\n            return Promise.resolve();\n        }\n\n        this._storage.removeItem(CAN_RETRY_ALLOW_COOKIE);\n        this._storage.setItem(IS_COOKIE_ALLOWED_KEY, true);\n\n        const { origin } = parseUrl(this._options.url);\n        const redirectUrl = `${origin}/embedded-checkout/allow-cookie?returnUrl=${encodeURIComponent(this._location.href)}`;\n\n        document.body.style.visibility = 'hidden';\n        this._location.replace(redirectUrl);\n\n        return new Promise<never>(() => {});\n    }\n\n    private _retryAllowCookie(error: EmbeddedCheckoutError): Promise<void> {\n        const canRetry = (\n            this._storage.getItem(CAN_RETRY_ALLOW_COOKIE) &&\n            error instanceof NotEmbeddableError &&\n            error.subtype === NotEmbeddableErrorType.MissingContent\n        );\n\n        if (!canRetry) {\n            return Promise.reject();\n        }\n\n        this._storage.removeItem(CAN_RETRY_ALLOW_COOKIE);\n        this._storage.removeItem(IS_COOKIE_ALLOWED_KEY);\n\n        return this._allowCookie();\n    }\n}\n","import { LoadingIndicatorStyles } from './embedded-checkout-styles';\n\nconst DEFAULT_STYLES: LoadingIndicatorStyles = {\n    size: 70,\n    color: '#d9d9d9',\n    backgroundColor: '#ffffff',\n};\n\nconst ROTATION_ANIMATION = 'embedded-checkout-loading-indicator-rotation';\n\nexport default class LoadingIndicator {\n    private _container: HTMLElement;\n    private _indicator: HTMLElement;\n    private _styles: LoadingIndicatorStyles;\n\n    constructor(\n        options?: { styles?: LoadingIndicatorStyles }\n    ) {\n        this._styles = { ...DEFAULT_STYLES, ...options && options.styles };\n\n        this._defineAnimation();\n\n        this._container = this._buildContainer();\n        this._indicator = this._buildIndicator();\n\n        this._container.appendChild(this._indicator);\n    }\n\n    show(parentId?: string): void {\n        if (parentId) {\n            const parent = document.getElementById(parentId);\n\n            if (!parent) {\n                throw new Error('Unable to attach the loading indicator because the parent ID is not valid.');\n            }\n\n            parent.appendChild(this._container);\n        }\n\n        this._container.style.visibility = 'visible';\n        this._container.style.opacity = '1';\n    }\n\n    hide(): void {\n        const handleTransitionEnd = () => {\n            this._container.style.visibility = 'hidden';\n\n            this._container.removeEventListener('transitionend', handleTransitionEnd);\n        };\n\n        this._container.addEventListener('transitionend', handleTransitionEnd);\n\n        this._container.style.opacity = '0';\n    }\n\n    private _buildContainer(): HTMLElement {\n        const container = document.createElement('div');\n\n        container.style.display = 'block';\n        container.style.bottom = '0';\n        container.style.left = '0';\n        container.style.height = '100%';\n        container.style.width = '100%';\n        container.style.position = 'absolute';\n        container.style.right = '0';\n        container.style.top = '0';\n        container.style.transition = 'all 250ms ease-out';\n        container.style.opacity = '0';\n\n        return container;\n    }\n\n    private _buildIndicator(): HTMLElement {\n        const indicator = document.createElement('div');\n\n        indicator.style.display = 'block';\n        indicator.style.width = `${this._styles.size}px`;\n        indicator.style.height = `${this._styles.size}px`;\n        indicator.style.borderRadius = `${this._styles.size}px`;\n        indicator.style.border = 'solid 1px';\n        indicator.style.borderColor = `${this._styles.backgroundColor} ${this._styles.backgroundColor} ${this._styles.color} ${this._styles.color}`;\n        indicator.style.margin = '0 auto';\n        indicator.style.position = 'absolute';\n        indicator.style.left = '0';\n        indicator.style.right = '0';\n        indicator.style.top = '50%';\n        indicator.style.transform = 'translateY(-50%) rotate(0deg)';\n        indicator.style.transformStyle = 'preserve-3d';\n        indicator.style.animation = `${ROTATION_ANIMATION} 500ms infinite cubic-bezier(0.69, 0.31, 0.56, 0.83)`;\n\n        return indicator;\n    }\n\n    private _defineAnimation(): void {\n        // In order to define CSS animation, we need to insert a stylesheet into the host frame.\n        // We only have to do it once.\n        if (document.getElementById(ROTATION_ANIMATION)) {\n            return;\n        }\n\n        const style = document.createElement('style');\n\n        style.id = ROTATION_ANIMATION;\n\n        document.head.appendChild(style);\n\n        if (style.sheet instanceof CSSStyleSheet) {\n            // We need to provide the 2nd parameter for IE11, even though it is\n            // 0 by default for all other browsers.\n            style.sheet.insertRule(`\n                @keyframes ${ROTATION_ANIMATION} {\n                    0% { transform: translateY(-50%) rotate(0deg); }\n                    100% { transform: translateY(-50%) rotate(360deg); }\n                }\n            `, 0);\n        }\n    }\n}\n","import { iframeResizer, IFrameComponent } from '../common/iframe';\nimport { parseUrl } from '../common/url';\n\nimport { EmbeddedCheckoutEventType } from './embedded-checkout-events';\nimport { NotEmbeddableError, NotEmbeddableErrorType } from './errors';\nimport isIframeEvent from './is-iframe-event';\n\nexport default class ResizableIframeCreator {\n    constructor(\n        private _options?: { timeout: number }\n    ) {}\n\n    createFrame(src: string, containerId: string): Promise<IFrameComponent> {\n        const container = document.getElementById(containerId);\n        const { timeout = 60000 } = this._options || {};\n\n        if (!container) {\n            throw new NotEmbeddableError(\n                'Unable to embed the iframe because the container element could not be found.',\n                NotEmbeddableErrorType.MissingContainer\n            );\n        }\n\n        const iframe = document.createElement('iframe');\n\n        iframe.src = src;\n        iframe.style.border = 'none';\n        iframe.style.display = 'none';\n        iframe.style.width = '100%';\n        iframe.allowPaymentRequest = true;\n\n        container.appendChild(iframe);\n\n        return this._toResizableFrame(iframe, timeout)\n            .catch(error => {\n                container.removeChild(iframe);\n\n                throw error;\n            });\n    }\n\n    private _toResizableFrame(iframe: HTMLIFrameElement, timeoutInterval: number): Promise<IFrameComponent> {\n        // Can't simply listen to `load` event because it always gets triggered even if there's an error.\n        // Instead, listen to the `load` inside the iframe and let the parent frame know when it happens.\n        return new Promise((resolve, reject) => {\n            const timeout = window.setTimeout(() => {\n                reject(new NotEmbeddableError('Unable to embed the iframe because the content could not be loaded.'));\n            }, timeoutInterval);\n\n            const handleMessage = (event: MessageEvent) => {\n                if (event.origin !== parseUrl(iframe.src).origin) {\n                    return;\n                }\n\n                if (isIframeEvent(event.data, EmbeddedCheckoutEventType.FrameError)) {\n                    teardown();\n                    reject(new NotEmbeddableError(event.data.payload.message, NotEmbeddableErrorType.MissingContent));\n                }\n\n                if (isIframeEvent(event.data, EmbeddedCheckoutEventType.FrameLoaded)) {\n                    iframe.style.display = '';\n\n                    const contentId = event.data.payload && event.data.payload.contentId;\n                    const iframes = iframeResizer({\n                        scrolling: false,\n                        sizeWidth: false,\n                        heightCalculationMethod: contentId ? 'taggedElement' : 'lowestElement',\n                    }, iframe);\n\n                    teardown();\n                    resolve(iframes[iframes.length - 1]);\n                }\n            };\n\n            const teardown = () => {\n                window.removeEventListener('message', handleMessage);\n                window.clearTimeout(timeout);\n            };\n\n            window.addEventListener('message', handleMessage);\n        });\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { BrowserStorage } from '../common/storage';\nimport { parseUrl } from '../common/url';\n\nimport EmbeddedCheckout from './embedded-checkout';\nimport { EmbeddedCheckoutEventMap } from './embedded-checkout-events';\nimport EmbeddedCheckoutOptions from './embedded-checkout-options';\nimport { EmbeddedContentEvent } from './iframe-content/embedded-content-events';\nimport IframeEventListener from './iframe-event-listener';\nimport IframeEventPoster from './iframe-event-poster';\nimport LoadingIndicator from './loading-indicator';\nimport ResizableIframeCreator from './resizable-iframe-creator';\n\nconst STORAGE_PREFIX = 'BigCommerce.EmbeddedCheckout';\n\n/**\n * Embed the checkout form in an iframe.\n *\n * @remarks\n * Once the iframe is embedded, it will automatically resize according to the\n * size of the checkout form. It will also notify the parent window when certain\n * events have occurred. i.e.: when the form is loaded and ready to be used.\n *\n * ```js\n * embedCheckout({\n *     url: 'https://checkout/url',\n *     containerId: 'container-id',\n * });\n * ```\n *\n * @param options - Options for embedding the checkout form.\n * @returns A promise that resolves to an instance of `EmbeddedCheckout`.\n */\nexport default function embedCheckout(options: EmbeddedCheckoutOptions): Promise<EmbeddedCheckout> {\n    const origin = parseUrl(options.url).origin;\n    const embeddedCheckout = new EmbeddedCheckout(\n        new ResizableIframeCreator(),\n        new IframeEventListener<EmbeddedCheckoutEventMap>(origin),\n        new IframeEventPoster<EmbeddedContentEvent>(origin),\n        new LoadingIndicator({ styles: options.styles && options.styles.loadingIndicator }),\n        createRequestSender(),\n        new BrowserStorage(STORAGE_PREFIX),\n        window.location,\n        options\n    );\n\n    return embeddedCheckout.attach();\n}\n","export interface RootCacheKeyMap {\n    maps: ChildCacheKeyMap[];\n}\n\nexport interface IntermediateCacheKeyMap {\n    maps: ChildCacheKeyMap[];\n    parentMap: RootCacheKeyMap | IntermediateCacheKeyMap;\n    usedCount: number;\n    value: any;\n}\n\nexport interface TerminalCacheKeyMap extends IntermediateCacheKeyMap {\n    cacheKey: string;\n}\n\nexport type ChildCacheKeyMap = IntermediateCacheKeyMap | TerminalCacheKeyMap;\n\nexport function isTerminalCacheKeyMap(map: ChildCacheKeyMap): map is TerminalCacheKeyMap {\n    return map.hasOwnProperty('cacheKey');\n}\n\nexport function isRootCacheKeyMap(map: RootCacheKeyMap | ChildCacheKeyMap): map is RootCacheKeyMap {\n    return map.hasOwnProperty('parentMap');\n}\n","import { noop } from 'lodash';\nimport * as shallowEqual from 'shallowequal';\n\nimport { isRootCacheKeyMap, isTerminalCacheKeyMap, ChildCacheKeyMap, IntermediateCacheKeyMap, RootCacheKeyMap, TerminalCacheKeyMap } from './cache-key-maps';\n\nexport interface CacheKeyResolverOptions {\n    maxSize?: number;\n    onExpire?(key: string): void;\n    isEqual?(valueA: any, valueB: any): boolean;\n}\n\ninterface ResolveResult {\n    index: number;\n    parentMap: RootCacheKeyMap | IntermediateCacheKeyMap;\n    map?: TerminalCacheKeyMap;\n}\n\nexport default class CacheKeyResolver {\n    private _lastId = 0;\n    private _map: RootCacheKeyMap = { maps: [] };\n    private _usedMaps: TerminalCacheKeyMap[] = [];\n    private _options: Required<CacheKeyResolverOptions>;\n\n    constructor(options?: CacheKeyResolverOptions) {\n        this._options = {\n            maxSize: 0,\n            isEqual: shallowEqual,\n            onExpire: noop,\n            ...options,\n        };\n    }\n\n    getKey(...args: any[]): string {\n        const result = this._resolveMap(...args);\n        const { index, parentMap } = result;\n        let { map } = result;\n\n        if (map && map.cacheKey) {\n            map.usedCount++;\n        } else {\n            map = this._generateMap(parentMap, args.slice(index));\n        }\n\n        // Keep track of the least used map so we can remove it if the size of\n        // the stack exceeds the maximum size.\n        this._removeLeastUsedMap(map);\n\n        return map.cacheKey;\n    }\n\n    getUsedCount(...args: any[]): number {\n        const { map } = this._resolveMap(...args);\n\n        return map ? map.usedCount : 0;\n    }\n\n    private _resolveMap(...args: any[]): ResolveResult {\n        let index = 0;\n        let parentMap = this._map;\n\n        // Traverse the tree to find the linked list of maps that match the\n        // arguments of the call. Each intermediate or terminal map contains a\n        // value that could be used to match with the arguments. The last map in\n        // the list (the terminal) should contain a cache key. If it can does\n        // not exist, we will return a falsy value so that the caller could\n        // handle and generate a new cache key.\n        while (parentMap.maps.length) {\n            let isMatched = false;\n\n            for (let mapIndex = 0; mapIndex < parentMap.maps.length; mapIndex++) {\n                const map = parentMap.maps[mapIndex];\n\n                if (!this._options.isEqual(map.value, args[index])) {\n                    continue;\n                }\n\n                // Move the most recently used map to the top of the stack for\n                // quicker access\n                parentMap.maps.unshift(...parentMap.maps.splice(mapIndex, 1));\n\n                if ((args.length === 0 || index === args.length - 1) && isTerminalCacheKeyMap(map)) {\n                    return { index, map, parentMap };\n                }\n\n                isMatched = true;\n                parentMap = map;\n                index++;\n\n                break;\n            }\n\n            if (!isMatched) {\n                break;\n            }\n        }\n\n        return { index, parentMap };\n    }\n\n    private _generateMap(parent: RootCacheKeyMap | IntermediateCacheKeyMap, args: any[]): TerminalCacheKeyMap {\n        let index = 0;\n        let parentMap = parent;\n        let map: IntermediateCacheKeyMap;\n\n        do {\n            map = {\n                maps: [],\n                parentMap,\n                usedCount: 1,\n                value: args[index],\n            };\n\n            // Continue to build the tree of maps so that it could be resolved\n            // next time when the function is called with the same set of\n            // arguments.\n            parentMap.maps.unshift(map);\n\n            parentMap = map;\n            index++;\n        } while (index < args.length);\n\n        const terminalMap = map as TerminalCacheKeyMap;\n\n        terminalMap.cacheKey = `${++this._lastId}`;\n\n        return terminalMap;\n    }\n\n    private _removeLeastUsedMap(recentlyUsedMap: TerminalCacheKeyMap): void {\n        if (!this._options.maxSize) {\n            return;\n        }\n\n        const index = this._usedMaps.indexOf(recentlyUsedMap);\n\n        this._usedMaps.splice(\n            index === -1 ? 0 : index,\n            index === -1 ? 0 : 1,\n            recentlyUsedMap\n        );\n\n        if (this._usedMaps.length <= this._options.maxSize) {\n            return;\n        }\n\n        const map = this._usedMaps.pop();\n\n        if (!map) {\n            return;\n        }\n\n        this._removeMap(map);\n        this._options.onExpire(map.cacheKey);\n    }\n\n    private _removeMap(map: ChildCacheKeyMap): void {\n        if (!map.parentMap) {\n            return;\n        }\n\n        map.parentMap.maps.splice(map.parentMap.maps.indexOf(map), 1);\n\n        if (isRootCacheKeyMap(map.parentMap)) {\n            return;\n        }\n\n        this._removeMap(map.parentMap);\n    }\n}\n","module.exports = require(\"@bigcommerce/bigpay-client\");","module.exports = require(\"messageformat\");","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\n/**\n * Throw this error if a request fails to complete within its required timeframe\n * because of a network issue.\n */\nexport default class TimeoutError extends RequestError<{}> {\n    constructor(response?: Response) {\n        super(response, {\n            message: 'The request has timed out or aborted.',\n        });\n\n        this.name = 'TimeoutError';\n        this.type = 'timeout';\n    }\n}\n","import { createSelector as defaultSelectorCreator } from 'reselect';\n\nimport withMemoizedCombiner from './with-memoized-combiner';\n\n/**\n * This is a decorated version of Reselect's default `createSelector` function.\n * If the return value of the combiner function is a function, it will create a\n * memorized version of that function and return it instead.\n */\nexport default withMemoizedCombiner(defaultSelectorCreator);\n","import { uniq } from 'lodash';\n\nexport default function joinIncludes(includes: string[]): string {\n    return uniq(includes).join(',');\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { cachableAction, ActionOptions } from '../common/data-store';\nimport { RequestOptions } from '../common/http-request';\n\nimport { ConfigRequestSender } from '.';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\n\nexport default class ConfigActionCreator {\n    constructor(\n        private _configRequestSender: ConfigRequestSender\n    ) {}\n\n    @cachableAction\n    loadConfig(options?: RequestOptions & ActionOptions): Observable<LoadConfigAction> {\n        return Observable.create((observer: Observer<LoadConfigAction>) => {\n            observer.next(createAction(ConfigActionType.LoadConfigRequested));\n\n            this._configRequestSender.loadConfig(options)\n                .then(response => {\n                    observer.next(createAction(ConfigActionType.LoadConfigSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConfigActionType.LoadConfigFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions } from '../common/http-request';\n\nimport Config from './config';\n\nexport default class ConfigRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadConfig({ timeout }: RequestOptions = {}): Promise<Response<Config>> {\n        const url = '/api/storefront/checkout-settings';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../address';\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport { BillingAddressUpdateRequestBody } from './billing-address';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ].join(','),\n};\n\nexport default class BillingAddressRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createAddress(checkoutId: string, address: Partial<AddressRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, { body: address, params: DEFAULT_PARAMS, headers, timeout });\n    }\n\n    updateAddress(checkoutId: string, address: Partial<BillingAddressUpdateRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const { id, ...body } = address;\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, { params: DEFAULT_PARAMS, body, headers, timeout });\n    }\n}\n","import { InvalidArgumentError } from '../error/errors';\n\nexport default class Registry<T, K extends string = string> {\n    private _factories: { [key: string]: Factory<T> };\n    private _instances: { [key: string]: T };\n    private _options: RegistryOptions;\n\n    constructor(options?: RegistryOptions) {\n        this._factories = {};\n        this._instances = {};\n        this._options = { defaultToken: 'default', ...options };\n    }\n\n    get(token?: K, cacheToken?: string): T {\n        try {\n            return this._getInstance(\n                token || this._options.defaultToken,\n                cacheToken || token || this._options.defaultToken\n            );\n        } catch (error) {\n            return this._getInstance(\n                this._options.defaultToken,\n                cacheToken || this._options.defaultToken\n            );\n        }\n    }\n\n    register(token: K, factory: Factory<T>): void {\n        if (this._hasFactory(token)) {\n            throw new InvalidArgumentError(`'${token}' is already registered.`);\n        }\n\n        this._factories[token] = factory;\n    }\n\n    protected _hasFactory(token: string): boolean {\n        return !!this._factories[token];\n    }\n\n    private _hasInstance(token: string): boolean {\n        return !!this._instances[token];\n    }\n\n    private _getInstance(token: string, cacheToken: string): T {\n        if (!this._hasInstance(cacheToken)) {\n            const factory = this._factories[token];\n\n            if (!factory) {\n                throw new InvalidArgumentError(`'${token}' is not registered.`);\n            }\n\n            this._instances[cacheToken] = factory();\n        }\n\n        return this._instances[cacheToken];\n    }\n}\n\nexport type Factory<T> = () => T;\n\nexport interface RegistryOptions {\n    defaultToken: string;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { Masterpass, MasterpassHostWindow } from './masterpass';\n\nexport default class MasterpassScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: MasterpassHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<Masterpass> {\n        return this._scriptLoader\n            .loadScript(`//${testMode ? 'sandbox.' : ''}masterpass.com/integration/merchant.js`)\n            .then(() => {\n                if (!this._window.masterpass) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.masterpass;\n            });\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if we are unable to synchronize the checkout details of a\n * shopper with a hosted / remote checkout provider (i.e.: Amazon).\n */\nexport default class RemoteCheckoutSynchronizationError extends StandardError {\n    constructor(\n        public error?: Error\n    ) {\n        super('Unable to synchronize your checkout details with a third party provider. Please try again later.');\n\n        this.name = 'RemoteCheckoutSynchronizationError';\n        this.type = 'remote_checkout_synchronization';\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport PaymentMethod from '../../payment-method';\nimport { BraintreeSDKCreator, GooglePayBraintreeSDK } from '../braintree';\n\nimport {\n    GooglePaymentData,\n    GooglePayInitializer,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload\n} from './googlepay';\nimport { GooglePayBraintreeDataRequest, GooglePayBraintreePaymentDataRequestV1 } from './googlepay-braintree';\n\nexport default class GooglePayBraintreeInitializer implements GooglePayInitializer {\n    private _googlePaymentInstance!: GooglePayBraintreeSDK;\n\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator\n    ) {}\n\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        if (!paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n\n        return this._braintreeSDKCreator.getGooglePaymentComponent()\n            .then(googleBraintreePaymentInstance => {\n                this._googlePaymentInstance = googleBraintreePaymentInstance;\n\n                return this._createGooglePayPayload(\n                    checkout,\n                    paymentMethod.initializationData,\n                    hasShippingAddress\n                );\n            });\n    }\n\n    teardown(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload {\n        const payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token).androidPayCards[0];\n\n        return {\n            nonce: payload.nonce,\n            type: payload.type,\n            description: payload.description,\n            details: {\n                cardType: payload.details.cardType,\n                lastFour: payload.details.lastFour,\n                lastTwo: payload.details.lastTwo,\n            },\n            binData: payload.binData,\n        };\n    }\n\n    private _createGooglePayPayload(\n        checkout: Checkout,\n        initializationData: any,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        if (!initializationData.platformToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const googlePayBraintreePaymentDataRequest: GooglePayBraintreeDataRequest = {\n            merchantInfo: {\n                authJwt: initializationData.platformToken,\n                merchantName: initializationData.googleMerchantName,\n                merchantId: initializationData.googleMerchantId,\n            },\n            transactionInfo: {\n                currencyCode: checkout.cart.currency.code,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(checkout.outstandingBalance, 2).toFixed(2),\n            },\n            cardRequirements: {\n                billingAddressRequired: true,\n                billingAddressFormat: 'FULL',\n            },\n            shippingAddressRequired: !hasShippingAddress,\n            emailRequired: true,\n            phoneNumberRequired: true,\n        };\n\n        return this._mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2(\n            this._googlePaymentInstance.createPaymentDataRequest(googlePayBraintreePaymentDataRequest)\n        );\n    }\n\n    private _mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2(googlePayBraintreeDataRequestV1: GooglePayBraintreePaymentDataRequestV1): GooglePayPaymentDataRequestV2 {\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt: googlePayBraintreeDataRequestV1.merchantInfo.authJwt,\n                merchantId: googlePayBraintreeDataRequestV1.merchantInfo.merchantId,\n                merchantName: googlePayBraintreeDataRequestV1.merchantInfo.merchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: googlePayBraintreeDataRequestV1.cardRequirements.allowedCardNetworks,\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: 'FULL',\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'braintree',\n                        'braintree:apiVersion': 'v1',\n                        'braintree:authorizationFingerprint': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:authorizationFingerprint'],\n                        'braintree:merchantId': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:merchantId'],\n                        'braintree:sdkVersion': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:sdkVersion'],\n                    },\n                },\n            }],\n            transactionInfo: googlePayBraintreeDataRequestV1.transactionInfo,\n            emailRequired: true,\n            shippingAddressRequired: googlePayBraintreeDataRequestV1.shippingAddressRequired,\n            shippingAddressParameters: {\n                phoneNumberRequired: googlePayBraintreeDataRequestV1.phoneNumberRequired,\n            },\n        };\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport { InvalidArgumentError } from '../../../common/error/errors';\nimport PaymentMethod from '../../payment-method';\n\nimport {\n    GooglePaymentData,\n    GooglePayInitializer,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload\n} from './googlepay';\n\nexport default class GooglePayStripeInitializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(this._mapGooglePayStripeDataRequestToGooglePayDataRequestV2(\n            checkout,\n            paymentMethod.initializationData,\n            hasShippingAddress\n        ));\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload {\n        try {\n            const payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token);\n\n            return {\n                nonce: payload.id,\n                type: payload.type,\n                details: {\n                    cardType: payload.card.brand,\n                    lastFour: payload.card.last4,\n                },\n            };\n        } catch (err) {\n            throw new InvalidArgumentError('Unable to parse response from Google Pay.');\n        }\n    }\n\n    private _mapGooglePayStripeDataRequestToGooglePayDataRequestV2(\n        checkout: Checkout,\n        initializationData: any,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt: initializationData.platformToken,\n                merchantId: initializationData.googleMerchantId,\n                merchantName: initializationData.googleMerchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: ['AMEX', 'DISCOVER', 'JCB', 'MASTERCARD', 'VISA'],\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: 'FULL',\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'stripe',\n                        'stripe:version': initializationData.stripeVersion,\n                        'stripe:publishableKey': initializationData.stripePublishableKey,\n                    },\n                },\n            }],\n            transactionInfo: {\n                currencyCode: checkout.cart.currency.code,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(checkout.outstandingBalance, 2).toFixed(2),\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { mapToInternalAddress } from '../address';\nimport { BillingAddress } from '../billing';\n\nimport { Customer } from '.';\nimport InternalCustomer from './internal-customer';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCustomer(customer: Customer, billingAddress: BillingAddress): InternalCustomer {\n    const firstName = customer.firstName || billingAddress.firstName || '';\n    const lastName = customer.lastName || billingAddress.lastName || '';\n\n    return {\n        addresses: (customer.addresses || []).map(address => mapToInternalAddress(address)),\n        customerId: customer.id,\n        isGuest: customer.isGuest,\n        storeCredit: customer.storeCredit,\n        email: customer.email || billingAddress.email || '',\n        firstName,\n        lastName,\n        name: customer.fullName || [firstName, lastName].join(' '),\n        customerGroupName: customer.customerGroup && customer.customerGroup.name,\n    };\n}\n","import GiftCertificate from './gift-certificate';\nimport InternalGiftCertificate from './internal-gift-certificate';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalGiftCertificate(giftCertificate: GiftCertificate): InternalGiftCertificate {\n    return {\n        code: giftCertificate.code,\n        discountedAmount: giftCertificate.used,\n        remainingBalance: giftCertificate.remaining,\n        giftCertificate: {\n            balance: giftCertificate.balance,\n            code: giftCertificate.code,\n            purchaseDate: giftCertificate.purchaseDate,\n        },\n    };\n}\n","import { filter, find, keyBy, reduce } from 'lodash';\n\nimport { mapToInternalLineItems, LineItem } from '../cart';\nimport { Checkout } from '../checkout';\nimport { AmountTransformer } from '../common/utility';\nimport { mapToInternalCoupon } from '../coupon';\nimport { HOSTED } from '../payment';\n\nimport InternalOrder, { InternalGiftCertificateList, InternalIncompleteOrder, InternalOrderPayment, InternalSocialDataList } from './internal-order';\nimport Order, { GatewayOrderPayment, GiftCertificateOrderPayment, OrderPayment, OrderPayments } from './order';\nimport { OrderMetaState } from './order-state';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalOrder(order: Order, orderMeta: OrderMetaState = {}): InternalOrder {\n    const decimalPlaces = order.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: order.orderId,\n        items: mapToInternalLineItems(order.lineItems, order.currency.decimalPlaces, 'productId'),\n        orderId: order.orderId,\n        currency: order.currency.code,\n        customerCanBeCreated: order.customerCanBeCreated,\n        payment: mapToInternalOrderPayment(order.payments, orderMeta.payment),\n        subtotal: {\n            amount: order.baseAmount,\n            integerAmount: amountTransformer.toInteger(order.baseAmount),\n        },\n        coupon: {\n            discountedAmount: reduce(order.coupons, (sum, coupon) => {\n                return sum + coupon.discountedAmount;\n            }, 0),\n            coupons: order.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: order.discountAmount,\n            integerAmount: amountTransformer.toInteger(order.discountAmount),\n        },\n        token: orderMeta.orderToken,\n        callbackUrl: orderMeta.callbackUrl,\n        discountNotifications: [],\n        giftCertificate: mapToGiftCertificates(order.payments),\n        socialData: mapToInternalSocialDataList(order),\n        status: order.status,\n        hasDigitalItems: order.hasDigitalItems,\n        isDownloadable: order.isDownloadable,\n        isComplete: order.isComplete,\n        shipping: {\n            amount: order.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.shippingCostTotal),\n            amountBeforeDiscount: order.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(order.shippingCostBeforeDiscount),\n        },\n        storeCredit: {\n            amount: mapToStoreCredit(order.payments),\n        },\n        taxes: order.taxes,\n        taxTotal: {\n            amount: order.taxTotal,\n            integerAmount: amountTransformer.toInteger(order.taxTotal),\n        },\n        handling: {\n            amount: order.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: order.orderAmount,\n            integerAmount: order.orderAmountAsInteger,\n        },\n    };\n}\n\nexport function mapToInternalIncompleteOrder(checkout: Checkout): InternalIncompleteOrder {\n    const payment = find(checkout.payments, { providerType: HOSTED });\n\n    return {\n        orderId: null,\n        isComplete: false,\n        payment: !payment ? {} : {\n            id: payment.providerId,\n            gateway: payment.gatewayId,\n            status: mapToInternalPaymentStatus(payment.detail.step),\n        },\n    };\n}\n\nfunction mapToInternalPaymentStatus(status: string): string {\n    return `PAYMENT_STATUS_${status}`;\n}\n\nfunction mapToStoreCredit(payments?: OrderPayments): number {\n    const item = find(payments, { providerId: 'storecredit' });\n\n    return item ? item.amount : 0;\n}\n\nfunction mapToGiftCertificates(payments?: OrderPayments): InternalGiftCertificateList {\n    const items = filter(payments, { providerId: 'giftcertificate' }) as GiftCertificateOrderPayment[];\n\n    return {\n        totalDiscountedAmount: reduce(items, (sum, item) => item.amount + sum, 0),\n        appliedGiftCertificates: keyBy(items.map(item => ({\n            code: item.detail.code,\n            discountedAmount: item.amount,\n            remainingBalance: item.detail.remaining,\n            giftCertificate: {\n                balance: item.amount + item.detail.remaining,\n                code: item.detail.code,\n                purchaseDate: '',\n            },\n        })), 'code'),\n    };\n}\n\nfunction mapToInternalOrderPayment(payments?: OrderPayments, payment: InternalOrderPayment = {}): InternalOrderPayment {\n    const item = find(payments, isDefaultOrderPayment) as GatewayOrderPayment;\n\n    if (!item) {\n        return {};\n    }\n\n    return {\n        id: item.providerId,\n        status: mapToInternalPaymentStatus(item.detail.step),\n        helpText: item.detail.instructions,\n        returnUrl: payment.returnUrl,\n    };\n}\n\nfunction isDefaultOrderPayment(payment: OrderPayment): payment is GatewayOrderPayment {\n    return payment.providerId !== 'giftcertificate' && payment.providerId !== 'storecredit';\n}\n\nfunction mapToInternalSocialDataList(order: Order): { [itemId: string]: InternalSocialDataList } | undefined {\n    const socialDataObject: { [itemId: string]: InternalSocialDataList } = {};\n    const items = [\n        ...order.lineItems.physicalItems,\n        ...order.lineItems.digitalItems,\n    ];\n\n    items.forEach(item => {\n        socialDataObject[item.id] = mapToInternalSocialData(item);\n    });\n\n    return socialDataObject;\n}\n\nfunction mapToInternalSocialData(lineItem: LineItem): InternalSocialDataList {\n    const codes = ['fb', 'tw', 'gp'];\n\n    return codes.reduce((socialData, code) => {\n        const item = lineItem.socialMedia && find(lineItem.socialMedia, item => item.code === code);\n\n        if (!item) {\n            return socialData;\n        }\n\n        socialData[code] = {\n            name: lineItem.name,\n            description: lineItem.name,\n            image: lineItem.imageUrl,\n            url: item.link,\n            shareText: item.text,\n            sharingLink: item.link,\n            channelName: item.channel,\n            channelCode: item.code,\n        };\n\n        return socialData;\n    }, {} as InternalSocialDataList);\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { PaypalHostWindow, PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalScriptLoader {\n    private _window: PaypalHostWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    loadPaypal(): Promise<PaypalSDK> {\n        return this._scriptLoader\n            .loadScript('//www.paypalobjects.com/api/checkout.min.js')\n            .then(() => {\n                if (!this._window.paypal) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.paypal;\n            });\n    }\n}\n","import { IFrameComponent, IFrameOptions } from 'iframe-resizer';\n\nexport {\n    HeightCalculationMethod,\n    IFrameComponent,\n    IFrameMessageData,\n    IFrameObject,\n    IFrameOptions,\n    IFramePage,\n    IFramePageOptions,\n    IFrameResizedData,\n    IFrameScrollData,\n    PageInfo,\n    WidthCalculationMethod,\n} from 'iframe-resizer';\n\n// The reason why we are wrapping the original `iframeResizer` function imported\n// from the package is because the package sets up event listeners (window\n// resize etc...) as soon as the package is imported. Therefore, to defer the\n// side effect from happening until the function is actually being used, we are\n// importing the package inside this function. To minimise the chance of\n// importing the original package inadvertently, we are also re-exporting all of\n// its public interfaces. The re-exports do not cause any side effect because\n// they are plain TypeScript interfaces; meaning they are only used for type\n// checks rather than for code output.\nexport function iframeResizer(options: IFrameOptions, target: string | HTMLElement): IFrameComponent[] {\n    const { iframeResizer: originalIframeResizer } = require('iframe-resizer');\n\n    return originalIframeResizer(options, target);\n}\n\n// We also need to wrap the original `iframeResizer.contentWindow` because\n// similarly the package sets up event listeners as soon as the package gets\n// imported. Another reason is that if it is imported at the top level using a\n// regular import statement, it will be stripped out by Webpack as it is\n// considered as \"unused\", unless we explicitly mark it as a package that\n// produces side effects.\nexport function setupContentWindowForIframeResizer(): void {\n    require('iframe-resizer/js/iframeResizer.contentWindow');\n}\n","import { ClearErrorAction, ErrorActionType } from './error-actions';\n\nexport default class ErrorActionCreator {\n    clearError(error: Error): ClearErrorAction {\n        return {\n            type: ErrorActionType.ClearError,\n            payload: error,\n        };\n    }\n}\n","export default function getEnvironment(): string {\n    try {\n        return process.env.NODE_ENV || 'development';\n    } catch (e) {\n        return 'development';\n    }\n}\n","import Logger from './logger';\n\nexport default class ConsoleLogger implements Logger {\n    constructor(\n        private _console?: Console\n    ) {}\n\n    log(...messages: any[]): void {\n        this._logToConsole('log', ...messages);\n    }\n\n    info(...messages: any[]): void {\n        this._logToConsole('info', ...messages);\n    }\n\n    warn(...messages: any[]): void {\n        this._logToConsole('warn', ...messages);\n    }\n\n    error(...messages: any[]): void {\n        this._logToConsole('error', ...messages);\n    }\n\n    debug(...messages: any[]): void {\n        this._logToConsole('debug', ...messages);\n    }\n\n    private _logToConsole(type: keyof Console, ...messages: any[]): void {\n        if (!this._console || !this._console[type]) {\n            return;\n        }\n\n        this._console[type].call(this._console, ...messages);\n    }\n}\n","import Logger from './logger';\n\nexport default class NoopLogger implements Logger {\n    log(): void {}\n\n    info(): void {}\n\n    warn(): void {}\n\n    error(): void {}\n\n    debug(): void {}\n}\n","import { getEnvironment } from '../utility';\n\nimport createLogger from './create-logger';\nimport Logger from './logger';\n\nconst logger = createLogger(getEnvironment() !== 'test');\n\nexport default function getDefaultLogger(): Logger {\n    return logger;\n}\n","import ConsoleLogger from './console-logger';\nimport Logger from './logger';\nimport NoopLogger from './noop-logger';\n\nexport default function createLogger(isEnabled = true): Logger {\n    if (!isEnabled) {\n        return new NoopLogger();\n    }\n\n    return new ConsoleLogger(console);\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { ApplyCouponAction, CouponAction, CouponActionType, RemoveCouponAction } from './coupon-actions';\nimport CouponRequestSender from './coupon-request-sender';\n\nexport default class CouponActionCreator {\n    constructor(\n        private _couponRequestSender: CouponRequestSender\n    ) {}\n\n    applyCoupon(code: string, options?: RequestOptions): ThunkAction<CouponAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ApplyCouponAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CouponActionType.ApplyCouponRequested));\n\n            this._couponRequestSender.applyCoupon(checkout.id, code, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CouponActionType.ApplyCouponSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CouponActionType.ApplyCouponFailed, response));\n                });\n        });\n    }\n\n    removeCoupon(code: string, options?: RequestOptions): ThunkAction<CouponAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<RemoveCouponAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CouponActionType.RemoveCouponRequested));\n\n            this._couponRequestSender.removeCoupon(checkout.id, code, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CouponActionType.RemoveCouponSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CouponActionType.RemoveCouponFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CheckoutIncludes, CHECKOUT_DEFAULT_INCLUDES } from '../checkout';\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nexport default class CouponRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyCoupon(checkoutId: string, couponCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/coupons`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    CheckoutIncludes.AvailableShippingOptions,\n                ]),\n            },\n            body: { couponCode },\n        });\n    }\n\n    removeCoupon(checkoutId: string, couponCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/coupons/${couponCode}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    CheckoutIncludes.AvailableShippingOptions,\n                ]),\n            },\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable ,  Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { GiftCertificateRequestSender } from '.';\nimport { ApplyGiftCertificateAction, GiftCertificateActionType, RemoveGiftCertificateAction } from './gift-certificate-actions';\n\nexport default class GiftCertificateActionCreator {\n    constructor(\n        private _giftCertificateRequestSender: GiftCertificateRequestSender\n    ) {}\n\n    applyGiftCertificate(giftCertificate: string, options?: RequestOptions): ThunkAction<ApplyGiftCertificateAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ApplyGiftCertificateAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(GiftCertificateActionType.ApplyGiftCertificateRequested));\n\n            this._giftCertificateRequestSender.applyGiftCertificate(checkout.id, giftCertificate, options)\n                .then(({ body }) => {\n                    observer.next(createAction(GiftCertificateActionType.ApplyGiftCertificateSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(GiftCertificateActionType.ApplyGiftCertificateFailed, response));\n                });\n        });\n    }\n\n    removeGiftCertificate(giftCertificate: string, options?: RequestOptions): ThunkAction<RemoveGiftCertificateAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<RemoveGiftCertificateAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(GiftCertificateActionType.RemoveGiftCertificateRequested));\n\n            this._giftCertificateRequestSender.removeGiftCertificate(checkout.id, giftCertificate, options)\n                .then(({ body }) => {\n                    observer.next(createAction(GiftCertificateActionType.RemoveGiftCertificateSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(GiftCertificateActionType.RemoveGiftCertificateFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CHECKOUT_DEFAULT_INCLUDES } from '../checkout';\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nexport default class GiftCertificateRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyGiftCertificate(checkoutId: string, giftCertificateCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/gift-certificates`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes(CHECKOUT_DEFAULT_INCLUDES),\n            },\n            body: { giftCertificateCode },\n        });\n    }\n\n    removeGiftCertificate(checkoutId: string, giftCertificateCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/gift-certificates/${giftCertificateCode}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes(CHECKOUT_DEFAULT_INCLUDES),\n            },\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { Registry } from '../common/registry';\n\nimport CustomerCredentials from './customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from './customer-request-options';\nimport {\n    CustomerStrategyActionType,\n    CustomerStrategyDeinitializeAction,\n    CustomerStrategyInitializeAction,\n    CustomerStrategySignInAction,\n    CustomerStrategySignOutAction,\n    CustomerStrategyWidgetAction,\n} from './customer-strategy-actions';\nimport { CustomerStrategy } from './strategies';\n\nexport default class CustomerStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: Registry<CustomerStrategy>\n    ) {}\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Observable<CustomerStrategySignInAction> {\n        return Observable.create((observer: Observer<CustomerStrategySignInAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.SignInRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .signIn(credentials, options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.SignInSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.SignInFailed, error, meta));\n                });\n        });\n    }\n\n    signOut(options?: CustomerRequestOptions): Observable<CustomerStrategySignOutAction> {\n        return Observable.create((observer: Observer<CustomerStrategySignOutAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.SignOutRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .signOut(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.SignOutSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.SignOutFailed, error, meta));\n                });\n        });\n    }\n\n    initialize(options?: CustomerInitializeOptions): ThunkAction<CustomerStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CustomerStrategyInitializeAction>) => {\n            const state = store.getState();\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            if (methodId && state.customerStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(CustomerStrategyActionType.InitializeRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .initialize(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.InitializeSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.InitializeFailed, error, meta));\n                });\n        });\n    }\n\n    deinitialize(options?: CustomerRequestOptions): ThunkAction<CustomerStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CustomerStrategyDeinitializeAction>) => {\n            const state = store.getState();\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            if (methodId && !state.customerStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(CustomerStrategyActionType.DeinitializeRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .deinitialize(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.DeinitializeSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.DeinitializeFailed, error, meta));\n                });\n        });\n    }\n\n    widgetInteraction(method: () => Promise<any>, options?: CustomerRequestOptions): Observable<CustomerStrategyWidgetAction> {\n        return Observable.create((observer: Observer<CustomerStrategyWidgetAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.WidgetInteractionStarted, undefined, meta));\n\n            method().then(() => {\n                observer.next(createAction(CustomerStrategyActionType.WidgetInteractionFinished, undefined, meta));\n                observer.complete();\n            })\n            .catch(error => {\n                observer.error(createErrorAction(CustomerStrategyActionType.WidgetInteractionFailed, error, meta));\n            });\n        });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport PaymentMethod from '../../payment-method';\n\nimport AmazonPayWindow from './amazon-pay-window';\n\nexport default class AmazonPayScriptLoader {\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    loadWidget(method: PaymentMethod, onPaymentReady?: () => void): Promise<Event> {\n        const {\n            config: { merchantId, testMode },\n            initializationData: { region = 'us' } = {},\n        } = method;\n\n        const url = 'https://' +\n            (region.toLowerCase() !== 'us' ? 'static-eu.' : 'static-na.') +\n            'payments-amazon.com/OffAmazonPayments/' +\n            `${region.toLowerCase()}/` +\n            (testMode ? 'sandbox/' : '') +\n            (region.toLowerCase() !== 'us' ? 'lpa/' : '') +\n            `js/Widgets.js?sellerId=${merchantId}`;\n\n        this._configureWidget(method, onPaymentReady);\n\n        return this._scriptLoader.loadScript(url);\n    }\n\n    private _configureWidget(method: PaymentMethod, onPaymentReady?: () => void): void {\n        const onLoginReady = () => {\n            if (!this._window.amazon) {\n                return;\n            }\n\n            this._window.amazon.Login.setClientId(method.initializationData.clientId);\n            this._window.amazon.Login.setUseCookie(true);\n        };\n\n        if (this._window.amazon && this._window.amazon.Login) {\n            onLoginReady();\n        } else {\n            this._window.onAmazonLoginReady = onLoginReady;\n        }\n\n        if (this._window.OffAmazonPayments && onPaymentReady) {\n            onPaymentReady();\n        } else {\n            this._window.onAmazonPaymentsReady = onPaymentReady;\n        }\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport { Address, LegacyAddress } from '../../../address';\n\nimport { BraintreeDataCollector } from './braintree';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\nimport {\n    VisaCheckoutAddress,\n    VisaCheckoutInitOptions,\n    VisaCheckoutPaymentSuccessPayload,\n    VisaCheckoutTokenizedPayload,\n} from './visacheckout';\n\nexport default class BraintreeVisaCheckoutPaymentProcessor {\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _requestSender: RequestSender\n    ) {}\n\n    initialize(clientToken: string, options: VisaCheckoutInitializeOptions): Promise<VisaCheckoutInitOptions> {\n        this._braintreeSDKCreator.initialize(clientToken);\n\n        return this._braintreeSDKCreator.getVisaCheckout()\n            .then(visaCheckout => visaCheckout.createInitOptions({\n                settings: {\n                    locale: options.locale,\n                    shipping: {\n                        collectShipping: options.collectShipping,\n                    },\n                },\n                paymentRequest: {\n                    currencyCode: options.currencyCode,\n                    subtotal: String(options.subtotal),\n                },\n            }));\n    }\n\n    deinitialize(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    handleSuccess(payment: VisaCheckoutPaymentSuccessPayload, shipping?: Address, billing?: Address): Promise<any> {\n        return this._braintreeSDKCreator.getVisaCheckout()\n            .then(braintreeVisaCheckout => Promise.all([\n                braintreeVisaCheckout.tokenize(payment),\n                this._braintreeSDKCreator.getDataCollector(),\n            ])\n            .then(([tokenizedPayload, dataCollector]) => {\n                const {\n                    shippingAddress = this._toVisaCheckoutAddress(shipping),\n                    billingAddress = this._toVisaCheckoutAddress(billing),\n                } = tokenizedPayload;\n\n                return this._postForm({\n                    ...tokenizedPayload,\n                    shippingAddress,\n                    billingAddress,\n                }, dataCollector);\n            }));\n    }\n\n    private _postForm(paymentData: VisaCheckoutTokenizedPayload, dataCollector: BraintreeDataCollector) {\n        const {\n            userData,\n            billingAddress,\n            shippingAddress,\n            details: cardInformation,\n        } = paymentData;\n        const { userEmail } = userData;\n        const { deviceData } = dataCollector;\n\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: {\n                payment_type: paymentData.type,\n                nonce: paymentData.nonce,\n                provider: 'braintreevisacheckout',\n                action: 'set_external_checkout',\n                device_data: deviceData,\n                card_information: this._getCardInformation(cardInformation),\n                billing_address: this._getAddress(userEmail, billingAddress),\n                shipping_address: this._getAddress(userEmail, shippingAddress),\n            },\n        });\n    }\n\n    private _toVisaCheckoutAddress(address?: Address): VisaCheckoutAddress {\n        if (!address) {\n            return {};\n        }\n\n        return {\n            firstName: address.firstName,\n            lastName: address.lastName,\n            phoneNumber: address.phone,\n            streetAddress: address.address1,\n            extendedAddress: address.address2,\n            locality: address.city,\n            region: address.stateOrProvinceCode,\n            countryCode: address.countryCode,\n            postalCode: address.postalCode,\n        };\n    }\n\n    private _getAddress(email: string, address: VisaCheckoutAddress = {}): Partial<LegacyAddress> {\n        return {\n            email,\n            first_name: address.firstName,\n            last_name: address.lastName,\n            phone_number: address.phoneNumber,\n            address_line_1: address.streetAddress,\n            address_line_2: address.extendedAddress,\n            city: address.locality,\n            state: address.region,\n            country_code: address.countryCode,\n            postal_code: address.postalCode,\n        };\n    }\n\n    private _getCardInformation(cardInformation: { cardType: string; lastTwo: string }) {\n        return {\n            type: cardInformation.cardType,\n            number: cardInformation.lastTwo,\n        };\n    }\n}\n\nexport interface VisaCheckoutInitializeOptions {\n    locale?: string;\n    collectShipping?: boolean;\n    subtotal?: number;\n    currencyCode?: string;\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\nimport BraintreeVisaCheckoutPaymentProcessor from './braintree-visacheckout-payment-processor';\n\nexport default function createBraintreeVisaCheckoutPaymentProcessor(\n    scriptLoader: ScriptLoader,\n    requestSender: RequestSender\n) {\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSDKCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n\n    return new BraintreeVisaCheckoutPaymentProcessor(braintreeSDKCreator, requestSender);\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { VisaCheckoutHostWindow, VisaCheckoutSDK } from './visacheckout';\n\nexport default class VisaCheckoutScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: VisaCheckoutHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<VisaCheckoutSDK> {\n        return this._scriptLoader\n            .loadScript(`//${testMode ? 'sandbox-' : ''}assets.secure.checkout.visa.com/checkout-widget/resources/js/integration/v1/sdk.js`)\n            .then(() => {\n                if (!this._window.V) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.V;\n            });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\nimport { ChasePayHostWindow, JPMC } from '../chasepay/chasepay';\n\nexport default class ChasePayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: ChasePayHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<JPMC> {\n        return this._scriptLoader\n            .loadScript(`//pwc${testMode ? 'psb' : ''}.chase.com/pwc/checkout/js/v20170521/list.action?type=raw&applId=PWC&channelId=CWC&version=1`)\n            .then(() => {\n                if (!this._window.JPMC) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.JPMC;\n            });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class RemoteCheckoutRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    initializeBilling(methodName: string, params?: { referenceId: string }, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/billing`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    initializeShipping(methodName: string, params?: { referenceId: string }, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/shipping`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    initializePayment(methodName: string, params?: InitializePaymentOptions, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/payment`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    loadSettings(methodName: string, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/settings`;\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    signOut(methodName: string, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/signout`;\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    generateToken({ timeout }: RequestOptions = {}): Promise<Response> {\n        const url = '/remote-checkout-token';\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    trackAuthorizationEvent({ timeout }: RequestOptions = {}): Promise<Response> {\n        const url = '/remote-checkout/events/shopper-checkout-service-provider-authorization-requested';\n\n        return this._requestSender.post(url, { timeout });\n    }\n}\n\nexport interface InitializePaymentOptions {\n    authorizationToken?: string;\n    customerMessage?: string;\n    referenceId?: string;\n    useStoreCredit?: boolean;\n}\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { RemoteCheckoutActionType } from './remote-checkout-actions';\nimport RemoteCheckoutRequestSender, { InitializePaymentOptions } from './remote-checkout-request-sender';\nimport { RemoteCheckoutStateData } from './remote-checkout-state';\n\n/**\n * @todo Convert this file into TypeScript properly\n * i.e.: Action<T>\n */\nexport default class RemoteCheckoutActionCreator {\n    constructor(\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender\n    ) {}\n\n    initializeBilling(methodId: string, params?: { referenceId: string }, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteBillingRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializeBilling(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteBillingSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemoteBillingFailed, response, { methodId }));\n                });\n        });\n    }\n\n    initializeShipping(methodId: string, params?: { referenceId: string }, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteShippingRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializeShipping(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteShippingSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemoteShippingFailed, response, { methodId }));\n                });\n        });\n    }\n\n    initializePayment(methodId: string, params?: InitializePaymentOptions, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemotePaymentRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializePayment(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemotePaymentSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemotePaymentFailed, response, { methodId }));\n                });\n        });\n    }\n\n    loadSettings(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.LoadRemoteSettingsRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.loadSettings(methodId, options)\n                .then(({ body }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.LoadRemoteSettingsSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.LoadRemoteSettingsFailed, response, { methodId }));\n                });\n        });\n    }\n\n    signOut(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.SignOutRemoteCustomerRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.signOut(methodId, options)\n                .then(() => {\n                    observer.next(createAction(RemoteCheckoutActionType.SignOutRemoteCustomerSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.SignOutRemoteCustomerFailed, response, { methodId }));\n                });\n        });\n    }\n\n    updateCheckout<K extends keyof RemoteCheckoutStateData>(methodId: K, data: Partial<RemoteCheckoutStateData[K]>): Action {\n        return createAction(RemoteCheckoutActionType.UpdateRemoteCheckout, data, { methodId });\n    }\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, from, of } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { CheckoutActionCreator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\n\nimport { CustomerActionType, SignInCustomerAction, SignOutCustomerAction } from './customer-actions';\nimport CustomerCredentials from './customer-credentials';\nimport CustomerRequestSender from './customer-request-sender';\n\nexport default class CustomerActionCreator {\n    constructor(\n        private _customerRequestSender: CustomerRequestSender,\n        private _checkoutActionCreator: CheckoutActionCreator\n    ) {}\n\n    signInCustomer(\n        credentials: CustomerCredentials,\n        options?: RequestOptions\n    ): ThunkAction<SignInCustomerAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CustomerActionType.SignInCustomerRequested)),\n            from(this._customerRequestSender.signInCustomer(credentials, options))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                        of(createAction(CustomerActionType.SignInCustomerSucceeded, body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(CustomerActionType.SignInCustomerFailed, error))\n        );\n    }\n\n    signOutCustomer(\n        options?: RequestOptions\n    ): ThunkAction<SignOutCustomerAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CustomerActionType.SignOutCustomerRequested)),\n            from(this._customerRequestSender.signOutCustomer(options))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                        of(createAction(CustomerActionType.SignOutCustomerSucceeded, body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(CustomerActionType.SignOutCustomerFailed, error))\n        );\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport CustomerCredentials from './customer-credentials';\nimport { InternalCustomerResponseBody } from './internal-customer-responses';\n\nexport default class CustomerRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    signInCustomer(credentials: CustomerCredentials, { timeout }: RequestOptions = {}): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.post(url, { timeout, body: credentials });\n    }\n\n    signOutCustomer({ timeout }: RequestOptions = {}): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.delete(url, { timeout });\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * Throw this error if we try to call a method that is only a stub and has not\n * been fully implemented.\n */\nexport default class NotImplementedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Not implemented.');\n\n        this.name = 'NotImplementedError';\n        this.type = 'not_implemented';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { AmazonPayLoginButton, AmazonPayScriptLoader, AmazonPayWindow } from '../../../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../../../remote-checkout';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nimport AmazonPayCustomerInitializeOptions from './amazon-pay-customer-initialize-options';\n\nexport default class AmazonPayCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { amazon: amazonOptions, methodId } = options;\n\n        if (!amazonOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.amazon\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise((resolve, reject) => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const { onError = () => {} } = amazonOptions;\n                const onReady = () => {\n                    this._createSignInButton({\n                        ...amazonOptions,\n                        onError: error => {\n                            reject(error);\n                            onError(error);\n                        },\n                    });\n\n                    resolve();\n                };\n\n                this._scriptLoader.loadWidget(this._paymentMethod, onReady)\n                    .catch(reject);\n            }))\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    signIn(): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via AmazonPay, the shopper must click on \"Login with Amazon\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(options: AmazonPayCustomerInitializeOptions): AmazonPayLoginButton {\n        if (!this._paymentMethod || !this._window.OffAmazonPayments) {\n            throw new NotInitializedError(NotInitializedErrorType.CustomerNotInitialized);\n        }\n\n        if (!this._paymentMethod.config.merchantId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { initializationData } = this._paymentMethod;\n\n        return new this._window.OffAmazonPayments.Button(options.container, this._paymentMethod.config.merchantId, {\n            color: options.color || 'Gold',\n            size: options.size || 'small',\n            type: 'PwA',\n            useAmazonAddressBook: true,\n            onError: options.onError,\n            authorization: () => {\n                this._handleAuthorization(initializationData);\n            },\n        });\n    }\n\n    private _handleAuthorization(options: AuthorizationOptions): void {\n        this._remoteCheckoutRequestSender.generateToken()\n            .then(({ body }) => {\n                if (!this._window.amazon) {\n                    throw new NotInitializedError(NotInitializedErrorType.ShippingNotInitialized);\n                }\n\n                this._window.amazon.Login.authorize({\n                    popup: false,\n                    scope: 'payments:shipping_address payments:billing_address payments:widget profile',\n                    state: `${options.tokenPrefix}${body.token}`,\n                }, options.redirectUrl);\n\n                this._remoteCheckoutRequestSender.trackAuthorizationEvent();\n            });\n    }\n}\n\ninterface AuthorizationOptions {\n    redirectUrl: string;\n    tokenPrefix: string;\n}\n","import { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { BraintreeVisaCheckoutPaymentProcessor, VisaCheckoutScriptLoader } from '../../../payment/strategies/braintree';\nimport { VisaCheckoutPaymentSuccessPayload } from '../../../payment/strategies/braintree/visacheckout';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategyActionCreator from '../../customer-strategy-action-creator';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class BraintreeVisaCheckoutCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _buttonClassName: string = 'visa-checkout-wrapper';\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _customerStrategyActionCreator: CustomerStrategyActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _braintreeVisaCheckoutPaymentProcessor: BraintreeVisaCheckoutPaymentProcessor,\n        private _visaCheckoutScriptLoader: VisaCheckoutScriptLoader\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintreevisacheckout: visaCheckoutOptions, methodId } = options;\n\n        if (!visaCheckoutOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.braintreevisacheckout\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const checkout = state.checkout.getCheckout();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const {\n                    container,\n                    onError = () => {},\n                } = visaCheckoutOptions;\n\n                const initOptions = {\n                    locale: storeConfig.storeProfile.storeLanguage,\n                    collectShipping: true,\n                    subtotal: checkout.subtotal,\n                    currencyCode: storeConfig.currency.code,\n                };\n\n                return Promise.all([\n                    this._visaCheckoutScriptLoader.load(this._paymentMethod.config.testMode),\n                    this._braintreeVisaCheckoutPaymentProcessor.initialize(this._paymentMethod.clientToken, initOptions),\n                ])\n                .then(([visaCheckout, initOptions]) => {\n                    const signInButton = this._createSignInButton(container, this._buttonClassName);\n\n                    visaCheckout.init(initOptions);\n                    visaCheckout.on('payment.success', (paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) =>\n                        this._paymentInstrumentSelected(paymentSuccessPayload)\n                            .catch(error => onError(error))\n                    );\n                    visaCheckout.on('payment.error', (_, error) => onError(error));\n\n                    return signInButton;\n                })\n                .then(signInButton => { signInButton.style.visibility = 'visible'; });\n            })\n            .then(() => this._store.getState());\n    }\n\n    signIn(): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via VisaCheckout, the shopper must click on \"Visa Checkout\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut('braintreevisacheckout', options)\n        );\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        return this._braintreeVisaCheckoutPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _paymentInstrumentSelected(paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) {\n        const state = this._store.getState();\n\n        if (!this._paymentMethod) {\n            throw new Error('Payment method not initialized');\n        }\n\n        const { id: methodId } = this._paymentMethod;\n\n        return this._store.dispatch(\n            this._customerStrategyActionCreator.widgetInteraction(() => {\n                return this._braintreeVisaCheckoutPaymentProcessor.handleSuccess(\n                    paymentSuccessPayload,\n                    state.shippingAddress.getShippingAddress(),\n                    state.billingAddress.getBillingAddress()\n                )\n                .then(() => this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _createSignInButton(containerId: string, buttonClass: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new Error('Need a container to place the button');\n        }\n\n        return (container.querySelector('.' + buttonClass) as HTMLElement) ||\n            this._insertVisaCheckoutButton(container, buttonClass);\n    }\n\n    private _insertVisaCheckoutButton(container: Element, buttonClass: string): HTMLElement {\n        const buttonSource = 'https://secure.checkout.visa.com/wallet-services-web/xo/button.png?acceptCanadianVisaDebit=false&cobrand=true&size=154';\n        const buttonTemplate = `\n            <img\n                alt=\"Visa Checkout\"\n                class=\"v-button\"\n                role=\"button\"\n                src=\"${buttonSource}\"\n                />\n            <a class=\"v-learn v-learn-default\" style=\"text-align: right; display: block; font-size: 10px; color: #003366;\" href=\"#\" data-locale=\"en_US\">Tell Me More</a>`;\n\n        const visaCheckoutButton = document.createElement('div');\n        visaCheckoutButton.style.visibility = 'hidden';\n        visaCheckoutButton.className = buttonClass;\n        visaCheckoutButton.innerHTML = buttonTemplate;\n\n        container.appendChild(visaCheckoutButton);\n\n        return visaCheckoutButton;\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { ChasePayScriptLoader, ChasePaySuccessPayload } from '../../../payment/strategies/chasepay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class ChasePayCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _chasePayScriptLoader: ChasePayScriptLoader,\n        private _requestSender: RequestSender,\n        private _formPoster: FormPoster\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { chasepay: chasePayOptions, methodId } = options;\n\n        if (!chasePayOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.chasepay\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const cart = state.cart.getCart();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!cart) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCart);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.initializationData.digitalSessionId) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                const { container } = chasePayOptions;\n\n                return this._chasePayScriptLoader.load(this._paymentMethod.config.testMode)\n                    .then(JPMC => {\n                        const ChasePay = JPMC.ChasePay;\n\n                        ChasePay.configure({\n                            language: storeConfig.storeProfile.storeLanguage,\n                        });\n\n                        if (ChasePay.isChasePayUp) {\n                            ChasePay.insertButtons({\n                                containers: [container],\n                            });\n                        }\n\n                        ChasePay.on(ChasePay.EventType.START_CHECKOUT, () => {\n                            this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n                                .then(() => {\n                                    const state = this._store.getState();\n                                    const method = state.paymentMethods.getPaymentMethod(methodId);\n                                    const sessionId = method && method.initializationData && method.initializationData.digitalSessionId;\n\n                                    if (sessionId) {\n                                        ChasePay.startCheckout(sessionId);\n                                    }\n                                });\n                        });\n\n                        ChasePay.on(ChasePay.EventType.COMPLETE_CHECKOUT, (payload: ChasePaySuccessPayload) => {\n                            const state = this._store.getState();\n                            const method = state.paymentMethods.getPaymentMethod(methodId);\n                            const requestId = method && method.initializationData && method.initializationData.merchantRequestId;\n\n                            if (requestId) {\n                                this._setExternalCheckoutData(payload, requestId)\n                                    .then(() => {\n                                        this._reloadPage();\n                                });\n                            }\n                        });\n                    });\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    signIn(): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Chase Pay®, the shopper must click on \"Chase Pay®\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _setExternalCheckoutData(payload: ChasePaySuccessPayload, requestId: string): Promise<Response> {\n        const url = `checkout.php?provider=chasepay&action=set_external_checkout`;\n        const options = {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            },\n            body: {\n                sessionToken: payload.sessionToken,\n                merchantRequestId: requestId,\n            },\n            method: 'post',\n        };\n\n        return this._requestSender.sendRequest(url, options);\n    }\n\n    private _reloadPage() {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            params: {\n                fromChasePay: true,\n            },\n        });\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport CustomerActionCreator from '../../customer-action-creator';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class DefaultCustomerStrategy implements CustomerStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _customerActionCreator: CustomerActionCreator\n    ) {}\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._customerActionCreator.signInCustomer(credentials, options)\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._customerActionCreator.signOutCustomer(options)\n        );\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { GooglePayPaymentProcessor } from '../../../payment/strategies/googlepay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nimport GooglePayCustomerInitializeOptions from './googlepay-customer-initialize-options';\n\nexport default class GooglePayCustomerStrategy implements CustomerStrategy {\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor,\n        private _formPoster: FormPoster\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId }  = options;\n\n        const googlePayOptions = this._getGooglePayOptions(options);\n\n        if (!methodId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._googlePayPaymentProcessor.initialize(methodId)\n            .then(() => {\n                this._walletButton = this._createSignInButton(googlePayOptions.container);\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton && this._walletButton.parentNode) {\n            this._walletButton.parentNode.removeChild(this._walletButton);\n            this._walletButton = undefined;\n        }\n\n        return this._googlePayPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    signIn(): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Google Pay, the shopper must click on \"Google Pay\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const button = this._googlePayPaymentProcessor.createButton(this._handleWalletButtonClick);\n\n        container.appendChild(button);\n\n        return button;\n    }\n\n    private _getGooglePayOptions(options: CustomerInitializeOptions): GooglePayCustomerInitializeOptions {\n        if (options.methodId === 'googlepaybraintree' && options.googlepaybraintree) {\n            return options.googlepaybraintree;\n        }\n\n        if (options.methodId === 'googlepaystripe' && options.googlepaystripe) {\n            return options.googlepaystripe;\n        }\n\n        throw new InvalidArgumentError();\n    }\n\n    private _onPaymentSelectComplete(): void {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n        });\n    }\n\n    private _onError(error?: Error): void {\n        if (error && error.message !== 'CANCELED') {\n            throw error;\n        }\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<void> {\n        event.preventDefault();\n\n        return this._googlePayPaymentProcessor.displayWallet()\n            .then(paymentData => this._googlePayPaymentProcessor.handleSuccess(paymentData)\n            .then(() => {\n                if (paymentData.shippingAddress) {\n                    this._googlePayPaymentProcessor.updateShippingAddress(paymentData.shippingAddress);\n                }\n            }))\n            .then(() => this._onPaymentSelectComplete())\n            .catch(error => this._onError(error));\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotImplementedError\n} from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { getCallbackUrl, MasterpassScriptLoader } from '../../../payment/strategies/masterpass';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class MasterpassCustomerStrategy implements CustomerStrategy {\n    private _signInButton?: HTMLElement;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { masterpass: masterpassOptions, methodId } = options;\n\n        if (!masterpassOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.masterpass\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n                if (!this._paymentMethod || !this._paymentMethod.initializationData.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const cart = state.cart.getCart();\n                if (!cart) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCart);\n                }\n\n                const { container } = masterpassOptions;\n\n                const payload = {\n                    checkoutId: this._paymentMethod.initializationData.checkoutId,\n                    allowedCardTypes: this._paymentMethod.initializationData.allowedCardTypes,\n                    amount: cart.cartAmount.toString(),\n                    currency: cart.currency.code,\n                    cartId: cart.id,\n                    suppressShippingAddress: false,\n                    callbackUrl: getCallbackUrl('checkout'),\n                };\n\n                return this._masterpassScriptLoader.load(this._paymentMethod.config.testMode)\n                    .then(Masterpass => {\n                        this._signInButton = this._createSignInButton(container);\n\n                        this._signInButton.addEventListener('click', () => {\n                            Masterpass.checkout(payload);\n                        });\n                    });\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        if (this._signInButton && this._signInButton.parentNode) {\n            this._signInButton.parentNode.removeChild(this._signInButton);\n            this._signInButton = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    signIn(): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Masterpass, the shopper must click on \"Masterpass\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const button = document.createElement('input');\n\n        button.type = 'image';\n        button.src = 'https://static.masterpass.com/dyn/img/btn/global/mp_chk_btn_160x037px.svg';\n        container.appendChild(button);\n\n        return button;\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { NotImplementedError } from '../../../common/error/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class SquareCustomerStrategy implements CustomerStrategy {\n\n    constructor(\n        private _store: CheckoutStore,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator\n    ) {}\n\n    signIn(): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Masterpass, the shopper must click on \"Masterpass\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport Country from './country';\nimport { CountryActionType } from './country-actions';\nimport CountryRequestSender from './country-request-sender';\n\nexport default class CountryActionCreator {\n    constructor(\n        private _countryRequestSender: CountryRequestSender\n    ) {}\n\n    loadCountries(options?: RequestOptions): Observable<Action<Country[]>> {\n        return Observable.create((observer: Observer<Action<Country[]>>) => {\n            observer.next(createAction(CountryActionType.LoadCountriesRequested));\n\n            this._countryRequestSender.loadCountries(options)\n                .then(response => {\n                    observer.next(createAction(CountryActionType.LoadCountriesSucceeded, response.body.data));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CountryActionType.LoadCountriesFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { CountryResponseBody } from './country-responses';\n\nexport default class CountryRequestSender {\n    constructor(\n        private _requestSender: RequestSender,\n        private _config: { locale?: string }\n    ) {}\n\n    loadCountries({ timeout }: RequestOptions = {}): Promise<Response<CountryResponseBody>> {\n        const url = '/internalapi/v1/store/countries';\n        const headers = {\n            'Accept-Language': this._config.locale,\n        };\n\n        return this._requestSender.get(url, { headers, timeout });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { InternalOrderResponseBody } from './internal-order-responses';\nimport Order from './order';\nimport OrderParams from './order-params';\n\nexport default class OrderRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadOrder(orderId: number, { timeout, params }: RequestOptions<OrderParams> = {}): Promise<Response<Order>> {\n        const url = `/api/storefront/orders/${orderId}`;\n        const headers = { Accept: ContentType.JsonV1 };\n        const include = [\n            'payments',\n            'lineItems.physicalItems.socialMedia',\n            'lineItems.physicalItems.options',\n            'lineItems.digitalItems.socialMedia',\n            'lineItems.digitalItems.options',\n        ];\n\n        return this._requestSender.get(url, {\n            params: {\n                include: joinIncludes([\n                    ...include,\n                    ...(params && params.include || []),\n                ]),\n            },\n            headers,\n            timeout,\n        });\n    }\n\n    submitOrder(body: InternalOrderRequestBody, { timeout }: RequestOptions = {}): Promise<Response<InternalOrderResponseBody>> {\n        const url = '/internalapi/v1/checkout/order';\n\n        return this._requestSender.post(url, { body, timeout });\n    }\n\n    finalizeOrder(orderId: number, { timeout }: RequestOptions = {}): Promise<Response<InternalOrderResponseBody>> {\n        const url = `/internalapi/v1/checkout/order/${orderId}`;\n\n        return this._requestSender.post(url, { timeout });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, empty, from, of, Observable, Observer } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { CheckoutValidator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { FinalizeOrderAction, LoadOrderAction, LoadOrderPaymentsAction, OrderActionType, SubmitOrderAction } from './order-actions';\nimport OrderRequestBody from './order-request-body';\nimport OrderRequestSender from './order-request-sender';\nimport { SpamProtectionAction, SpamProtectionActionCreator } from './spam-protection';\n\nexport default class OrderActionCreator {\n    constructor(\n        private _orderRequestSender: OrderRequestSender,\n        private _checkoutValidator: CheckoutValidator,\n        private _spamProtectionActionCreator: SpamProtectionActionCreator\n    ) {}\n\n    loadOrder(orderId: number, options?: RequestOptions): Observable<LoadOrderAction> {\n        return new Observable((observer: Observer<LoadOrderAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderRequested));\n\n            this._orderRequestSender.loadOrder(orderId, options)\n                .then(response => {\n                    observer.next(createAction(OrderActionType.LoadOrderSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderFailed, response));\n                });\n        });\n    }\n\n    // TODO: Remove when checkout does not contain unrelated order data.\n    loadOrderPayments(orderId: number, options?: RequestOptions): Observable<LoadOrderPaymentsAction> {\n        return new Observable((observer: Observer<LoadOrderPaymentsAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderPaymentsRequested));\n\n            this._orderRequestSender.loadOrder(orderId, options)\n                .then(response => {\n                    observer.next(createAction(OrderActionType.LoadOrderPaymentsSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderPaymentsFailed, response));\n                });\n        });\n    }\n\n    loadCurrentOrder(options?: RequestOptions): ThunkAction<LoadOrderAction, InternalCheckoutSelectors> {\n        return store => defer(() => {\n            const orderId = this._getCurrentOrderId(store.getState());\n\n            if (!orderId) {\n                throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n            }\n\n            return this.loadOrder(orderId, options);\n        });\n    }\n\n    submitOrder(payload: OrderRequestBody, options?: RequestOptions): ThunkAction<SubmitOrderAction | SpamProtectionAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(OrderActionType.SubmitOrderRequested)),\n            defer(() => {\n                const state = store.getState();\n                const externalSource = state.config.getExternalSource();\n                const checkout = state.checkout.getCheckout();\n                const orderMeta = state.order.getOrderMeta();\n                const storeConfig = state.config.getStoreConfig();\n                const spamProtectionToken = orderMeta && orderMeta.spamProtectionToken;\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                const { isSpamProtectionEnabled } = storeConfig.checkoutSettings;\n\n                if (isSpamProtectionEnabled && !spamProtectionToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingSpamProtectionToken);\n                }\n\n                return from(\n                    this._checkoutValidator.validate(checkout, options)\n                        .then(() => this._orderRequestSender.submitOrder(this._mapToOrderRequestBody(\n                            payload,\n                            checkout.customerMessage,\n                            externalSource,\n                            spamProtectionToken\n                        ), options))\n                ).pipe(\n                    switchMap(response => concat(\n                        // TODO: Remove once we can submit orders using storefront API\n                        this.loadOrder(response.body.data.order.orderId, options),\n                        of(createAction(OrderActionType.SubmitOrderSucceeded, response.body.data, { ...response.body.meta, token: response.headers.token }))\n                    ))\n                );\n            }).pipe(\n                catchError(error => throwErrorAction(OrderActionType.SubmitOrderFailed, error))\n            )\n        );\n    }\n\n    finalizeOrder(orderId: number, options?: RequestOptions): Observable<FinalizeOrderAction | LoadOrderAction> {\n        return concat(\n            of(createAction(OrderActionType.FinalizeOrderRequested)),\n            from(this._orderRequestSender.finalizeOrder(orderId, options))\n                .pipe(\n                    switchMap(response => concat(\n                        this.loadOrder(orderId, options),\n                        of(createAction(OrderActionType.FinalizeOrderSucceeded, response.body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(OrderActionType.FinalizeOrderFailed, error))\n        );\n    }\n\n    executeSpamProtection(): ThunkAction<SpamProtectionAction> {\n        return store => {\n            const storeConfig = store.getState().config.getStoreConfig();\n\n            if (!storeConfig) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n            }\n\n            const { isSpamProtectionEnabled } = storeConfig.checkoutSettings;\n\n            if (!isSpamProtectionEnabled) {\n                return empty();\n            }\n\n            return this._spamProtectionActionCreator.execute();\n        };\n    }\n\n    private _getCurrentOrderId(state: InternalCheckoutSelectors): number | undefined {\n        const order = state.order.getOrder();\n        const checkout = state.checkout.getCheckout();\n\n        return (order && order.orderId) || (checkout && checkout.orderId);\n    }\n\n    private _mapToOrderRequestBody(\n        payload: OrderRequestBody,\n        customerMessage: string,\n        externalSource?: string,\n        spamProtectionToken?: string\n    ): InternalOrderRequestBody {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            return {\n                ...order,\n                customerMessage,\n                externalSource,\n                spamProtectionToken,\n            };\n        }\n\n        return {\n            ...order,\n            customerMessage,\n            externalSource,\n            spamProtectionToken,\n            payment: {\n                paymentData: payment.paymentData,\n                name: payment.methodId,\n                gateway: payment.gatewayId,\n            },\n        };\n    }\n}\n","export interface MutationObeserverCreator {\n    prototype: MutationObserver;\n    new(callback: MutationCallback): MutationObserver;\n}\n\nexport interface MutationObserverWindow extends Window {\n    MutationObserver: MutationObeserverCreator;\n}\n\nexport class MutationObserverFactory {\n    constructor(\n        private _window: MutationObserverWindow = window as MutationObserverWindow\n    ) {}\n\n    create(callback: MutationCallback): MutationObserver {\n        return new this._window.MutationObserver(callback);\n    }\n}\n","import { StandardError } from '../../../common/error/errors';\n\n/**\n * Throw this error if we fail to complete the required spam protection\n * verification due to an unknown reason.\n */\nexport default class SpamProtectionFailedError extends StandardError {\n    constructor() {\n        super('We were not able to complete our spam protection verification. Please try again.');\n\n        this.name = 'SpamProtectionFailedError';\n        this.type = 'spam_protection_failed';\n    }\n}\n","import { StandardError } from '../../../common/error/errors';\n\n/**\n * Throw this error if the shopper chooses not to complete the spam protection\n * challenge (i.e.: they close the reCaptcha window).\n */\nexport default class SpamProtectionNotCompletedError extends StandardError {\n    constructor() {\n        super('You haven\\'t complete our spam protection verification. Please try again.');\n\n        this.name = 'SpamProtectionNotCompletedError';\n        this.type = 'spam_protection_not_completed';\n    }\n}\n","import { Observable, Subject } from 'rxjs';\n\nimport { MutationObserverFactory } from '../../common/dom/mutation-observer';\nimport { NotInitializedError, NotInitializedErrorType } from '../../common/error/errors';\n\nimport { SpamProtectionFailedError, SpamProtectionNotCompletedError } from './errors';\nimport GoogleRecaptchaScriptLoader from './google-recaptcha-script-loader';\n\nexport interface RecaptchaResult {\n    error?: Error;\n    token?: string;\n}\n\nexport default class GoogleRecaptcha {\n    private _event$?: Subject<RecaptchaResult>;\n    private _recaptcha?: ReCaptchaV2.ReCaptcha;\n\n    constructor(\n        private googleRecaptchaScriptLoader: GoogleRecaptchaScriptLoader,\n        private mutationObserverFactory: MutationObserverFactory\n    ) {}\n\n    load(containerId: string, sitekey: string): Promise<void> {\n        const event$ = new Subject<RecaptchaResult>();\n        this._event$ = event$;\n\n        return this.googleRecaptchaScriptLoader.load()\n            .then(recaptcha => {\n                recaptcha.render(containerId, {\n                    sitekey,\n                    size: 'invisible',\n                    callback: () => {\n                        event$.next({\n                            token: recaptcha.getResponse(),\n                        });\n                        recaptcha.reset();\n                    },\n                    'error-callback': () => {\n                        event$.next({\n                            error: new SpamProtectionFailedError(),\n                        });\n                    },\n                });\n\n                this._recaptcha = recaptcha;\n            });\n    }\n\n    execute(): Observable<RecaptchaResult> {\n        if (!this._event$ || !this._recaptcha) {\n            throw new NotInitializedError(NotInitializedErrorType.SpamProtectionNotInitialized);\n        }\n\n        this._watchRecaptchaChallengeWindow(this._event$);\n\n        this._recaptcha.execute();\n\n        return this._event$;\n    }\n\n    private _watchRecaptchaChallengeWindow(event: Subject<RecaptchaResult>) {\n        const iframeElement = document.querySelector('iframe[title=\"recaptcha challenge\"]');\n\n        if (!iframeElement) {\n            throw new Error('Recaptcha challenge iframe not found.');\n        }\n\n        const iframeContainer = iframeElement.parentElement;\n\n        if (!iframeContainer) {\n            throw new Error('Recaptcha challenge iframe container not found.');\n        }\n\n        const container = iframeContainer.parentElement;\n\n        if (!container) {\n            throw new Error('Recaptcha challenge container not found.');\n        }\n\n        this.mutationObserverFactory.create(() => {\n            // When customer closes the Google ReCaptcha challenge window, throw SpamProtectionNotCompletedError\n            if (container.style.visibility === 'hidden') {\n                event.next({\n                    error: new SpamProtectionNotCompletedError(),\n                });\n            }\n        }).observe(container, { attributes: true, attributeFilter: ['style'] });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nexport default class GoogleRecaptchaScriptLoader {\n    private _loadPromise?: Promise<ReCaptchaV2.ReCaptcha>;\n\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: GoogleRecaptchaWindow = window\n    ) {}\n\n    load(): Promise<ReCaptchaV2.ReCaptcha> {\n        if (!this._loadPromise) {\n            this._loadPromise = this._loadScript();\n        }\n\n        return this._loadPromise;\n    }\n\n    private _loadScript(): Promise<ReCaptchaV2.ReCaptcha> {\n        const callbackName = 'initRecaptcha';\n        const params = [\n            `onload=${callbackName}`,\n            'render=explicit',\n        ].join('&');\n\n        return new Promise((resolve, reject) => {\n            this._window[callbackName] = () => resolve(this._window.grecaptcha);\n\n            this._scriptLoader.loadScript(`//www.google.com/recaptcha/api.js?${params}`)\n                .catch(error => {\n                    this._loadPromise = undefined;\n                    reject(error);\n                });\n        });\n    }\n}\n\nexport interface GoogleRecaptchaWindow extends Window {\n    grecaptcha?: ReCaptchaV2.ReCaptcha;\n    initRecaptcha?(): void;\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, of, throwError, Observable, Observer } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../../common/error/errors';\n\nimport GoogleRecaptcha from './google-recaptcha';\nimport { SpamProtectionAction, SpamProtectionActionType } from './spam-protection-actions';\nimport { SpamProtectionOptions } from './spam-protection-options';\n\nexport default class SpamProtectionActionCreator {\n    constructor(\n        private _googleRecaptcha: GoogleRecaptcha\n    ) {}\n\n    initialize(options: SpamProtectionOptions): ThunkAction<SpamProtectionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<SpamProtectionAction>) => {\n            const state = store.getState();\n            const config = state.config.getConfig();\n            const { containerId } = options;\n\n            if (!config) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n            }\n\n            observer.next(createAction(SpamProtectionActionType.InitializeRequested, undefined));\n\n            const recaptchaSitekey = config.storeConfig.checkoutSettings.googleRecaptchaSitekey;\n\n            return this._googleRecaptcha.load(containerId, recaptchaSitekey)\n                .then(() => {\n                    observer.next(createAction(SpamProtectionActionType.InitializeSucceeded));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(SpamProtectionActionType.InitializeFailed, error, containerId));\n                });\n        });\n    }\n\n    execute(): Observable<SpamProtectionAction> {\n        return concat(\n            of(createAction(SpamProtectionActionType.ExecuteRequested, undefined)),\n            this._googleRecaptcha.execute()\n                .pipe(take(1))\n                .pipe(switchMap(({ error, token }) => {\n                    return error ?\n                        throwError(createErrorAction(SpamProtectionActionType.SubmitFailed, error)) :\n                        of(createAction(SpamProtectionActionType.Completed, token));\n                }))\n        );\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if we are trying to make an order finalization request for a\n * payment method that does not require such procedure.\n */\nexport default class OrderFinalizationNotRequiredError extends StandardError {\n    constructor() {\n        super('The current order does not need to be finalized at this stage.');\n\n        this.name = 'OrderFinalizationNotRequiredError';\n        this.type = 'order_finalization_not_required';\n    }\n}\n","enum PaymentStrategyType {\n    ADYENV2 = 'adyenv2',\n    AFFIRM = 'affirm',\n    AFTERPAY = 'afterpay',\n    AMAZON = 'amazon',\n    CREDIT_CARD = 'creditcard',\n    CYBERSOURCE = 'cybersource',\n    KLARNA = 'klarna',\n    LEGACY = 'legacy',\n    OFFLINE = 'offline',\n    OFFSITE = 'offsite',\n    PAYPAL = 'paypal',\n    PAYPAL_EXPRESS = 'paypalexpress',\n    PAYPAL_EXPRESS_CREDIT = 'paypalexpresscredit',\n    SAGE_PAY = 'sagepay',\n    SQUARE = 'squarev2',\n    STRIPEV3 = 'stripev3',\n    NO_PAYMENT_DATA_REQUIRED = 'nopaymentdatarequired',\n    BRAINTREE = 'braintree',\n    BRAINTREE_PAYPAL = 'braintreepaypal',\n    BRAINTREE_PAYPAL_CREDIT = 'braintreepaypalcredit',\n    BRAINTREE_VISA_CHECKOUT = 'braintreevisacheckout',\n    BRAINTREE_GOOGLE_PAY = 'googlepaybraintree',\n    CHASE_PAY = 'chasepay',\n    WE_PAY = 'wepay',\n    MASTERPASS = 'masterpass',\n    STRIPE_GOOGLE_PAY = 'googlepaystripe',\n    ZIP = 'zip',\n    CONVERGE = 'converge',\n}\n\nexport default PaymentStrategyType;\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, empty, of, Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { LoadOrderPaymentsAction, OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../order';\nimport { OrderFinalizationNotRequiredError } from '../order/errors';\nimport { SpamProtectionAction } from '../order/spam-protection';\n\nimport { PaymentInitializeOptions, PaymentRequestOptions } from './payment-request-options';\nimport {\n    PaymentStrategyActionType,\n    PaymentStrategyDeinitializeAction,\n    PaymentStrategyExecuteAction,\n    PaymentStrategyFinalizeAction,\n    PaymentStrategyInitializeAction,\n    PaymentStrategyWidgetAction,\n} from './payment-strategy-actions';\nimport PaymentStrategyRegistry from './payment-strategy-registry';\nimport PaymentStrategyType from './payment-strategy-type';\nimport { PaymentStrategy } from './strategies';\n\nexport default class PaymentStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: PaymentStrategyRegistry,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: RequestOptions): ThunkAction<PaymentStrategyExecuteAction | SpamProtectionAction, InternalCheckoutSelectors> {\n        const { payment = {} as OrderPaymentRequestBody, useStoreCredit } = payload;\n        const meta = { methodId: payment.methodId };\n\n        return store => concat(\n            this._orderActionCreator.executeSpamProtection()(store),\n            of(createAction(PaymentStrategyActionType.ExecuteRequested, undefined, meta)),\n            defer(() => {\n                const state = store.getState();\n\n                let strategy: PaymentStrategy;\n\n                if (state.payment.isPaymentDataRequired(useStoreCredit)) {\n                    const method = state.paymentMethods.getPaymentMethod(payment.methodId, payment.gatewayId);\n\n                    if (!method) {\n                        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                    }\n\n                    strategy = this._strategyRegistry.getByMethod(method);\n                } else {\n                    strategy = this._strategyRegistry.get(PaymentStrategyType.NO_PAYMENT_DATA_REQUIRED);\n                }\n\n                return strategy\n                    .execute(payload, { ...options, methodId: payment.methodId, gatewayId: payment.gatewayId })\n                    .then(() => createAction(PaymentStrategyActionType.ExecuteSucceeded, undefined, meta));\n            })\n        ).pipe(\n            catchError(error => throwErrorAction(PaymentStrategyActionType.ExecuteFailed, error, meta))\n        );\n    }\n\n    finalize(options?: RequestOptions): ThunkAction<PaymentStrategyFinalizeAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(PaymentStrategyActionType.FinalizeRequested)),\n            this._loadOrderPaymentsIfNeeded(store, options),\n            defer(() => {\n                const state = store.getState();\n                const { providerId = '', gatewayId = '' } = state.payment.getPaymentId() || {};\n                const method = state.paymentMethods.getPaymentMethod(providerId, gatewayId);\n\n                if (!method) {\n                    throw new OrderFinalizationNotRequiredError();\n                }\n\n                return this._strategyRegistry.getByMethod(method)\n                    .finalize({ ...options, methodId: method.id, gatewayId: method.gateway })\n                    .then(() => createAction(PaymentStrategyActionType.FinalizeSucceeded, undefined, { methodId: method.id }));\n            })\n        ).pipe(\n            catchError(error => {\n                const state = store.getState();\n                const payment = state.payment.getPaymentId();\n\n                return throwErrorAction(PaymentStrategyActionType.FinalizeFailed, error, { methodId: payment && payment.providerId });\n            })\n        );\n    }\n\n    initialize(options: PaymentInitializeOptions): ThunkAction<PaymentStrategyInitializeAction, InternalCheckoutSelectors> {\n        const { methodId, gatewayId } = options;\n\n        return store => defer(() => {\n            const state = store.getState();\n            const method = state.paymentMethods.getPaymentMethod(methodId, gatewayId);\n\n            if (!method) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            if (methodId && state.paymentStrategies.isInitialized(methodId)) {\n                return empty();\n            }\n\n            return concat(\n                of(createAction(PaymentStrategyActionType.InitializeRequested, undefined, { methodId })),\n                this._strategyRegistry.getByMethod(method)\n                    .initialize({ ...options, methodId, gatewayId })\n                    .then(() => createAction(PaymentStrategyActionType.InitializeSucceeded, undefined, { methodId }))\n            );\n        }).pipe(\n            catchError(error => throwErrorAction(PaymentStrategyActionType.InitializeFailed, error, { methodId }))\n        );\n    }\n\n    deinitialize(options: PaymentRequestOptions): ThunkAction<PaymentStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        const { methodId, gatewayId } = options;\n\n        return store => defer(() => {\n            const state = store.getState();\n            const method = state.paymentMethods.getPaymentMethod(methodId, gatewayId);\n\n            if (!method) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            if (methodId && !state.paymentStrategies.isInitialized(methodId)) {\n                return empty();\n            }\n\n            return concat(\n                of(createAction(PaymentStrategyActionType.DeinitializeRequested, undefined, { methodId })),\n                this._strategyRegistry.getByMethod(method)\n                    .deinitialize({ ...options, methodId, gatewayId })\n                    .then(() => createAction(PaymentStrategyActionType.DeinitializeSucceeded, undefined, { methodId }))\n            );\n        }).pipe(\n            catchError(error => throwErrorAction(PaymentStrategyActionType.DeinitializeFailed, error, { methodId }))\n        );\n    }\n\n    widgetInteraction(method: () => Promise<any>, options?: PaymentRequestOptions): Observable<PaymentStrategyWidgetAction> {\n        const methodId = options && options.methodId;\n        const meta = { methodId };\n\n        return concat(\n            of(createAction(PaymentStrategyActionType.WidgetInteractionStarted, undefined, meta)),\n            defer(() =>\n                method().then(() => createAction(PaymentStrategyActionType.WidgetInteractionFinished, undefined, meta))\n            )\n        ).pipe(\n            catchError(error => throwErrorAction(PaymentStrategyActionType.WidgetInteractionFailed, error, meta))\n        );\n    }\n\n    private _loadOrderPaymentsIfNeeded(store: ReadableCheckoutStore, options?: RequestOptions): Observable<LoadOrderPaymentsAction> {\n        const state = store.getState();\n        const checkout = state.checkout.getCheckout();\n\n        if (checkout && checkout.orderId) {\n            return this._orderActionCreator.loadOrderPayments(checkout.orderId, options);\n        }\n\n        return empty();\n    }\n}\n","import { isEqual } from 'lodash';\n\nimport { PartialDeep } from '../common/types';\n\nimport Cart from './cart';\n\nexport default class CartComparator {\n    isEqual(cartA: Cart, cartB: Cart): boolean {\n        return isEqual(\n            this._normalize(cartA),\n            this._normalize(cartB)\n        );\n    }\n\n    private _normalize(cart: Cart): PartialDeep<Cart> {\n        return {\n            cartAmount: cart.cartAmount,\n            currency: cart.currency,\n            id: cart.id,\n            lineItems: {\n                digitalItems: cart.lineItems.digitalItems\n                    .slice()\n                    .sort((itemA, itemB) =>\n                        `${itemA.productId}${itemA.variantId}`.localeCompare(`${itemB.productId}${itemB.variantId}`)\n                    )\n                    .map(item => ({\n                        extendedSalePrice: item.extendedSalePrice,\n                        productId: item.productId,\n                        quantity: item.quantity,\n                        variantId: item.variantId,\n                    })),\n                giftCertificates: cart.lineItems.giftCertificates\n                    .slice()\n                    .sort((itemA, itemB) => `${itemA.id}`.localeCompare(`${itemB.id}`))\n                    .map(item => ({\n                        amount: item.amount,\n                        recipient: item.recipient,\n                    })),\n                physicalItems: cart.lineItems.physicalItems\n                    .slice()\n                    .sort((itemA, itemB) =>\n                        `${itemA.productId}${itemA.variantId}`.localeCompare(`${itemB.productId}${itemB.variantId}`)\n                    )\n                    .map(item => ({\n                        extendedSalePrice: item.extendedSalePrice,\n                        productId: item.productId,\n                        quantity: item.quantity,\n                        variantId: item.variantId,\n                        giftWrapping: item.giftWrapping,\n                    })),\n            },\n        };\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class CartChangedError extends StandardError {\n    constructor() {\n        super('An update to your shopping cart has been detected and your available shipping costs have been updated.');\n\n        this.name = 'CartChangedError';\n        this.type = 'cart_changed';\n    }\n}\n","import { isEqual, map } from 'lodash';\n\nimport { CartComparator } from '../cart';\nimport { CartChangedError } from '../cart/errors';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { Coupon, GiftCertificate } from '../coupon';\n\nimport Checkout from './checkout';\nimport CheckoutRequestSender from './checkout-request-sender';\n\nexport default class CheckoutValidator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender\n    ) {}\n\n    validate(checkout?: Checkout, options?: RequestOptions): Promise<void> {\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        return this._checkoutRequestSender.loadCheckout(checkout.id, options)\n            .then(response => {\n                const comparator = new CartComparator();\n\n                if (checkout.outstandingBalance === response.body.outstandingBalance\n                    && this._compareCoupons(checkout.coupons, response.body.coupons)\n                    && this._compareGiftCertificates(checkout.giftCertificates, response.body.giftCertificates)\n                    && comparator.isEqual(checkout.cart, response.body.cart)\n                ) {\n                    return;\n                }\n\n                throw new CartChangedError();\n            });\n    }\n\n    private _compareCoupons(couponsA: Coupon[], couponsB: Coupon[]): boolean {\n        return isEqual(map(couponsA, 'code'), map(couponsB, 'code'));\n    }\n\n    private _compareGiftCertificates(giftCertificatesA: GiftCertificate[], giftCertificatesB: GiftCertificate[]): boolean {\n        return isEqual(map(giftCertificatesA, 'code'), map(giftCertificatesB, 'code'));\n    }\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { StoreCreditAction, StoreCreditActionType } from './store-credit-actions';\nimport StoreCreditRequestSender from './store-credit-request-sender';\n\nexport default class StoreCreditActionCreator {\n    constructor(\n        private _storeCreditRequestSender: StoreCreditRequestSender\n    ) {}\n\n    applyStoreCredit(useStoreCredit: boolean, options?: RequestOptions): ThunkAction<StoreCreditAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(StoreCreditActionType.ApplyStoreCreditRequested)),\n            defer(async () => {\n                const state = store.getState();\n                const checkout = state.checkout.getCheckout();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                const { body } = await (useStoreCredit ?\n                    this._storeCreditRequestSender.applyStoreCredit(checkout.id, options) :\n                    this._storeCreditRequestSender.removeStoreCredit(checkout.id, options));\n\n                return createAction(StoreCreditActionType.ApplyStoreCreditSucceeded, body);\n            })\n        ).pipe(\n            catchError(error => throwErrorAction(StoreCreditActionType.ApplyStoreCreditFailed, error))\n        );\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CHECKOUT_DEFAULT_INCLUDES } from '../checkout';\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nexport default class StoreCreditRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyStoreCredit(checkoutId: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/store-credit`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes(CHECKOUT_DEFAULT_INCLUDES),\n            },\n        });\n    }\n\n    removeStoreCredit(checkoutId: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/store-credit`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes(CHECKOUT_DEFAULT_INCLUDES),\n            },\n        });\n    }\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, from, of } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { OrderActionCreator } from '../order';\n\nimport Payment from './payment';\nimport { InitializeOffsitePaymentAction, PaymentActionType, SubmitPaymentAction } from './payment-actions';\nimport PaymentRequestSender from './payment-request-sender';\nimport PaymentRequestTransformer from './payment-request-transformer';\n\nexport default class PaymentActionCreator {\n    constructor(\n        private _paymentRequestSender: PaymentRequestSender,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentRequestTransformer: PaymentRequestTransformer\n    ) {}\n\n    submitPayment(payment: Payment): ThunkAction<SubmitPaymentAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(PaymentActionType.SubmitPaymentRequested)),\n            from(this._paymentRequestSender.submitPayment(\n                this._paymentRequestTransformer.transform(payment, store.getState())\n            ))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._orderActionCreator.loadCurrentOrder()(store),\n                        of(createAction(PaymentActionType.SubmitPaymentSucceeded, body))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(PaymentActionType.SubmitPaymentFailed, error))\n        );\n    }\n\n    initializeOffsitePayment(\n        methodId: string,\n        gatewayId?: string\n    ): ThunkAction<InitializeOffsitePaymentAction, InternalCheckoutSelectors> {\n        return store => {\n            const payload = this._paymentRequestTransformer.transform({ gatewayId, methodId }, store.getState());\n\n            return concat(\n                of(createAction(PaymentActionType.InitializeOffsitePaymentRequested)),\n                this._paymentRequestSender.initializeOffsitePayment(payload)\n                    .then(() => createAction(PaymentActionType.InitializeOffsitePaymentSucceeded))\n            ).pipe(\n                catchError(error => throwErrorAction(PaymentActionType.InitializeOffsitePaymentFailed, error))\n            );\n        };\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport PaymentRequestBody from './payment-request-body';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class PaymentRequestSender {\n    /**\n     * @constructor\n     * @param {BigpayClient} client\n     */\n    constructor(\n        private _client: any\n    ) {}\n\n    submitPayment(payload: PaymentRequestBody): Promise<Response> {\n        return new Promise((resolve, reject) => {\n            this._client.submitPayment(payload, (error: any, response: any) => {\n                if (error) {\n                    reject(this._transformResponse(error));\n                } else {\n                    resolve(this._transformResponse(response));\n                }\n            });\n        });\n    }\n\n    initializeOffsitePayment(payload: PaymentRequestBody): Promise<void> {\n        return new Promise(() => {\n            this._client.initializeOffsitePayment(payload);\n        });\n    }\n\n    private _transformResponse(response: any): Response {\n        return {\n            headers: response.headers,\n            body: response.data,\n            status: response.status,\n            statusText: response.statusText,\n        };\n    }\n}\n","import { PaymentInstrument, VaultedInstrument } from './payment';\n\nexport default function isVaultedInstrument(instrument: PaymentInstrument): instrument is VaultedInstrument {\n    return Boolean((instrument as VaultedInstrument).instrumentId);\n}\n","import { pick } from 'lodash';\n\nimport { mapToInternalAddress } from '../address';\nimport { mapToInternalCart } from '../cart';\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { mapToInternalCustomer } from '../customer';\nimport { mapToInternalOrder } from '../order';\nimport { mapToInternalShippingOption } from '../shipping';\n\nimport isVaultedInstrument from './is-vaulted-instrument';\nimport Payment from './payment';\nimport PaymentMethod from './payment-method';\nimport PaymentMethodSelector from './payment-method-selector';\nimport PaymentRequestBody from './payment-request-body';\n\nexport default class PaymentRequestTransformer {\n    transform(payment: Payment, checkoutState: InternalCheckoutSelectors): PaymentRequestBody {\n        const billingAddress = checkoutState.billingAddress.getBillingAddress();\n        const checkout = checkoutState.checkout.getCheckout();\n        const customer = checkoutState.customer.getCustomer();\n        const order = checkoutState.order.getOrder();\n        const paymentMethod = this._getPaymentMethod(checkoutState.paymentMethods, payment.methodId, payment.gatewayId);\n        const shippingAddress = checkoutState.shippingAddress.getShippingAddress();\n        const consignments = checkoutState.consignments.getConsignments();\n        const shippingOption = checkoutState.consignments.getShippingOption();\n        const storeConfig = checkoutState.config.getStoreConfig();\n        const contextConfig = checkoutState.config.getContextConfig();\n        const instrumentMeta = checkoutState.instruments.getInstrumentsMeta();\n        const paymentMeta = checkoutState.paymentMethods.getPaymentMethodsMeta();\n        const orderMeta = checkoutState.order.getOrderMeta();\n        const internalCustomer = customer && billingAddress && mapToInternalCustomer(customer, billingAddress);\n\n        const authToken = instrumentMeta && payment.paymentData && isVaultedInstrument(payment.paymentData) ?\n            `${checkoutState.payment.getPaymentToken()}, ${instrumentMeta.vaultAccessToken}` :\n            checkoutState.payment.getPaymentToken();\n\n        if (!authToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentToken);\n        }\n\n        return {\n            authToken,\n            paymentMethod,\n            customer: internalCustomer,\n            billingAddress: billingAddress && mapToInternalAddress(billingAddress),\n            shippingAddress: shippingAddress && mapToInternalAddress(shippingAddress, consignments),\n            shippingOption: shippingOption && mapToInternalShippingOption(shippingOption, true),\n            cart: checkout && mapToInternalCart(checkout),\n            order: order && mapToInternalOrder(order, orderMeta),\n            orderMeta,\n            payment: payment.paymentData,\n            quoteMeta: {\n                request: {\n                    ...paymentMeta,\n                    geoCountryCode: contextConfig && contextConfig.geoCountryCode,\n                },\n            },\n            source: 'bigcommerce-checkout-js-sdk',\n            store: pick(storeConfig && storeConfig.storeProfile, [\n                'storeHash',\n                'storeId',\n                'storeLanguage',\n                'storeName',\n            ]),\n        };\n    }\n\n    private _getPaymentMethod(\n        paymentMethodSelector: PaymentMethodSelector,\n        methodId: string,\n        gatewayId?: string\n    ): PaymentMethod | undefined {\n        const paymentMethod = paymentMethodSelector.getPaymentMethod(methodId, gatewayId);\n\n        if (!paymentMethod) {\n            return;\n        }\n\n        if (paymentMethod.method === 'multi-option' && !paymentMethod.gateway) {\n            return { ...paymentMethod, gateway: paymentMethod.id };\n        }\n\n        if (paymentMethod.initializationData && paymentMethod.initializationData.gateway) {\n            return { ...paymentMethod, id: paymentMethod.initializationData.gateway };\n        }\n\n        return paymentMethod;\n    }\n}\n","export interface AdyenComponentCallbacks {\n    onChange?(state: AdyenCardState): void;\n}\n\nexport interface AdyenHostWindow extends Window {\n    AdyenCheckout?: new(configuration: AdyenConfiguration) => AdyenCheckout;\n}\n\nexport interface AdyenConfiguration {\n    /*\n     * Use test, and then change this to live when you're ready to accept live payments.\n     */\n    environment?: string;\n\n    /*\n     * The shopper's locale. This is used to set the language rendered in the Components.\n     */\n    locale?: string;\n\n    /*\n     * The Origin Key of your website.\n     */\n    originKey: string;\n\n    /*\n     * Supported from Components version 3.0.0 and later. The full paymentMethods response,\n     * returned in step 1. We recommend that you pass this on the AdyenCheckout instance.\n     * Otherwise, you need to pass the specific payment method details separately for each\n     * Component.\n     */\n    paymentMethodsResponse?: PaymentMethodsResponse;\n\n    /*\n     * Specify the function that you created, for example, handleOnChange. If you wish\n     * to override this function, you can also define an onChange event on the Component\n     * level.\n     */\n    onChange?(state: AdyenCardState, component: AdyenComponent): void;\n}\n\nexport interface PaymentMethodsResponse {\n    /**\n     * Groups of payment methods.\n     */\n    groups?: AdyenPaymentMethodGroup[];\n\n    /**\n     * Detailed list of one-click payment methods.\n     */\n    oneClickPaymentMethods?: RecurringDetail;\n\n    /**\n     * Detailed list of payment methods required to generate payment forms.\n     */\n    paymentMethods?: AdyenPaymentMethod[];\n\n    /**\n     * List of all stored payment methods.\n     */\n    storedPaymentMethods?: AdyenStoredPaymentMethod[];\n}\n\nexport interface AdyenPaymentMethod {\n    /**\n     * List of possible brands. For example: visa, mc.\n     */\n    brands?: string[];\n\n    /**\n     * The configuration of the payment method.\n     */\n    configuration?: object;\n\n    /**\n     * All input details to be provided to complete the payment with this payment\n     * method.\n     */\n    details?: InputDetail[];\n\n    /**\n     * The group where this payment method belongs to.\n     */\n    group?: Group;\n\n    /**\n     * The displayable name of this payment method.\n     */\n    name?: string;\n\n    /**\n     * Echo data required to send in next calls.\n     */\n    paymentMethodData?: string;\n\n    /**\n     * Indicates whether this payment method supports tokenization or not.\n     */\n    supportsRecurring?: boolean;\n\n    /**\n     * The unique payment method code.\n     */\n    type?: string;\n}\n\nexport interface AdyenPaymentMethodGroup {\n    /**\n     * The type to submit for any payment method in this group.\n     */\n    groupType?: string;\n\n    /**\n     * The human-readable name of this group.\n     */\n    name?: string;\n\n    /**\n     * The types of payment methods that belong in this group.\n     */\n    types?: string[];\n}\n\nexport interface InputDetail {\n    /**\n     * Configuration parameters for the required input.\n     */\n    configuration?: object;\n\n    /**\n     * Input details can also be provided recursively.\n     */\n    details?: SubInputDetail[];\n\n    /**\n     * In case of a select, the URL from which to query the items.\n     */\n    itemSearchUrl?: string;\n\n    /**\n     * In case of a select, the items to choose from.\n     */\n    items?: Item[];\n\n    /**\n     * The value to provide in the result.\n     */\n    key?: string;\n\n    /**\n     * True if this input value is optional.\n     */\n    optional?: boolean;\n\n    /**\n     * The type of the required input.\n     */\n    type?: string;\n\n    /**\n     * The value can be pre-filled, if available.\n     */\n    value?: string;\n}\n\nexport enum ThreeDS2ComponentType {\n    ThreeDS2DeviceFingerprint = 'threeDS2DeviceFingerprint',\n    ThreeDS2Challenge = 'threeDS2Challenge',\n}\n\nexport interface ThreeDS2Result {\n    payment_data: string;\n    result_code: string;\n    token: string;\n}\n\nexport interface ThreeDS1Result {\n    acs_url: string;\n    payer_auth_request: string;\n    callback_url: string;\n    merchant_data: string;\n}\n\nexport interface SubInputDetail {\n    /**\n     * Configuration parameters for the required input.\n     */\n    configuration?: object;\n\n    /**\n     * In case of a select, the items to choose from.\n     */\n    items?: Item[];\n\n    /**\n     * The value to provide in the result.\n     */\n    key?: string;\n\n    /**\n     * True if this input is optional to provide.\n     */\n    optional?: boolean;\n\n    /**\n     * The type of the required input.\n     */\n    type?: string;\n\n    /**\n     * The value can be pre-filled, if available.\n     */\n    value?: string;\n}\n\nexport interface Item {\n    /**\n     * The value to provide in the result.\n     */\n    id?: string;\n\n    /**\n     * The display name.\n     */\n    name?: string;\n}\n\nexport interface Group {\n    /**\n     * The name of the group.\n     */\n    name?: string;\n\n    /**\n     * Echo data to be used if the payment method is displayed as part of this group.\n     */\n    paymentMethodData?: string;\n\n    /**\n     * The unique code of the group.\n     */\n    type?: string;\n}\n\nexport interface AdyenStoredPaymentMethod {\n    /**\n     * The brand of the card.\n     */\n    brand?: string;\n\n    /**\n     * The month the card expires.\n     */\n    expiryMonth?: string;\n\n    /**\n     * The year the card expires.\n     */\n    expiryYear?: string;\n\n    /**\n     * The unique payment method code.\n     */\n    holderName?: string;\n\n    /**\n     * A unique identifier of this stored payment method.\n     */\n    id?: string;\n\n    /**\n     * The last four digits of the PAN.\n     */\n    lastFour?: string;\n\n    /**\n     * The display name of the stored payment method.\n     */\n    name: string;\n\n    /**\n     * The shopper’s email address.\n     */\n    shopperEmail?: string;\n\n    /**\n     * The supported shopper interactions for this stored payment method.\n     */\n    supportedShopperInteractions?: string[];\n\n    /**\n     * The type of payment method.\n     */\n    type?: string;\n}\n\nexport interface RecurringDetail extends AdyenPaymentMethod {\n    /**\n     * The reference that uniquely identifies the recurring detail.\n     */\n    recurringDetailReference?: string;\n\n    /**\n     * Contains information on previously stored payment details.\n     */\n    storedDetails?: StoredDetails;\n}\n\nexport interface StoredDetails {\n    /**\n     * The stored bank account.\n     */\n    bank?: Bank;\n\n    /**\n     * The stored card information.\n     */\n    card?: Card;\n\n    /**\n     * The email associated with stored payment details.\n     */\n    emailAddress?: string;\n}\n\nexport interface Bank {\n    /**\n     * The bank account number (without separators).\n     */\n    bankAccountNumber?: string;\n\n    /**\n     * The bank city.\n     */\n    bankCity?: string;\n\n    /**\n     * The location id of the bank. The field value is nil in most cases.\n     */\n    bankLocationId?: string;\n\n    /**\n     * The name of the bank.\n     */\n    bankName?: string;\n\n    /**\n     * The Business Identifier Code (BIC) is the SWIFT address assigned to\n     * a bank. The field value is nil in most cases.\n     */\n    bic?: string;\n\n    /**\n     * Country code where the bank is located.\n     * A valid value is an ISO two-character country code (e.g. 'NL').\n     */\n    countryCode?: string;\n\n    /**\n     * The International Bank Account Number (IBAN).\n     */\n    iban?: string;\n\n    /**\n     * The name of the bank account holder. If you submit a name with non-Latin\n     * characters, we automatically replace some of them with corresponding Latin\n     * characters to meet the FATF recommendations. For example:\n     * χ12 is converted to ch12.\n     * üA is converted to euA.\n     * Peter Møller is converted to Peter Mller, because banks don't accept 'ø'.\n     * After replacement, the ownerName must have at least three alphanumeric characters\n     * (A-Z, a-z, 0-9), and at least one of them must be a valid Latin character\n     * (A-Z, a-z). For example:\n     * John17 - allowed.\n     * J17 - allowed.\n     * 171 - not allowed.\n     * John-7 - allowed.\n     */\n    ownerName?: string;\n\n    /**\n     * The bank account holder's tax ID.\n     */\n    taxId?: string;\n}\n\nexport interface Card {\n    /**\n     * The card verification code (1-20 characters). Depending on the card brand, it\n     * is known also as:\n     * CVV2/CVC2 – length: 3 digits\n     * CID – length: 4 digits\n     */\n    cvc?: string;\n\n    /**\n     * The card expiry month. Format: 2 digits, zero-padded for single digits. For example:\n     * 03 = March\n     * 11 = November\n     * Required\n     */\n    expiryMonth: string;\n\n    /**\n     * The card expiry year. Format: 4 digits. For example: 2020\n     * Required\n     */\n    expiryYear: string;\n\n    /**\n     * The name of the cardholder, as printed on the card.\n     * Required\n     */\n    holderName: string;\n\n    /**\n     * The issue number of the card (for some UK debit cards only).\n     */\n    issueNumber?: string;\n\n    /**\n     * The card number (4-19 characters). Do not use any separators. When this value is\n     * returned in a response, only the last 4 digits of the card number are returned.\n     * Required\n     */\n    number: string;\n\n    /**\n     * The month component of the start date (for some UK debit cards only).\n     */\n    startNumnber?: string;\n\n    /**\n     * The year component of the start date (for some UK debit cards only).\n     */\n    startYear?: string;\n}\n\nexport interface CreditCardPlaceHolder {\n    encryptedCardNumber?: string;\n    encryptedExpiryDate?: string;\n    encryptedSecurityCode: string;\n}\n\nexport interface SepaPlaceHolder {\n    ownerName?: string;\n    ibanNumber?: string;\n}\n\nexport interface AdyenComponent {\n    mount(containerId: string): HTMLElement;\n    unmount(): void;\n}\n\nexport interface AdyenCheckout {\n    create(type: string, componentOptions?: CreditCardComponentOptions |\n        ThreeDS2DeviceFingerprintComponentOptions | ThreeDS2ChallengeComponentOptions): AdyenComponent;\n}\n\nexport interface ThreeDS2ComponentOptions {\n    threeDS2ChallengeWidgetSize?: string;\n}\n\nexport interface CreditCardComponentOptions {\n    /**\n     * Set an object containing the details array for type: scheme from\n     * the /paymentMethods response.\n     */\n    details?: InputDetail[];\n\n    /**\n     * Set to true to show the checkbox to save card details for the next payment.\n     */\n    enableStoreDetails?: boolean;\n\n    /**\n     * Set to true to request the name of the card holder.\n     */\n    hasHolderName?: boolean;\n\n    /**\n     * Set to true to require the card holder name.\n     */\n    holderNameRequired?: boolean;\n\n    /**\n     * Prefill the card holder name field. Supported from Card component\n     */\n    holderName?: string;\n\n    /**\n     * Defaults to ['mc','visa','amex']. Configure supported card types to\n     * facilitate brand recognition used in the Secured Fields onBrand callback.\n     * See list of available card types. If a shopper enters a card type not\n     * specified in the GroupTypes configuration, the onBrand callback will not be invoked.\n     */\n    groupTypes?: string[];\n    /**\n     * Set a style object to customize the input fields. See Styling Secured Fields\n     * for a list of supported properties.\n     */\n    styles?: AdyenStyleOptions;\n\n    /**\n     * Specify the sample values you want to appear for card detail input fields.\n     */\n    placeholders?: CreditCardPlaceHolder | SepaPlaceHolder;\n\n    /**\n     * Called when the shopper enters data in the card input fields.\n     * Here you have the option to override your main Adyen Checkout configuration.\n     */\n    onChange?(state: AdyenCardState, component: AdyenComponent): void;\n}\n\nexport interface AdyenCardState {\n    data: AdyenCardDataPaymentMethodState;\n    isValid?: boolean;\n}\n\nexport interface AdyenCardDataPaymentMethodState {\n    paymentMethod: AdyenCardPaymentMethodState;\n}\nexport interface AdyenCardPaymentMethodState {\n    encryptedCardNumber: string;\n    encryptedExpiryMonth: string;\n    encryptedExpiryYear: string;\n    encryptedSecurityCode: string;\n    holderName?: string;\n    type: string;\n}\nexport interface ThreeDS2DeviceFingerprintComponentOptions {\n    fingerprintToken: string;\n    onComplete(fingerprintData: any): void;\n    onError(error: AdyenError): void;\n}\n\nexport enum ResultCode {\n    AuthenticationFinished = 'AuthenticationFinished',\n    Authorised = 'Authorised',\n    Cancelled = 'Cancelled',\n    ChallengeShopper = 'ChallengeShopper',\n    Error = 'Error',\n    IdentifyShopper = 'IdentifyShopper',\n    Pending = 'Pending',\n    Received = 'Received',\n    RedirectShopper = 'RedirectShopper',\n    Refused = 'Refused',\n}\n\nexport interface ThreeDS2ChallengeComponentOptions {\n    challengeToken: string;\n    size?: string;\n    onComplete(fingerprintData: any): void;\n    onError(error: AdyenError): void;\n}\n\nexport interface AdyenStyleOptions {\n    /**\n     * Base styling applied to the iframe. All styling extends from this style.\n     */\n    base?: CssProperties;\n\n    /**\n     * Styling applied when a field fails validation.\n     */\n    error?: CssProperties;\n\n    /**\n     * Styling applied to the field's placeholder values.\n     */\n    placeholder?: CssProperties;\n\n    /**\n     * Styling applied once a field passes validation.\n     */\n    validated?: CssProperties;\n}\n\nexport interface AdyenError {\n    errorCode: string;\n    message: string;\n}\n\nexport interface CssProperties {\n    background?: string;\n    color?: string;\n    display?: string;\n    font?: string;\n    fontFamily?: string;\n    fontSize?: string;\n    fontSizeAdjust?: string;\n    fontSmoothing?: string;\n    fontStretch?: string;\n    fontStyle?: string;\n    fontVariant?: string;\n    fontVariantAlternates?: string;\n    fontVariantCaps?: string;\n    fontVariantEastAsian?: string;\n    fontVariantLigatures?: string;\n    fontVariantNumeric?: string;\n    fontWeight?: string;\n    letterSpacing?: string;\n    lineHeight?: string;\n    mozOsxFontSmoothing?: string;\n    mozTransition?: string;\n    outline?: string;\n    opacity?: string | number;\n    padding?: string;\n    textAlign?: string;\n    textShadow?: string;\n    transition?: string;\n    webkitFontSmoothing?: string;\n    webkitTransition?: string;\n}\n\nexport interface ThreeDS2OnComplete {\n    data: {\n        details: {\n            'threeds2.challengeResult'?: string;\n            'threeds2.fingerprint'?: string;\n            paymentData: string;\n        };\n    };\n}\n\nexport interface ThreeDSRequiredErrorResponse {\n    errors: [\n        { code: string }\n    ];\n    three_ds_result: {\n        result_code: ResultCode;\n        token?: string;\n        payment_data?: string;\n        acs_url?: string;\n        callback_url?: string;\n        payer_auth_request?: string;\n        merchant_data?: string;\n    };\n    status: string;\n}\n","import { ReadableDataStore } from '@bigcommerce/data-store';\nimport { some } from 'lodash';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { Registry } from '../common/registry';\nimport { RegistryOptions } from '../common/registry/registry';\n\nimport PaymentMethod from './payment-method';\nimport * as paymentMethodTypes from './payment-method-types';\nimport PaymentStrategyType from './payment-strategy-type';\nimport PaymentStrategy from './strategies/payment-strategy';\n\nexport default class PaymentStrategyRegistry extends Registry<PaymentStrategy, PaymentStrategyType> {\n    constructor(\n        private _store: ReadableDataStore<InternalCheckoutSelectors>,\n        options?: PaymentStrategyRegistryOptions\n    ) {\n        super(options);\n    }\n\n    getByMethod(paymentMethod?: PaymentMethod): PaymentStrategy {\n        if (!paymentMethod) {\n            return this.get();\n        }\n\n        const token = this._getToken(paymentMethod);\n\n        const cacheToken = [paymentMethod.gateway, paymentMethod.id]\n            .filter(value => value !== undefined && value !== null)\n            .join('-');\n\n        return this.get(token, cacheToken);\n    }\n\n    private _getToken(paymentMethod: PaymentMethod): PaymentStrategyType {\n        const methodId = paymentMethod.gateway || paymentMethod.id;\n\n        if (this._hasFactoryForMethod(methodId)) {\n            return methodId;\n        }\n\n        if (paymentMethod.type === paymentMethodTypes.OFFLINE) {\n            return PaymentStrategyType.OFFLINE;\n        }\n\n        if (this._isLegacyMethod(paymentMethod)) {\n            return PaymentStrategyType.LEGACY;\n        }\n\n        if (paymentMethod.type === paymentMethodTypes.HOSTED) {\n            return PaymentStrategyType.OFFSITE;\n        }\n\n        return PaymentStrategyType.CREDIT_CARD;\n    }\n\n    private _hasFactoryForMethod(\n        methodId: string\n    ): methodId is PaymentStrategyType {\n        return this._hasFactory(methodId);\n    }\n\n    private _isLegacyMethod(paymentMethod: PaymentMethod): boolean {\n        const config = this._store.getState().config.getStoreConfig();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        const { clientSidePaymentProviders } = config.paymentSettings;\n\n        if (!clientSidePaymentProviders || paymentMethod.gateway === 'adyen') {\n            return false;\n        }\n\n        return !some(clientSidePaymentProviders, id =>\n            paymentMethod.id === id || paymentMethod.gateway === id\n        );\n    }\n}\n\nexport interface PaymentStrategyRegistryOptions extends RegistryOptions {\n    clientSidePaymentProviders?: string[];\n}\n","import { InvalidArgumentError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when we are unable to submit a payment because\n * the caller has not provided all the required fields, i.e.: if an argument is\n * missing or it is not the expected data type.\n */\nexport default class PaymentArgumentInvalidError extends InvalidArgumentError {\n    constructor(invalidFields?: string[]) {\n        let message = 'Unable to submit payment for the order because the payload is invalid.';\n\n        if (invalidFields) {\n            message = `${message} Make sure the following fields are provided correctly: ${invalidFields.join(', ')}.`;\n        }\n\n        super(message);\n\n        this.name = 'PaymentArgumentInvalidError';\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedErrorType,\n    RequestError\n} from '../../../common/error/errors';\nimport NotInitializedError from '../../../common/error/errors/not-initialized-error';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport isVaultedInstrument from '../../is-vaulted-instrument';\nimport Payment, { HostedInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport {\n    AdyenCardState,\n    AdyenCheckout,\n    AdyenComponent,\n    AdyenConfiguration,\n    AdyenError,\n    ResultCode,\n    ThreeDS2ComponentType,\n    ThreeDS2OnComplete,\n    ThreeDS2Result,\n} from './adyenv2';\nimport AdyenV2PaymentInitializeOptions from './adyenv2-initialize-options';\nimport AdyenV2ScriptLoader from './adyenv2-script-loader';\n\nexport default class AdyenV2PaymentStrategy implements PaymentStrategy {\n    private _adyenCheckout?: AdyenCheckout;\n    private _stateContainer?: string;\n    private _adyenv2?: AdyenV2PaymentInitializeOptions;\n    private _adyenComponent?: AdyenComponent;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _adyenV2ScriptLoader: AdyenV2ScriptLoader,\n        private _formPoster: FormPoster,\n        private _locale: string\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { adyenv2 } = options;\n\n        if (!adyenv2) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.adyenv2\" argument is not provided.');\n        }\n\n        const paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._adyenv2 = adyenv2;\n\n        const configuration: AdyenConfiguration = {\n            environment:  paymentMethod.initializationData.environment,\n            locale: this._locale,\n            originKey: paymentMethod.initializationData.originKey,\n            paymentMethodsResponse: paymentMethod.initializationData.paymentMethodsResponse,\n        };\n\n        return this._adyenV2ScriptLoader.load(configuration)\n            .then(adyenCheckout => {\n                this._adyenCheckout = adyenCheckout;\n\n                const adyenComponent = this._adyenCheckout.create(\n                    paymentMethod.method,\n                    {\n                        ...adyenv2.options,\n                        onChange: (state: AdyenCardState) => {\n                            this._updateStateContainer(state);\n                        },\n                    }\n                );\n\n                adyenComponent.mount(`#${adyenv2.containerId}`);\n\n                this._adyenComponent = adyenComponent;\n\n                return Promise.resolve(this._store.getState());\n            });\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n        const shouldSaveInstrument = paymentData && (paymentData as HostedInstrument).shouldSaveInstrument;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() => {\n                if (paymentData && isVaultedInstrument(paymentData)) {\n                    return this._store.dispatch(this._paymentActionCreator.submitPayment({...payment, paymentData}));\n                }\n\n                const paymentPayload = {\n                    methodId: payment.methodId,\n                    paymentData: {\n                        nonce: this._getStateContainer(),\n                        shouldSaveInstrument,\n                    },\n                };\n\n                return this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload));\n            })\n            .catch(error => {\n                if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'three_d_secure_required' })) {\n                    return Promise.reject(error);\n                }\n\n                if (error.body.three_ds_result.result_code === ResultCode.IdentifyShopper) {\n                    return this._handle3DS2Fingerprint(error.body.three_ds_result, payment.methodId)\n                        .then((payment: Payment) =>\n                            this._store.dispatch(this._paymentActionCreator.submitPayment({\n                                ...payment,\n                                paymentData: {\n                                    ...payment.paymentData,\n                                    shouldSaveInstrument,\n                                },\n                            })))\n                        .catch(error => {\n                            if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'three_d_secure_required' })) {\n                                return Promise.reject(error);\n                            }\n\n                            if (error.body.three_ds_result.result_code === ResultCode.ChallengeShopper) {\n                                return this._handle3DS2Challenge(error.body.three_ds_result, payment.methodId)\n                                    .then((payment: Payment) =>\n                                        this._store.dispatch(this._paymentActionCreator.submitPayment({\n                                            ...payment,\n                                            paymentData: {\n                                                ...payment.paymentData,\n                                                shouldSaveInstrument,\n                                            },\n                                        }))\n                                    );\n                            }\n\n                            return Promise.reject(error);\n                        });\n                }\n\n                if (error.body.three_ds_result.result_code === ResultCode.ChallengeShopper) {\n                    return this._handle3DS2Challenge(error.body.three_ds_result, payment.methodId)\n                        .then((payment: Payment) =>\n                            this._store.dispatch(this._paymentActionCreator.submitPayment({\n                                ...payment,\n                                paymentData: {\n                                    ...payment.paymentData,\n                                    shouldSaveInstrument,\n                                },\n                            }))\n                        );\n                }\n\n                return new Promise(() => {\n                    this._formPoster.postForm(error.body.three_ds_result.acs_url, {\n                        PaReq: error.body.three_ds_result.payer_auth_request,\n                        TermUrl: error.body.three_ds_result.callback_url,\n                        MD: error.body.three_ds_result.merchant_data,\n                    });\n                });\n            });\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._adyenComponent) {\n            this._adyenComponent.unmount();\n            this._adyenComponent = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _getAdyenV2PaymentInitializeOptions(): AdyenV2PaymentInitializeOptions {\n        if (!this._adyenv2) {\n            throw new InvalidArgumentError('\"options.adyenv2\" argument was not provided during initialization.');\n        }\n\n        return this._adyenv2;\n    }\n\n    private _getStateContainer(): string {\n        if (!this._stateContainer) {\n            return '{}';\n        }\n\n        return this._stateContainer;\n    }\n\n    private _getThreeDS2ChallengeWidgetSize(): string {\n        const { threeDS2ChallengeWidgetSize } = this._getAdyenV2PaymentInitializeOptions();\n\n        if (!threeDS2ChallengeWidgetSize) {\n            return '01';\n        }\n\n        return threeDS2ChallengeWidgetSize;\n    }\n\n    private _handle3DS2Challenge(resultObject: ThreeDS2Result, paymentMethodId: string): Promise<Payment> {\n        return new Promise((resolve, reject) => {\n            if (!this._adyenCheckout) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            const { on3DSComplete, on3DSLoading } = this._getAdyenV2PaymentInitializeOptions();\n\n            if (!on3DSComplete || !on3DSLoading) {\n                throw new InvalidArgumentError('\"options.adyenv2\" argument was not provided during initialization.');\n            }\n\n            const threeDS2Component = this._adyenCheckout\n                .create(ThreeDS2ComponentType.ThreeDS2Challenge, {\n                    challengeToken: resultObject.token,\n                    onComplete: (challengeData: ThreeDS2OnComplete) => {\n                        const challengePaymentPayload = {\n                            ...challengeData.data,\n                            paymentData: resultObject.payment_data,\n                        };\n\n                        const paymentPayload = {\n                            methodId: paymentMethodId,\n                            paymentData: {\n                                nonce: JSON.stringify(challengePaymentPayload),\n                            },\n                        };\n\n                        on3DSComplete();\n\n                        resolve(paymentPayload);\n                    },\n                    onError: (error: AdyenError) => {\n                        on3DSComplete();\n\n                        reject(error);\n                    },\n                    size: this._getThreeDS2ChallengeWidgetSize(),\n                });\n\n            const threeDS2Container = this._getAdyenV2PaymentInitializeOptions().threeDS2ContainerId;\n\n            threeDS2Component.mount(`#${threeDS2Container}`);\n            on3DSLoading();\n        });\n    }\n\n    private _handle3DS2Fingerprint(resultObject: ThreeDS2Result, paymentMethodId: string): Promise<Payment> {\n        return new Promise((resolve, reject) => {\n            if (!this._adyenCheckout) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            const threeDS2Component = this._adyenCheckout\n                .create(ThreeDS2ComponentType.ThreeDS2DeviceFingerprint, {\n                    fingerprintToken: resultObject.token,\n                    onComplete: (fingerprintData: ThreeDS2OnComplete) => {\n                        const fingerprintPaymentPayload = {\n                            ...fingerprintData.data,\n                            paymentData: resultObject.payment_data,\n                        };\n\n                        const paymentPayload = {\n                            methodId: paymentMethodId,\n                            paymentData: {\n                                nonce: JSON.stringify(fingerprintPaymentPayload),\n                            },\n                        };\n\n                        resolve(paymentPayload);\n                    },\n                    onError: (error: AdyenError) => reject(error),\n                });\n\n            const threeDS2Container = this._getAdyenV2PaymentInitializeOptions().threeDS2ContainerId;\n\n            threeDS2Component.mount(`#${threeDS2Container}`);\n        });\n    }\n\n    private _updateStateContainer(newState: AdyenCardState) {\n        if (newState.isValid) {\n            const state = {\n                ...newState.data.paymentMethod,\n                origin: window.location.origin,\n            };\n\n            this._stateContainer = JSON.stringify(state);\n        }\n    }\n}\n","export enum OrderIncludes {\n    DigitalItemsCategories = 'lineItems.digitalItems.categories',\n    PhysicalItemsCategories = 'lineItems.physicalItems.categories',\n}\n\nexport default interface OrderParams {\n    include?: OrderIncludes[];\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport {\n    AdyenCheckout,\n    AdyenConfiguration,\n    AdyenHostWindow\n} from './adyenv2';\n\nexport default class AdyenV2ScriptLoader {\n    private _stylesheets: { [key: string]: Promise<Event> } = {};\n\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: AdyenHostWindow = window\n    ) {}\n\n    load(configuration: AdyenConfiguration): Promise<AdyenCheckout> {\n        return Promise.all([\n            this._loadStylesheet(`https://checkoutshopper-${configuration.environment}.adyen.com/checkoutshopper/sdk/3.0.0/adyen.css`),\n            this._scriptLoader.loadScript(`https://checkoutshopper-${configuration.environment}.adyen.com/checkoutshopper/sdk/3.0.0/adyen.js`),\n        ])\n        .then(() => {\n            if (!this._window.AdyenCheckout) {\n                throw new PaymentMethodClientUnavailableError();\n            }\n\n            return new this._window.AdyenCheckout(configuration);\n        })\n        .catch(() => {\n            throw new PaymentMethodClientUnavailableError();\n        });\n    }\n\n    private _loadStylesheet(src: string): Promise<Event> {\n        if (!this._stylesheets[src]) {\n            this._stylesheets[src] = new Promise((resolve, reject) => {\n                const stylesheet = document.createElement('link');\n\n                stylesheet.onload = event => {\n                    resolve(event);\n                };\n                stylesheet.onerror = event => {\n                    delete this._stylesheets[src];\n                    reject(event);\n                };\n                stylesheet.type = 'text/css';\n                stylesheet.rel = 'stylesheet';\n                stylesheet.href = src;\n\n                document.head.appendChild(stylesheet);\n            });\n        }\n\n        return this._stylesheets[src];\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when the payment flow is cancelled. It could be\n * due to a deliberate user interaction, i.e.: the user clicks on a cancel\n * button which dismisses the payment modal.\n */\nexport default class PaymentMethodCancelledError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Payment process was cancelled.');\n\n        this.name = 'PaymentMethodCancelledError';\n        this.type = 'payment_cancelled';\n    }\n}\n","import { LineItemCategory } from '../../../cart/line-item';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { AmountTransformer } from '../../../common/utility';\nimport { Order, OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { OrderIncludes } from '../../../order/order-params';\nimport { Consignment } from '../../../shipping';\nimport { PaymentArgumentInvalidError, PaymentMethodCancelledError, PaymentMethodInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { Affirm, AffirmAddress, AffirmDiscount, AffirmFailResponse, AffirmItem, AffirmRequestData, AffirmSuccessResponse } from './affirm';\nimport AffirmScriptLoader from './affirm-script-loader';\n\nexport default class AffirmPaymentStrategy implements PaymentStrategy {\n    private _affirm?: Affirm;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _affirmScriptLoader: AffirmScriptLoader\n    ) { }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(options.methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n                if (!paymentMethod || !paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const { config: { testMode }, clientToken: publicKey } = paymentMethod;\n\n                return this._affirmScriptLoader.load(publicKey, testMode);\n            })\n            .then(affirm => {\n                this._affirm = affirm;\n\n                return this._store.getState();\n            });\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const methodId = payload.payment && payload.payment.methodId;\n        const { useStoreCredit } = payload;\n        const { _affirm } = this;\n\n        if (!_affirm) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!methodId) {\n            throw new PaymentArgumentInvalidError(['payment.methodId']);\n        }\n\n        const requestOptions = {\n            ...options,\n            params: {\n                include: [\n                    OrderIncludes.PhysicalItemsCategories,\n                    OrderIncludes.DigitalItemsCategories,\n                ],\n            },\n        };\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit }, requestOptions))\n            .then<AffirmSuccessResponse>(() => {\n                _affirm.checkout(this._getCheckoutInformation());\n\n                return new Promise((resolve, reject) => {\n                    _affirm.checkout.open({\n                        onFail: (failObject: AffirmFailResponse) => {\n                            failObject.reason === 'canceled' ? reject(new PaymentMethodCancelledError()) : reject(new PaymentMethodInvalidError());\n                        },\n                        onSuccess: successObject => { resolve(successObject); },\n                    });\n                    _affirm.ui.error.on('close', () => {\n                        reject(new PaymentMethodCancelledError());\n                    });\n                });\n            })\n            .then(result => {\n                const paymentPayload = {\n                    methodId,\n                    paymentData: { nonce: result.checkout_token },\n                };\n\n                return this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload));\n            });\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._affirm) {\n            this._affirm = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _getCheckoutInformation(): AffirmRequestData {\n        const state = this._store.getState();\n        const config = state.config.getStoreConfig();\n        const consignments = state.consignments.getConsignments();\n        const order = state.order.getOrder();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!order) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        const amountTransformer = new AmountTransformer(order.currency.decimalPlaces);\n        const billingAddress = this._getBillingAddress();\n\n        return {\n            merchant: {\n                user_confirmation_url: config.links.checkoutLink,\n                user_cancel_url: config.links.checkoutLink,\n                user_confirmation_url_action: 'POST',\n            },\n            shipping: this._getShippingAddress() || billingAddress,\n            billing: billingAddress,\n            items: this._getItems(amountTransformer, order),\n            metadata: {\n                shipping_type: this._getShippingType(consignments),\n                mode: 'modal',\n                platform_type: 'BigCommerce',\n                platform_version: '',\n                platform_affirm: '',\n            },\n            discounts: this._getDiscounts(amountTransformer, order),\n            order_id: order.orderId ? order.orderId.toString() : '',\n            shipping_amount: amountTransformer.toInteger(order.shippingCostTotal),\n            tax_amount: amountTransformer.toInteger(order.taxTotal),\n            total: amountTransformer.toInteger(order.orderAmount),\n        };\n    }\n\n    private _getShippingType(consignments?: Consignment[]): string {\n        if (!consignments) {\n            return '';\n        }\n\n        const consignment = consignments[0];\n\n        return consignment && consignment.selectedShippingOption ?\n            consignment.selectedShippingOption.type : '';\n    }\n\n    private _getBillingAddress(): AffirmAddress {\n        const state = this._store.getState();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!billingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const billingInformation = {\n            name: {\n                first: billingAddress.firstName,\n                last: billingAddress.lastName,\n                full: `${billingAddress.firstName} ${billingAddress.lastName}`,\n            },\n            address: {\n                line1: billingAddress.address1,\n                line2: billingAddress.address2,\n                city: billingAddress.city,\n                state: billingAddress.stateOrProvinceCode,\n                zipcode: billingAddress.postalCode,\n                country: billingAddress.countryCode,\n            },\n            phone_number: billingAddress.phone,\n            email: billingAddress.email,\n        };\n\n        return billingInformation;\n    }\n\n    private _getShippingAddress(): AffirmAddress | undefined {\n        const state = this._store.getState();\n        const shippingAddress = state.shippingAddress.getShippingAddress();\n\n        if (!shippingAddress) {\n            return;\n        }\n\n        const shippingInformation = {\n            name: {\n                first: shippingAddress.firstName,\n                last: shippingAddress.lastName,\n                full: `${shippingAddress.firstName} ${shippingAddress.lastName}`,\n            },\n            address: {\n                line1: shippingAddress.address1,\n                line2: shippingAddress.address2,\n                city: shippingAddress.city,\n                state: shippingAddress.stateOrProvinceCode,\n                zipcode: shippingAddress.postalCode,\n                country: shippingAddress.countryCode,\n            },\n            phone_number: shippingAddress.phone,\n        };\n\n        return shippingInformation;\n    }\n\n    private _getItems(amountTransformer: AmountTransformer, order: Order): AffirmItem[] {\n        const items: AffirmItem[] = [];\n\n        for (const item of order.lineItems.physicalItems) {\n            items.push({\n                display_name: item.name,\n                sku: item.sku,\n                unit_price: amountTransformer.toInteger(item.salePrice),\n                qty: item.quantity,\n                item_image_url: item.imageUrl,\n                item_url: item.url,\n                categories: this._getCategories(item.categories),\n            });\n        }\n\n        for (const item of order.lineItems.digitalItems) {\n            items.push({\n                display_name: item.name,\n                sku: item.sku,\n                unit_price: amountTransformer.toInteger(item.salePrice),\n                qty: item.quantity,\n                item_image_url: item.imageUrl,\n                item_url: item.url,\n                categories: this._getCategories(item.categories),\n            });\n        }\n\n        for (const item of order.lineItems.giftCertificates) {\n            items.push({\n                display_name: item.name,\n                sku: '',\n                unit_price: amountTransformer.toInteger(item.amount),\n                qty: 1,\n                item_image_url: '',\n                item_url: '',\n            });\n        }\n\n        if (order.lineItems.customItems) {\n            for (const item of order.lineItems.customItems) {\n                items.push({\n                    display_name: item.name,\n                    sku: item.sku,\n                    unit_price: amountTransformer.toInteger(item.listPrice),\n                    qty: item.quantity,\n                    item_image_url: '',\n                    item_url: '',\n                });\n            }\n        }\n\n        return items;\n    }\n\n    private _getDiscounts(amountTransformer: AmountTransformer, order: Order): AffirmDiscount {\n        const discounts: AffirmDiscount = {};\n\n        for (const line of order.coupons) {\n            if (line.discountedAmount > 0) {\n                discounts[line.code] = {\n                    discount_amount: amountTransformer.toInteger(line.discountedAmount),\n                    discount_display_name: line.displayName,\n                };\n            }\n        }\n\n        if (order.discountAmount > 0) {\n            discounts.DISCOUNTED_AMOUNT = {\n                discount_amount: amountTransformer.toInteger(order.discountAmount),\n                discount_display_name: 'discount',\n            };\n        }\n\n        return discounts;\n    }\n\n    private _getCategories(categories?: LineItemCategory[][]): string[][] {\n        if (!categories) {\n            return[[]];\n        }\n\n        return categories.map(categoryTree => categoryTree.map(category => category.name));\n    }\n}\n","/**\n * Used this approach as Affirm uses snipped for initializing. Please refer to Affirm documentation in: https://docs.affirm.com/Integrate_Affirm/Direct_API#1._Add_Affirm.js\n */\nexport default Function(`\n'use strict';\nreturn function loadAffirmJS(apiKey, scriptURL) {\n    var _affirm_config = {\n        public_api_key:  apiKey,\n        script:          scriptURL\n    };\n    (function(l,g,m,e,a,f,b){var d,c=l[m]||{},h=document.createElement(f),n=document.getElementsByTagName(f)[0],k=function(a,b,c){return function(){a[b]._.push([c,arguments])}};c[e]=k(c,e,\"set\");d=c[e];c[a]={};c[a]._=[];d._=[];c[a][b]=k(c,a,b);a=0;for(b=\"set add save post open empty reset on off trigger ready setProduct\".split(\" \");a<b.length;a++)d[b[a]]=k(c,e,b[a]);a=0;for(b=[\"get\",\"token\",\"url\",\"items\"];a<b.length;a++)d[b[a]]=function(){};h.async=!0;h.src=g[f];n.parentNode.insertBefore(h,n);delete g[f];d(g);l[m]=c})(window,_affirm_config,\"affirm\",\"checkout\",\"ui\",\"script\",\"ready\");\n}`)();\n","import { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { Affirm, AffirmHostWindow, AffirmScripts } from './affirm';\nimport loadAffirmJS from './affirmJs';\n\nexport default class AffirmScriptLoader {\n    constructor(\n        public _window: AffirmHostWindow = window\n    ) { }\n\n    load(apikey?: string, testMode?: boolean): Promise<Affirm> {\n        const scriptURI = this._getScriptURI(testMode);\n\n        loadAffirmJS(apikey, scriptURI);\n\n        if (!this._window.affirm) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return Promise.resolve(this._window.affirm);\n    }\n\n    private _getScriptURI(testMode: boolean = false): string {\n        const SCRIPTS_DEFAULT: AffirmScripts = {\n            PROD: '//cdn1.affirm.com/js/v2/affirm.js',\n            SANDBOX: '//cdn1-sandbox.affirm.com/js/v2/affirm.js',\n        };\n\n        return testMode ? SCRIPTS_DEFAULT.SANDBOX : SCRIPTS_DEFAULT.PROD;\n    }\n}\n","import { CheckoutStore, CheckoutValidator, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { StoreCreditActionCreator } from '../../../store-credit';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport AfterpayScriptLoader from './afterpay-script-loader';\nimport AfterpaySdk from './afterpay-sdk';\n\nexport default class AfterpayPaymentStrategy implements PaymentStrategy {\n    private _afterpaySdk?: AfterpaySdk;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutValidator: CheckoutValidator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _storeCreditActionCreator: StoreCreditActionCreator,\n        private _afterpayScriptLoader: AfterpayScriptLoader\n    ) {}\n\n    async initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId, options.gatewayId);\n        const config = state.config.getStoreConfig();\n        const storeCountryName = config ? config.storeProfile.storeCountry : '';\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._afterpaySdk = await this._afterpayScriptLoader.load(paymentMethod, this._mapCountryToISO2(storeCountryName));\n\n        return this._store.getState();\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._afterpaySdk) {\n            this._afterpaySdk = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const paymentId = payload.payment && payload.payment.gatewayId;\n\n        if (!paymentId) {\n            throw new PaymentArgumentInvalidError(['payment.gatewayId']);\n        }\n\n        let state = this._store.getState();\n        const config = state.config.getStoreConfig();\n        const storeCountryName = config ? config.storeProfile.storeCountry : '';\n        const { useStoreCredit } = payload;\n\n        if (useStoreCredit !== undefined) {\n            state = await this._store.dispatch(\n                this._storeCreditActionCreator.applyStoreCredit(useStoreCredit)\n            );\n        }\n\n        await this._checkoutValidator.validate(state.checkout.getCheckout(), options);\n\n        state = await this._store.dispatch(\n            this._paymentMethodActionCreator.loadPaymentMethod(paymentId, options)\n        );\n\n        await this._redirectToAfterpay(storeCountryName, state.paymentMethods.getPaymentMethod(paymentId));\n\n        // Afterpay will handle the rest of the flow so return a promise that doesn't really resolve\n        return new Promise<never>(() => {});\n    }\n\n    async finalize(options: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n        const config = state.config.getContextConfig();\n\n        if (!payment) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!config || !config.payment.token) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        const paymentPayload = {\n            methodId: payment.providerId,\n            paymentData: { nonce: config.payment.token },\n        };\n\n        await this._store.dispatch(this._orderActionCreator.submitOrder({}, options));\n\n        return this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload));\n    }\n\n    private _redirectToAfterpay(countryName: string, paymentMethod?: PaymentMethod): void {\n        if (!this._afterpaySdk || !paymentMethod || !paymentMethod.clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._afterpaySdk.initialize({ countryCode: this._mapCountryToISO2(countryName)});\n        this._afterpaySdk.redirect({ token: paymentMethod.clientToken });\n    }\n\n    private _mapCountryToISO2(countryName: string): string {\n        switch (countryName) {\n        case 'Australia':\n            return 'AU';\n\n        case 'New Zealand':\n            return 'NZ';\n\n        case 'United States':\n            return 'US';\n\n        default:\n            return 'AU';\n        }\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport PaymentMethod from '../../payment-method';\n\nimport AfterpaySdk from './afterpay-sdk';\nimport AfterpayWindow from './afterpay-window';\n\ninterface AfterpayScripts {\n    PROD: string;\n    SANDBOX: string;\n}\n\nconst SCRIPTS_DEFAULT: AfterpayScripts = {\n    PROD: '//portal.afterpay.com/afterpay-async.js',\n    SANDBOX: '//portal-sandbox.afterpay.com/afterpay-async.js',\n};\n\nconst SCRIPTS_US: AfterpayScripts = {\n    PROD: '//portal.afterpay.com/afterpay-async.js',\n    SANDBOX: '//portal.us-sandbox.afterpay.com/afterpay-async.js',\n};\n\n/** Class responsible for loading the Afterpay SDK */\nexport default class AfterpayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    /**\n     * Loads the appropriate Afterpay SDK depending on the payment method data.\n     * @param method the payment method data\n     */\n    load(method: PaymentMethod, countryCode: string): Promise<AfterpaySdk> {\n        const testMode = method.config.testMode || false;\n        const scriptURI = this._getScriptURI(countryCode, testMode);\n\n        return this._scriptLoader.loadScript(scriptURI)\n            .then(() => (window as unknown as AfterpayWindow).AfterPay);\n    }\n\n    private _getScriptURI(countryCode: string, testMode: boolean): string {\n        if (countryCode === 'US') {\n            return testMode ? SCRIPTS_US.SANDBOX : SCRIPTS_US.PROD;\n        }\n\n        return testMode ? SCRIPTS_DEFAULT.SANDBOX : SCRIPTS_DEFAULT.PROD;\n    }\n\n}\n","import { isEqual } from 'lodash';\n\nimport { omitPrivate } from '../common/utility';\n\nimport InternalAddress from './internal-address';\n\nexport default function isInternalAddressEqual(addressA: Partial<InternalAddress>, addressB: Partial<InternalAddress>): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<InternalAddress>): Partial<InternalAddress> {\n    const ignoredKeys = ['id', 'provinceCode'];\n\n    return (Object.keys(omitPrivate(address) || {}) as Array<keyof InternalAddress>)\n        .reduce(\n            (result, key) => ignoredKeys.indexOf(key) === -1 && address[key] ?\n                { ...result, [key]: address[key] } :\n                result,\n            {}\n        );\n}\n","import isPrivate from './is-private';\nimport omitDeep from './omit-deep';\n\nexport default function omitPrivate(object: any): any {\n    return omitDeep(object, (_: any, key: string) => isPrivate(key));\n}\n","import { BillingAddress } from '../billing';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\nexport default function mapFromInternalAddress(address: InternalAddress): Address | BillingAddress {\n    return {\n        id: address.id,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        address1: address.addressLine1,\n        address2: address.addressLine2,\n        city: address.city,\n        stateOrProvince: address.province,\n        stateOrProvinceCode: address.provinceCode,\n        postalCode: address.postCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","import { noop } from 'lodash';\n\nimport {\n    isInternalAddressEqual,\n    mapFromInternalAddress,\n    mapToInternalAddress\n} from '../../../address';\nimport { BillingAddressActionCreator } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    RequestError\n} from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport AmazonPayConfirmationFlow from './amazon-pay-confirmation-flow';\nimport AmazonPayOrderReference from './amazon-pay-order-reference';\nimport AmazonPayPaymentInitializeOptions from './amazon-pay-payment-initialize-options';\nimport AmazonPayScriptLoader from './amazon-pay-script-loader';\nimport AmazonPayWallet, { AmazonPayWalletOptions } from './amazon-pay-wallet';\nimport AmazonPayWindow from './amazon-pay-window';\n\nexport default class AmazonPayPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _walletOptions?: AmazonPayPaymentInitializeOptions;\n    private _window: AmazonPayWindow;\n    private _isPaymentMethodSelected: boolean;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        this._window = window;\n        this._isPaymentMethodSelected = false;\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { amazon: amazonOptions, methodId } = options;\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (!amazonOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.amazon\" argument is not provided.');\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._walletOptions = amazonOptions;\n        this._paymentMethod = paymentMethod;\n\n        return new Promise((resolve, reject) => {\n            const onReady = () => {\n                this._createWallet(amazonOptions)\n                    .then(resolve)\n                    .catch(reject);\n            };\n\n            this._scriptLoader.loadWidget(paymentMethod, onReady)\n                .catch(reject);\n        })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._walletOptions = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const referenceId = this._getOrderReferenceId();\n        const sellerId = this._getMerchantId();\n\n        if (!referenceId || !sellerId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!payload.payment) {\n            throw new InvalidArgumentError('Unable to proceed because \"payload.payment.methodId\" argument is not provided.');\n        }\n\n        if (!this._isPaymentMethodSelected) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { payment: { paymentData, ...paymentPayload }, useStoreCredit = false } = payload;\n\n        if (options && this._paymentMethod && this._paymentMethod.config.is3dsEnabled) {\n            return this._processPaymentWith3ds(\n                sellerId,\n                referenceId,\n                paymentPayload.methodId,\n                useStoreCredit,\n                options\n            );\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializePayment(paymentPayload.methodId, { referenceId, useStoreCredit })\n        )\n            .then(() => this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: paymentPayload,\n                }, options)\n            ))\n            .catch(error => {\n                if (error instanceof RequestError && error.body.type === 'provider_widget_error' && this._walletOptions) {\n                    return this._createWallet(this._walletOptions)\n                        .then(() => Promise.reject(error));\n                }\n\n                return Promise.reject(error);\n            });\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _getMerchantId(): string | undefined {\n        return this._paymentMethod && this._paymentMethod.config.merchantId;\n    }\n\n    private _getOrderReferenceId(): string | undefined {\n        const state = this._store.getState();\n        const amazon = state.remoteCheckout.getCheckout('amazon');\n\n        return amazon ? amazon.referenceId : undefined;\n    }\n\n    private _getOrderReferenceIdFromInitializationData(): string | undefined {\n        return this._paymentMethod ? this._paymentMethod.initializationData.orderReferenceId : undefined;\n    }\n\n    private _createWallet(options: AmazonPayPaymentInitializeOptions): Promise<AmazonPayWallet> {\n        return new Promise((resolve, reject) => {\n            const { container, onError = noop, onPaymentSelect = noop, onReady = noop } = options;\n            const referenceId = this._getOrderReferenceId() || this._getOrderReferenceIdFromInitializationData();\n            const merchantId = this._getMerchantId();\n\n            if (!document.getElementById(container)) {\n                return reject(new InvalidArgumentError('Unable to create AmazonPay Wallet widget without valid container ID.'));\n            }\n\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized));\n            }\n\n            if (!merchantId) {\n                return reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n            }\n\n            const walletOptions: AmazonPayWalletOptions = {\n                amazonOrderReferenceId: referenceId,\n                design: { designMode: 'responsive' },\n                scope: 'payments:billing_address payments:shipping_address payments:widget profile',\n                sellerId: merchantId,\n                onError: error => {\n                    reject(error);\n                    onError(error);\n                },\n                onPaymentSelect: orderReference => {\n                    this._synchronizeBillingAddress()\n                        .then(() => {\n                            this._isPaymentMethodSelected = true;\n                            onPaymentSelect(orderReference);\n                        })\n                        .catch(onError);\n                },\n                onReady: orderReference => {\n                    resolve();\n                    onReady(orderReference);\n                },\n            };\n\n            if (!this._getOrderReferenceId()) {\n                walletOptions.onReady = orderReference => {\n                    this._updateOrderReference(orderReference)\n                        .then(() => {\n                            resolve();\n                            onReady(orderReference);\n                        })\n                        .catch(onError);\n                };\n            }\n\n            const widget = new this._window.OffAmazonPayments.Widgets.Wallet(walletOptions);\n\n            widget.bind(container);\n\n            return widget;\n        });\n    }\n\n    private _synchronizeBillingAddress(): Promise<InternalCheckoutSelectors> {\n        const referenceId = this._getOrderReferenceId();\n        const methodId = this._paymentMethod && this._paymentMethod.id;\n\n        if (!methodId || !referenceId) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializeBilling(methodId, { referenceId })\n        )\n            .then(state => {\n                const amazon = state.remoteCheckout.getCheckout('amazon');\n                const remoteAddress = amazon && amazon.billing && amazon.billing.address;\n                const billingAddress = state.billingAddress.getBillingAddress();\n                const internalBillingAddress = billingAddress && mapToInternalAddress(billingAddress);\n\n                if (remoteAddress === false) {\n                    throw new RemoteCheckoutSynchronizationError();\n                }\n\n                if (!remoteAddress || isInternalAddressEqual(remoteAddress, internalBillingAddress || {})) {\n                    return this._store.getState();\n                }\n\n                return this._store.dispatch(\n                    this._billingAddressActionCreator.updateAddress(mapFromInternalAddress(remoteAddress))\n                );\n            });\n    }\n\n    private _updateOrderReference(orderReference: AmazonPayOrderReference): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.updateCheckout('amazon', {\n                referenceId: orderReference.getAmazonOrderReferenceId(),\n            })\n        );\n    }\n\n    private _processPaymentWith3ds(sellerId: string, referenceId: string, methodId: string, useStoreCredit: boolean, options: PaymentRequestOptions): Promise<never> {\n        return new Promise((_, reject) => {\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized));\n            }\n\n            return this._window.OffAmazonPayments.initConfirmationFlow(\n                sellerId,\n                referenceId,\n                (confirmationFlow: AmazonPayConfirmationFlow) => {\n                    return this._store.dispatch(\n                        this._orderActionCreator.submitOrder({useStoreCredit}, options)\n                    )\n                        .then(() => this._store.dispatch(\n                            this._remoteCheckoutActionCreator.initializePayment(methodId, {\n                                referenceId,\n                                useStoreCredit,\n                            }))\n                        )\n                        .then(() => {\n                            confirmationFlow.success();\n\n                            return new Promise<never>(() => {});\n                        })\n                        .catch(error => {\n                            confirmationFlow.error();\n\n                            return reject(error);\n                        });\n                }\n            );\n        });\n    }\n}\n","export interface OverlayOptions {\n    background?: string;\n    id?: string;\n    transitionDuration?: number;\n}\n\nexport interface OverlayShowOptions {\n    onClick?(event: MouseEvent): void;\n}\n\nexport default class Overlay {\n    private _element: HTMLElement;\n    private _unregisterClick?: () => void;\n\n    constructor(options?: OverlayOptions) {\n        this._element = this._createElement(options);\n    }\n\n    show(options?: OverlayShowOptions): void {\n        if (this._element.parentElement) {\n            return;\n        }\n\n        this._registerClick(options);\n\n        document.body.appendChild(this._element);\n\n        // Fade In\n        setTimeout(() => this._element.style.opacity = '1');\n    }\n\n    remove(): void {\n        if (!this._element.parentElement) {\n            return;\n        }\n\n        if (this._unregisterClick) {\n            this._unregisterClick();\n        }\n\n        this._removeAfterTransition();\n\n        setTimeout(() => this._element.style.opacity = '0');\n    }\n\n    private _createElement(options?: OverlayOptions): HTMLElement {\n        const element = document.createElement('div');\n        const {\n            background = 'rgba(0, 0, 0, 0.8)',\n            id = null,\n            transitionDuration = 400,\n        } = options || {};\n\n        element.style.background = background;\n        element.style.display = 'block';\n        element.style.height = '100%';\n        element.style.left = '0px';\n        element.style.opacity = '0';\n        element.style.position = 'fixed';\n        element.style.top = '0px';\n        element.style.transition = `opacity ${transitionDuration}ms ease-out`;\n        element.style.width = '100%';\n        element.style.zIndex = '2147483647';\n\n        if (id) {\n            element.id = id;\n        }\n\n        return element;\n    }\n\n    private _registerClick(options?: OverlayShowOptions): void {\n        if (this._unregisterClick) {\n            this._unregisterClick();\n        }\n\n        if (options && options.onClick) {\n            const { onClick } = options;\n\n            this._element.addEventListener('click', onClick);\n\n            this._unregisterClick = () => {\n                this._element.removeEventListener('click', onClick);\n                this._unregisterClick = undefined;\n            };\n        }\n    }\n\n    private _removeAfterTransition(): void {\n        const handeTransition: (event: Event) => void = event => {\n            // NOTE: `event` is not correctly typed in this version of TS\n            if ((event as TransitionEvent).propertyName !== 'opacity') {\n                return;\n            }\n\n            if (this._element.parentElement) {\n                this._element.parentElement.removeChild(this._element);\n            }\n\n            this._element.removeEventListener('transitionend', handeTransition);\n        };\n\n        this._element.addEventListener('transitionend', handeTransition);\n    }\n}\n","export default class CancellablePromise<T> {\n    promise: Promise<T>;\n    cancel!: (reason?: any) => void;\n\n    constructor(promise: Promise<T>) {\n        const cancellable = new Promise<T>((_, reject) => {\n            this.cancel = reject;\n        });\n\n        this.promise = Promise.race([promise, cancellable]);\n    }\n}\n","import { Address } from '../../../address';\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { Overlay } from '../../../common/overlay';\nimport { CancellablePromise } from '../../../common/utility';\nimport { OrderPaymentRequestBody } from '../../../order';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport { CreditCardInstrument, NonceInstrument } from '../../payment';\n\nimport { BraintreePaypal, BraintreeRequestData } from './braintree';\nimport { BraintreePaymentInitializeOptions, BraintreeThreeDSecureOptions } from './braintree-payment-options';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\n\nexport default class BraintreePaymentProcessor {\n    private _threeDSecureOptions?: BraintreeThreeDSecureOptions;\n\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _overlay: Overlay\n    ) {}\n\n    initialize(clientToken: string, options?: BraintreePaymentInitializeOptions): void {\n        this._braintreeSDKCreator.initialize(clientToken);\n        this._threeDSecureOptions = options && options.threeDSecure;\n    }\n\n    preloadPaypal(): Promise<BraintreePaypal> {\n        return this._braintreeSDKCreator.getPaypal();\n    }\n\n    tokenizeCard(payment: OrderPaymentRequestBody, billingAddress: Address): Promise<NonceInstrument> {\n        const { paymentData } = payment;\n        const requestData = this._mapToCreditCard(paymentData as CreditCardInstrument, billingAddress);\n\n        return this._braintreeSDKCreator.getClient()\n            .then(client => client.request(requestData))\n            .then(({ creditCards }) => ({\n                nonce: creditCards[0].nonce,\n            }));\n    }\n\n    paypal(amount: number, storeLanguage: string, currency: string, offerCredit: boolean): Promise<NonceInstrument> {\n        return this._braintreeSDKCreator.getPaypal()\n            .then(paypal => {\n                this._overlay.show({\n                    onClick: () => paypal.focusWindow(),\n                });\n\n                return paypal.tokenize({\n                    amount,\n                    currency,\n                    enableShippingAddress: true,\n                    flow: 'checkout',\n                    locale: storeLanguage,\n                    offerCredit,\n                    useraction: 'commit',\n                });\n            })\n            .then(response => {\n                this._overlay.remove();\n\n                return response;\n            })\n            .catch(error => {\n                this._overlay.remove();\n\n                throw error;\n            });\n    }\n\n    verifyCard(payment: OrderPaymentRequestBody, billingAddress: Address, amount: number): Promise<NonceInstrument> {\n        if (!this._threeDSecureOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { addFrame, removeFrame } = this._threeDSecureOptions;\n\n        return Promise.all([\n            this.tokenizeCard(payment, billingAddress),\n            this._braintreeSDKCreator.get3DS(),\n        ]).then(([paymentData, threeDSecure]) => {\n            const { nonce } = paymentData;\n            const cancelVerifyCard = () => threeDSecure.cancelVerifyCard()\n                .then(response => {\n                    verification.cancel(new PaymentMethodCancelledError());\n\n                    return response;\n                });\n\n            const verification = new CancellablePromise(\n                threeDSecure.verifyCard({\n                    addFrame: (error, iframe) => {\n                        addFrame(error, iframe, cancelVerifyCard);\n                    },\n                    amount,\n                    nonce,\n                    removeFrame,\n                })\n            );\n\n            return verification.promise;\n        });\n    }\n\n    appendSessionId(processedPayment: Promise<NonceInstrument>): Promise<NonceInstrument> {\n        return processedPayment\n            .then(paymentData => Promise.all([paymentData, this._braintreeSDKCreator.getDataCollector()]))\n            .then(([paymentData, { deviceData }]) => ({ ...paymentData, deviceSessionId: deviceData }));\n    }\n\n    deinitialize(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    private _mapToCreditCard(creditCard: CreditCardInstrument, billingAddress: Address): BraintreeRequestData {\n        let streetAddress = billingAddress.address1;\n\n        if (billingAddress.address2) {\n            streetAddress = ` ${billingAddress.address2}`;\n        }\n\n        return {\n            data: {\n                creditCard: {\n                    cardholderName: creditCard.ccName,\n                    number: creditCard.ccNumber,\n                    cvv: creditCard.ccCvv,\n                    expirationDate: `${creditCard.ccExpiry.month}/${creditCard.ccExpiry.year}`,\n                    options: {\n                        validate: false,\n                    },\n                    billingAddress: {\n                        countryName: billingAddress.country,\n                        postalCode: billingAddress.postalCode,\n                        streetAddress,\n                    },\n                },\n            },\n            endpoint: 'payment_methods/credit_cards',\n            method: 'post',\n        };\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when a payment method experiences some kind of\n * failure (i.e.: its client library returns a rejected promise). And there is\n * no other error type that is more specific than this one.\n */\nexport default class PaymentMethodFailedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unable to proceed because the client library of a payment method has thrown an unexpected error.');\n\n        this.name = 'PaymentMethodFailedError';\n        this.type = 'payment_method_client_invalid';\n    }\n}\n","import isVaultedInstrument from './is-vaulted-instrument';\nimport { CreditCardInstrument, PaymentInstrument } from './payment';\n\nexport default function isCreditCardLike(instrument: PaymentInstrument): instrument is CreditCardInstrument {\n    const card = instrument as CreditCardInstrument;\n\n    return !isVaultedInstrument(card) &&\n        typeof card.ccName === 'string' &&\n        typeof card.ccNumber === 'string' &&\n        typeof card.ccExpiry === 'object' &&\n        typeof card.ccExpiry.month === 'string' &&\n        typeof card.ccExpiry.year === 'string';\n    }\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError, PaymentMethodFailedError } from '../../errors';\nimport isCreditCardLike from '../../is-credit-card-like';\nimport isVaultedInstrument from '../../is-vaulted-instrument';\nimport Payment, { PaymentInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\n\nexport default class BraintreeCreditCardPaymentStrategy implements PaymentStrategy {\n    private _is3dsEnabled?: boolean;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _braintreePaymentProcessor: BraintreePaymentProcessor\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(options.methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n                if (!paymentMethod || !paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._braintreePaymentProcessor.initialize(paymentMethod.clientToken, options.braintree);\n                this._is3dsEnabled = paymentMethod.config.is3dsEnabled;\n\n                return this._store.getState();\n            })\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return this._store.dispatch(\n            this._orderActionCreator.submitOrder(order, options)\n        )\n            .then(state =>\n                state.payment.isPaymentDataRequired(order.useStoreCredit) && payment ?\n                    this._preparePaymentData(payment) :\n                    Promise.resolve(payment as Payment)\n            )\n            .then(payment =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment(payment))\n            )\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return this._braintreePaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new PaymentMethodFailedError(error.message);\n        }\n\n        throw error;\n    }\n\n    private _isUsingVaulting(paymentData: PaymentInstrument): boolean {\n        if (isCreditCardLike(paymentData)) {\n            return Boolean(paymentData.shouldSaveInstrument);\n        }\n\n        return isVaultedInstrument(paymentData);\n    }\n\n    private _preparePaymentData(payment: OrderPaymentRequestBody): Promise<Payment> {\n        const { paymentData } = payment;\n        const state = this._store.getState();\n\n        if (paymentData && this._isUsingVaulting(paymentData)) {\n            return Promise.resolve(payment as Payment);\n        }\n\n        const order = state.order.getOrder();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!order) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrder);\n        }\n\n        if (!billingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const tokenizedCard = this._is3dsEnabled ?\n            this._braintreePaymentProcessor.verifyCard(payment, billingAddress, order.orderAmount) :\n            this._braintreePaymentProcessor.tokenizeCard(payment, billingAddress);\n\n        return this._braintreePaymentProcessor.appendSessionId(tokenizedCard)\n            .then(paymentData => ({ ...payment, paymentData }));\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError, PaymentMethodCancelledError, PaymentMethodFailedError } from '../../errors';\nimport Payment from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { BraintreeError } from './braintree';\nimport BraintreePaymentProcessor from './braintree-payment-processor';\nimport isBraintreeError from './is-braintree-error';\n\nexport default class BraintreePaypalPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _braintreePaymentProcessor: BraintreePaymentProcessor,\n        private _credit: boolean = false\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintree: braintreeOptions, methodId } = options;\n\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (this._paymentMethod && this._paymentMethod.nonce) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._braintreePaymentProcessor.initialize(this._paymentMethod.clientToken, braintreeOptions);\n\n                return this._braintreePaymentProcessor.preloadPaypal();\n            })\n            .then(() => this._store.getState())\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return (payment ? this._preparePaymentData(payment, order.useStoreCredit) : Promise.resolve(payment))\n            .then(payment => Promise.all([payment, this._store.dispatch(this._orderActionCreator.submitOrder(order, options))]))\n            .then(([payment]) => this._store.dispatch(this._paymentActionCreator.submitPayment(payment)))\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return this._braintreePaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _handleError(error: BraintreeError | Error): never {\n        if (!isBraintreeError(error)) {\n            throw error;\n        }\n\n        if (error.code === 'PAYPAL_POPUP_CLOSED') {\n            throw new PaymentMethodCancelledError(error.message);\n        }\n\n        throw new PaymentMethodFailedError(error.message);\n    }\n\n    private _preparePaymentData(payment: OrderPaymentRequestBody, useStoreCredit?: boolean): Promise<Payment> {\n        const state = this._store.getState();\n        const grandTotal = state.checkout.getOutstandingBalance(useStoreCredit);\n        const config = state.config.getStoreConfig();\n\n        if (!grandTotal) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { currency, storeProfile: { storeLanguage } } = config;\n        const { method, nonce } = this._paymentMethod;\n\n        if (nonce) {\n            return Promise.resolve({ ...payment, paymentData: { nonce, method } });\n        }\n\n        const tokenizedCard = this._braintreePaymentProcessor\n            .paypal(grandTotal, storeLanguage, currency.code, this._credit);\n\n        return this._braintreePaymentProcessor.appendSessionId(tokenizedCard)\n            .then(paymentData => ({ ...payment, paymentData: { ...paymentData, method } }));\n    }\n}\n","export const CardinalSignatureValidationErrors = [100004, 1010, 1011, 1020];\n\nexport interface CardinalSDK {\n    configure(params: CardinalConfiguration): void;\n    on(params: CardinalEventType, callback: CardinalEventMap[CardinalEventType]): void;\n    off(params: CardinalEventType): void;\n    setup<K extends keyof CardinalInitializationDataMap>(initializationType: K, initializationData: CardinalInitializationDataMap[K]): void;\n    trigger(event: CardinalTriggerEvents, data?: string): Promise<CardinalBinProcessResponse | void>;\n    continue(paymentBrand: CardinalPaymentBrand, continueObject: CardinalContinue, order: CardinalPartialOrder): void;\n    start(paymentBrand: CardinalPaymentBrand, order: CardinalPartialOrder, jwt?: string): void;\n}\n\nexport interface CardinalWindow extends Window {\n    Cardinal?: CardinalSDK;\n}\n\nexport interface CardinalEventMap {\n    [CardinalEventType.SetupCompleted](setupCompleteData: CardinalSetupCompletedData): void;\n    [CardinalEventType.Validated](data: CardinalValidatedData, jwt?: string): void;\n}\n\nexport type CardinalConfiguration = Partial<{\n    logging: {\n        level: string;\n    };\n    payment: {\n        view: string;\n        framework: string;\n        displayLoading: boolean;\n    };\n}>;\n\nexport interface CardinalSetupCompletedData {\n    sessionId: string;\n    modules: CardinalModuleState[];\n}\n\nexport interface CardinalModuleState {\n    loaded: boolean;\n    module: string;\n}\n\nexport enum CardinalInitializationType {\n    Init = 'init',\n    Complete = 'complete',\n    Confirm = 'confirm',\n}\n\nexport interface CardinalInitializationDataMap {\n    [CardinalInitializationType.Init]: CardinalInitTypeData;\n    [CardinalInitializationType.Complete]: CardinalCompleteTypeData;\n    [CardinalInitializationType.Confirm]: CardinalConfirmTypeData;\n}\n\nexport interface CardinalInitTypeData {\n    jwt: string;\n}\n\nexport interface CardinalCompleteTypeData {\n    Status: string;\n}\n\nexport interface CardinalConfirmTypeData {\n    jwt: string;\n    cardinalResponseJwt: string;\n}\n\nexport interface CardinalValidatedData {\n    ActionCode?: CardinalValidatedAction;\n    ErrorDescription: string;\n    ErrorNumber: number;\n    Validated: boolean;\n    Payment?: CardinalPayment;\n}\n\nexport interface CardinalPayment {\n    ExtendedData?: CardinalCCAExtendedData;\n    ProcessorTransactionId: string;\n    Type: CardinalPaymentType;\n}\n\nexport interface CardinalBinProcessResponse {\n    Status: boolean;\n}\n\nexport interface CardinalContinue {\n    AcsUrl: string;\n    Payload: string;\n}\n\nexport interface CardinalPartialOrder {\n    OrderDetails: CardinalOrderDetails;\n    Consumer?: CardinalConsumer;\n}\n\nexport interface CardinalConsumer {\n    Email1?: string;\n    Email2?: string;\n    ShippingAddress?: CardinalAddress;\n    BillingAddress?: CardinalAddress;\n    Account?: CardinalAccount;\n}\n\nexport interface CardinalAccount {\n    AccountNumber: number;\n    ExpirationMonth: number;\n    ExpirationYear: number;\n    NameOnAccount: string;\n    CardCode: number;\n}\n\nexport interface CardinalAddress {\n    FullName?: string;\n    FirstName: string;\n    MiddleName?: string;\n    LastName: string;\n    Address1: string;\n    Address2?: string;\n    Address3?: string;\n    City: string;\n    State: string;\n    PostalCode: string;\n    CountryCode: string;\n    Phone1?: string;\n    Phone2?: string;\n}\n\nexport interface CardinalOrderDetails {\n    OrderNumber: string;\n    Amount: number;\n    CurrencyCode: string;\n    OrderDescription?: string;\n    OrderChannel: string;\n    TransactionId?: string;\n}\n\nexport type CardinalCCAExtendedData = Partial<{\n    CAVV: string;\n    ECIFlag: string;\n    PAResStatus: string;\n    SignatureVerification: string;\n    XID: string;\n    UCAFIndicator: string;\n}>;\n\nexport enum CardinalEventType {\n    SetupCompleted = 'payments.setupComplete',\n    Validated = 'payments.validated',\n}\n\nexport enum CardinalValidatedAction {\n    Success = 'SUCCESS',\n    NoAction = 'NOACTION',\n    Failure = 'FAILURE',\n    Error = 'ERROR',\n}\n\nexport enum CardinalPaymentType {\n    CCA = 'CCA',\n    Paypal = 'Paypal',\n    Wallet = 'Wallet',\n    VisaCheckout = 'VisaCheckout',\n    ApplePay = 'ApplePay',\n    DiscoverWallet = 'DiscoverWallet',\n}\n\nexport enum CardinalTriggerEvents {\n    BinProcess = 'bin.process',\n}\n\nexport enum CardinalPaymentBrand {\n    CCA = 'cca',\n}\n\nexport enum CardinalSignatureVerification {\n    Yes = 'Y',\n    No = 'N',\n}\n","import { BraintreeError } from './braintree';\n\nexport default function isBraintreeError(error: BraintreeError | Error): error is BraintreeError {\n    return error.name === 'BraintreeError';\n}\n","import { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentMethodFailedError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\n\nimport BraintreeVisaCheckoutPaymentProcessor from './braintree-visacheckout-payment-processor';\nimport { VisaCheckoutPaymentSuccessPayload } from './visacheckout';\nimport VisaCheckoutScriptLoader from './visacheckout-script-loader';\n\nexport default class BraintreeVisaCheckoutPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _braintreeVisaCheckoutPaymentProcessor: BraintreeVisaCheckoutPaymentProcessor,\n        private _visaCheckoutScriptLoader: VisaCheckoutScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintreevisacheckout: visaCheckoutOptions, methodId } = options;\n\n        if (!visaCheckoutOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.braintreevisacheckout\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const checkout = state.checkout.getCheckout();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const {\n                    onError = () => {},\n                    onPaymentSelect = () => {},\n                } = visaCheckoutOptions;\n\n                const initOptions = {\n                    locale: storeConfig.storeProfile.storeLanguage,\n                    collectShipping: false,\n                    subtotal: checkout.subtotal,\n                    currencyCode: storeConfig.currency.code,\n                };\n\n                return Promise.all([\n                    this._visaCheckoutScriptLoader.load(this._paymentMethod.config.testMode),\n                    this._braintreeVisaCheckoutPaymentProcessor.initialize(this._paymentMethod.clientToken, initOptions),\n                ])\n                .then(([visaCheckout, visaInitOptions]) => {\n                    visaCheckout.init(visaInitOptions);\n                    visaCheckout.on('payment.success', (paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) =>\n                        this._paymentInstrumentSelected(paymentSuccessPayload)\n                            .then(() => onPaymentSelect())\n                            .catch(error => onError(error))\n                    );\n                    visaCheckout.on('payment.error', (_, error) => onError(error));\n                });\n            })\n            .then(() => this._store.getState());\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment\" argument is not provided.');\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData || !this._paymentMethod.initializationData.nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { nonce } = this._paymentMethod.initializationData;\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData: { nonce } }))\n            )\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return this._braintreeVisaCheckoutPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _paymentInstrumentSelected(paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) {\n        const state = this._store.getState();\n\n        if (!this._paymentMethod) {\n            throw new Error('Payment method not initialized');\n        }\n\n        const { id: methodId } = this._paymentMethod;\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._braintreeVisaCheckoutPaymentProcessor.handleSuccess(\n                paymentSuccessPayload,\n                state.shippingAddress.getShippingAddress(),\n                state.billingAddress.getBillingAddress()\n            )\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new PaymentMethodFailedError(error.message);\n        }\n\n        throw error;\n    }\n}\n","import { find, some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    RequestError\n} from '../../../common/error/errors';\nimport isCreditCardLike from '../../is-credit-card-like';\nimport isVaultedInstrument from '../../is-vaulted-instrument';\nimport Payment from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\n\nimport {\n    CardinalClient,\n    CardinalOrderData,\n    CardinalSupportedPaymentInstrument\n} from './index';\n\nexport default class CardinalThreeDSecureFlow {\n    private _paymentMethod?: PaymentMethod;\n    private _clientToken?: string;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _cardinalClient: CardinalClient\n    ) {}\n\n    prepare(methodId: string): Promise<void> {\n        if (this._clientToken) {\n            return Promise.resolve();\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod || !this._paymentMethod.config) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._cardinalClient.initialize(methodId, this._paymentMethod.config.testMode);\n            })\n            .then(() => {\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._clientToken = this._paymentMethod.clientToken;\n\n                return this._cardinalClient.configure(this._clientToken);\n            });\n    }\n\n    start(payment: Payment): Promise<InternalCheckoutSelectors> {\n        if (!payment.paymentData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        if (!isCreditCardLike(payment.paymentData) && !isVaultedInstrument(payment.paymentData)) {\n            throw new InvalidArgumentError();\n        }\n\n        const paymentData = payment.paymentData;\n\n        return this._cardinalClient.runBinProcess(this._getBinNumber(paymentData))\n            .then(() => {\n                if (!this._clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                payment = {\n                    ...payment,\n                    paymentData: {\n                        ...paymentData,\n                        threeDSecure: { token: this._clientToken },\n                    },\n                };\n\n                return this._store.dispatch(this._paymentActionCreator.submitPayment(payment));\n            })\n            .catch(error => {\n                if (!(error instanceof RequestError) || !some(error.body.errors, {code: 'three_d_secure_required'})) {\n                    return Promise.reject(error);\n                }\n\n                return this._cardinalClient.getThreeDSecureData(\n                    error.body.three_ds_result,\n                    this._getOrderData(paymentData)\n                )\n                .then(threeDSecure =>\n                    this._store.dispatch(this._paymentActionCreator.submitPayment({\n                        ...payment,\n                        paymentData: {\n                            ...paymentData,\n                            threeDSecure,\n                        },\n                    }))\n                );\n            });\n    }\n\n    private _getBinNumber(payment: CardinalSupportedPaymentInstrument): string {\n        if (isVaultedInstrument(payment)) {\n            const instruments = this._store.getState().instruments.getInstruments();\n\n            const { instrumentId } = payment;\n\n            const entry = find(instruments, { bigpayToken: instrumentId });\n\n            return entry && entry.iin || '';\n        }\n\n        return payment.ccNumber;\n    }\n\n    private _getOrderData(paymentData: CardinalSupportedPaymentInstrument): CardinalOrderData {\n        const state = this._store.getState();\n        const billingAddress = state.billingAddress.getBillingAddress();\n        const shippingAddress = state.shippingAddress.getShippingAddress();\n        const checkout = state.checkout.getCheckout();\n        const order = state.order.getOrder();\n\n        if (!billingAddress || !billingAddress.email) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!order) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrder);\n        }\n\n        const payment: CardinalOrderData = {\n            billingAddress,\n            shippingAddress,\n            currencyCode: checkout.cart.currency.code,\n            id: order.orderId.toString(),\n            amount: checkout.cart.cartAmount,\n        };\n\n        if (isCreditCardLike(paymentData)) {\n            payment.paymentData = paymentData;\n        }\n\n        return payment;\n    }\n}\n","import { includes } from 'lodash';\n\nimport { Address } from '../../../address';\nimport { BillingAddress } from '../../../billing';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { PaymentMethodFailedError } from '../../errors';\nimport { CreditCardInstrument, ThreeDSecureToken, VaultedInstrument } from '../../payment';\nimport { ThreeDsResult } from '../../payment-response-body';\n\nimport {\n    CardinalAccount,\n    CardinalAddress,\n    CardinalConsumer,\n    CardinalEventType,\n    CardinalInitializationType,\n    CardinalPartialOrder,\n    CardinalPaymentBrand,\n    CardinalScriptLoader,\n    CardinalSignatureValidationErrors,\n    CardinalSignatureVerification,\n    CardinalSDK,\n    CardinalTriggerEvents,\n    CardinalValidatedAction,\n    CardinalValidatedData\n} from './index';\n\nexport type CardinalSupportedPaymentInstrument = CreditCardInstrument | VaultedInstrument;\n\nexport interface CardinalOrderData {\n    billingAddress: BillingAddress;\n    shippingAddress?: Address;\n    currencyCode: string;\n    id: string;\n    amount: number;\n    paymentData?: CreditCardInstrument;\n}\n\nexport default class CardinalClient {\n    private _sdk?: Promise<CardinalSDK>;\n\n    constructor(\n        private _scriptLoader: CardinalScriptLoader\n    ) {}\n\n    initialize(provider: string, testMode?: boolean): Promise<void> {\n        if (!this._sdk) {\n            this._sdk = this._scriptLoader.load(provider, testMode);\n        }\n\n        return this._sdk.then(() => {});\n    }\n\n    configure(clientToken: string): Promise<void> {\n        return this._getClientSDK()\n            .then(client => new Promise<void>((resolve, reject) => {\n                client.on(CardinalEventType.SetupCompleted, () => {\n                    client.off(CardinalEventType.SetupCompleted);\n                    client.off(CardinalEventType.Validated);\n\n                    resolve();\n                });\n\n                client.on(CardinalEventType.Validated, (data: CardinalValidatedData) => {\n                    client.off(CardinalEventType.SetupCompleted);\n                    client.off(CardinalEventType.Validated);\n\n                    switch (data.ActionCode) {\n                        case CardinalValidatedAction.Error:\n                            if (includes(CardinalSignatureValidationErrors, data.ErrorNumber)) {\n                                reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n                            }\n                            reject(new PaymentMethodFailedError(data.ErrorDescription));\n                            break;\n                    }\n                });\n\n                client.setup(CardinalInitializationType.Init, {\n                    jwt: clientToken,\n                });\n            }));\n    }\n\n    runBinProcess(binNumber: string): Promise<void> {\n        return this._getClientSDK()\n            .then(client => client.trigger(CardinalTriggerEvents.BinProcess, binNumber).catch(() => {}))\n            .then(result => {\n                if (!result || !result.Status) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n            });\n    }\n\n    getThreeDSecureData(threeDSecureData: ThreeDsResult, orderData: CardinalOrderData): Promise<ThreeDSecureToken> {\n        return this._getClientSDK()\n            .then(client => {\n                return new Promise<ThreeDSecureToken>((resolve, reject) => {\n                    client.on(CardinalEventType.Validated, (data: CardinalValidatedData, jwt?: string) => {\n                        client.off(CardinalEventType.Validated);\n                        if (!jwt) {\n                            return reject(new PaymentMethodFailedError(data.ErrorDescription ? data.ErrorDescription : 'An error was encountered while processing the transaction.'));\n                        }\n\n                        if (!data.ActionCode) {\n                            return resolve({ token: jwt });\n                        }\n\n                        switch (data.ActionCode) {\n                            case CardinalValidatedAction.Success:\n                                return resolve({ token: jwt });\n                            case CardinalValidatedAction.NoAction:\n                                if (data.ErrorNumber > 0) {\n                                    return reject(new PaymentMethodFailedError(data.ErrorDescription));\n                                } else if (!data.Payment || !data.Payment.ExtendedData || data.Payment.ExtendedData.SignatureVerification !== CardinalSignatureVerification.Yes) {\n                                    return reject(new PaymentMethodFailedError('Transaction signature could not be validated.'));\n                                }\n\n                                return resolve({ token: jwt });\n                            case CardinalValidatedAction.Failure:\n                                return reject(new PaymentMethodFailedError('User failed authentication or an error was encountered while processing the transaction.'));\n                            case CardinalValidatedAction.Error:\n                                return reject(new PaymentMethodFailedError(data.ErrorDescription));\n                        }\n                    });\n\n                    const continueObject = {\n                        AcsUrl: threeDSecureData.acs_url,\n                        Payload: threeDSecureData.merchant_data,\n                    };\n\n                    const partialOrder = this._mapToPartialOrder(orderData, threeDSecureData.payer_auth_request);\n\n                    client.continue(CardinalPaymentBrand.CCA, continueObject, partialOrder);\n                });\n            });\n    }\n\n    private _mapToPartialOrder(orderData: CardinalOrderData, transactionId: string): CardinalPartialOrder {\n        const consumer: CardinalConsumer = {\n            BillingAddress: this._mapToCardinalAddress(orderData.billingAddress),\n        };\n\n        if (orderData.paymentData) {\n            consumer.Account = this._mapToCardinalAccount(orderData.paymentData);\n        }\n\n        if (orderData.billingAddress.email) {\n            consumer.Email1 = orderData.billingAddress.email;\n        }\n\n        if (orderData.shippingAddress) {\n            consumer.ShippingAddress = this._mapToCardinalAddress(orderData.shippingAddress);\n        }\n\n        return  {\n            Consumer: consumer,\n            OrderDetails: {\n                OrderNumber: orderData.id,\n                Amount: orderData.amount,\n                CurrencyCode: orderData.currencyCode,\n                OrderChannel: 'S',\n                TransactionId: transactionId,\n            },\n        };\n    }\n\n    private _mapToCardinalAccount(paymentData: CreditCardInstrument): CardinalAccount {\n        return {\n            AccountNumber: Number(paymentData.ccNumber),\n            ExpirationMonth: Number(paymentData.ccExpiry.month),\n            ExpirationYear: Number(paymentData.ccExpiry.year),\n            NameOnAccount: paymentData.ccName,\n            CardCode: Number(paymentData.ccCvv),\n        };\n    }\n\n    private _mapToCardinalAddress(address: Address): CardinalAddress {\n        const cardinalAddress: CardinalAddress = {\n            FirstName: address.firstName,\n            LastName: address.lastName,\n            Address1: address.address1,\n            City: address.city,\n            State: address.stateOrProvince,\n            PostalCode: address.postalCode,\n            CountryCode: address.countryCode,\n        };\n\n        if (address.address2) {\n            cardinalAddress.Address2 = address.address2;\n        }\n\n        if (address.phone) {\n            cardinalAddress.Phone1 = address.phone;\n        }\n\n        return cardinalAddress;\n    }\n\n    private _getClientSDK(): Promise<CardinalSDK> {\n        if (!this._sdk) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._sdk;\n    }\n}\n","export enum ChasePayEventType {\n    StartCheckout = 'startCheckout',\n    CompleteCheckout = 'completeCheckout',\n    CancelCheckout = 'cancelCheckout',\n}\n\nexport interface ChasePayEventMap {\n    [ChasePayEventType.StartCheckout](digitalSessionId: string): void;\n    [ChasePayEventType.CompleteCheckout](payload: ChasePaySuccessPayload): void;\n    [ChasePayEventType.CancelCheckout](): void;\n}\n\nexport interface ChasePayHostWindow extends Window {\n    JPMC?: JPMC;\n}\n\nexport interface JPMC {\n    ChasePay: ChasePay;\n}\n\nexport interface ChasePaySuccessPayload {\n    sessionToken: string;\n}\n\nexport interface ChasePayInsertOptions {\n    color?: string;\n    containers?: string[];\n    height?: number;\n    width?: number;\n}\n\nexport interface ChasePayConfigureOptions {\n    language?: string;\n    zindex?: number;\n    sessionWarningTime?: number;\n    sessionTimeoutTime?: number;\n}\n\nexport interface ChasePay {\n    EventType: {\n        START_CHECKOUT: ChasePayEventType.StartCheckout;\n        COMPLETE_CHECKOUT: ChasePayEventType.CompleteCheckout;\n        CANCEL_CHECKOUT: ChasePayEventType.CancelCheckout;\n    };\n    isChasePayUp(): boolean;\n    insertButtons(options: ChasePayInsertOptions): void;\n    insertBrandings(options: ChasePayInsertOptions): void;\n    startCheckout(digitalSessionId?: string): void;\n    showLoadingAnimation(): void;\n    configure(options: ChasePayConfigureOptions): void;\n    on<ChasePayEventType extends keyof ChasePayEventMap>(eventType: ChasePayEventType, callback: ChasePayEventMap[ChasePayEventType]): {};\n}\n\nexport interface ChasePayInitializeOptions {\n    /**\n     * This container is used to host the chasepay branding logo.\n     * It should be an HTML element.\n     */\n    logoContainer: string;\n\n    /**\n     * This walletButton is used to set an event listener, provide an element ID if you want\n     * users to be able to launch the ChasePay wallet modal by clicking on a button.\n     * It should be an HTML element.\n     */\n    walletButton?: string;\n\n    /**\n     * A callback that gets called when the customer selects a payment option.\n     */\n    onPaymentSelect?(): void;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { CardinalSDK, CardinalWindow } from './cardinal';\n\nconst SDK_TEST_URL = 'https://songbirdstag.cardinalcommerce.com/edge/v1/songbird.js';\nconst SDK_PROD_URL = 'https://songbird.cardinalcommerce.com/edge/v1/songbird.js';\n\nexport default class CardinalScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: CardinalWindow = window\n    ) {}\n\n    load(provider: string, testMode?: boolean): Promise<CardinalSDK> {\n        const url = testMode ? SDK_TEST_URL : SDK_PROD_URL;\n\n        return this._scriptLoader\n            .loadScript(url + '?v=' + provider)\n            .then(() => {\n                if (!this._window.Cardinal) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.Cardinal;\n            });\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { Subject } from 'rxjs';\nimport { take } from 'rxjs/operators';\n\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport Payment from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\nimport { WepayRiskClient } from '../wepay';\n\nimport { ChasePay, ChasePayEventType, ChasePaySuccessPayload } from './chasepay';\nimport ChasePayInitializeOptions from './chasepay-initialize-options';\nimport ChasePayScriptLoader from './chasepay-script-loader';\n\nexport default class ChasePayPaymentStrategy implements PaymentStrategy {\n    private _chasePayClient?: ChasePay;\n    private _methodId!: string;\n    private _walletButton?: HTMLElement;\n    private _walletEvent$: Subject<{ type: ChasePayEventType }>;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _requestSender: RequestSender,\n        private _chasePayScriptLoader: ChasePayScriptLoader,\n        private _wepayRiskClient: WepayRiskClient\n    ) {\n        this._walletEvent$ = new Subject();\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._methodId = options.methodId;\n\n        if (!options.chasepay) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.chasepay\" argument is not provided.');\n        }\n\n        const walletButton = options.chasepay.walletButton && document.getElementById(options.chasepay.walletButton);\n\n        if (walletButton) {\n            this._walletButton = walletButton;\n            this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n        }\n\n        return this._configureWallet(options.chasepay)\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n        this._chasePayClient = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._getPayment()\n            .catch(error => {\n                if (error.subtype === MissingDataErrorType.MissingPayment) {\n                    return this._displayWallet()\n                        .then(() => this._getPayment());\n                }\n\n                throw error;\n            })\n            .then(payment =>\n                this._createOrder(payment, payload.useStoreCredit, options)\n            );\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _configureWallet(options: ChasePayInitializeOptions): Promise<void> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        return this._chasePayScriptLoader.load(paymentMethod.config.testMode)\n            .then(({ ChasePay }) => {\n                this._chasePayClient = ChasePay;\n\n                if (options.logoContainer && document.getElementById(options.logoContainer)) {\n                    this._chasePayClient.insertBrandings({\n                        color: 'white',\n                        containers: [options.logoContainer],\n                    });\n                }\n\n                this._chasePayClient.configure({\n                    language: storeConfig.storeProfile.storeLanguage,\n                });\n\n                this._chasePayClient.on(ChasePayEventType.CancelCheckout, () => {\n                    this._walletEvent$.next({ type: ChasePayEventType.CancelCheckout });\n\n                    if (options.onCancel) {\n                        options.onCancel();\n                    }\n                });\n\n                this._chasePayClient.on(ChasePayEventType.CompleteCheckout, (payload: ChasePaySuccessPayload) => {\n                    this._setSessionToken(payload.sessionToken)\n                        .then(() => {\n                            this._walletEvent$.next({ type: ChasePayEventType.CompleteCheckout });\n\n                            if (options.onPaymentSelect) {\n                                options.onPaymentSelect();\n                            }\n                        });\n                });\n            });\n    }\n\n    private _displayWallet(): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId))\n                .then(state => {\n                    const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n                    if (!this._chasePayClient) {\n                        throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                    }\n\n                    if (!paymentMethod) {\n                        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                    }\n\n                    this._chasePayClient.showLoadingAnimation();\n                    this._chasePayClient.startCheckout(paymentMethod.initializationData.digitalSessionId);\n                });\n\n            // Wait for payment selection\n            return new Promise((resolve, reject) => {\n                this._walletEvent$\n                    .pipe(take(1))\n                    .subscribe((event: { type: ChasePayEventType }) => {\n                        if (event.type === ChasePayEventType.CancelCheckout) {\n                            reject(new PaymentMethodCancelledError());\n                        } else if (event.type === ChasePayEventType.CompleteCheckout) {\n                            resolve();\n                        }\n                    });\n            });\n        }, { methodId: this._methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _setSessionToken(sessionToken: string): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n        const merchantRequestId = paymentMethod && paymentMethod.initializationData.merchantRequestId;\n\n        return this._requestSender.post('checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            },\n            body: {\n                action: 'set_external_checkout',\n                provider: this._methodId,\n                sessionToken,\n                merchantRequestId,\n            },\n        })\n            // Re-hydrate checkout data\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId)),\n            ]))\n            .then(() => this._store.getState());\n    }\n\n    private _getPayment(): Promise<Payment> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId))\n            .then(() => {\n                if (this._methodId === 'wepay') {\n                    return this._wepayRiskClient.initialize()\n                        .then(client => client.getRiskToken());\n                }\n\n                return '';\n            })\n            .then(riskToken => {\n                const state = this._store.getState();\n                const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!paymentMethod.initializationData.paymentCryptogram) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPayment);\n                }\n\n                const paymentData = {\n                    method: this._methodId,\n                    cryptogramId: paymentMethod.initializationData.paymentCryptogram,\n                    eci: paymentMethod.initializationData.eci,\n                    transactionId: btoa(paymentMethod.initializationData.reqTokenId),\n                    ccExpiry: {\n                        month: paymentMethod.initializationData.expDate.toString().substr(0, 2),\n                        year: paymentMethod.initializationData.expDate.toString().substr(2, 2),\n                    },\n                    ccNumber: paymentMethod.initializationData.accountNum,\n                    accountMask: paymentMethod.initializationData.accountMask,\n                    extraData: riskToken ? { riskToken } : undefined,\n                };\n\n                return {\n                    methodId: this._methodId,\n                    paymentData,\n                };\n            });\n    }\n\n    private _createOrder(payment: Payment, useStoreCredit?: boolean, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit }, options))\n            .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(payment)));\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): void {\n        event.preventDefault();\n\n        this._displayWallet();\n    }\n}\n","export default interface SquarePaymentForm {\n    build(): void;\n    requestCardNonce(): void;\n    setPostalCode(postalCode: string): void;\n}\n\nexport type SquarePaymentFormConstructor = new(options: SquareFormOptions) => SquarePaymentForm;\n\nexport interface SquareFormOptions {\n    applicationId: string;\n    env: string;\n    locationId: string;\n    inputClass?: string;\n    inputStyles?: string[];\n    callbacks?: SquareFormCallbacks;\n    cardNumber: SquareFormElement;\n    cvv: SquareFormElement;\n    expirationDate: SquareFormElement;\n    postalCode: SquareFormElement;\n    masterpass: SquareFormElement;\n}\nexport interface LineItem {\n    label: string;\n    amount: string;\n    pending: boolean;\n}\n\nexport interface SquarePaymentRequest {\n    requestShippingAddress: boolean;\n    requestBillingInfo: boolean;\n    shippingContact?: Contact;\n    countryCode: string;\n    currencyCode: string;\n    lineItems?: LineItem[];\n    total: LineItem;\n}\n\nexport interface NonceGenerationError {\n    type: string;\n    message: string;\n    field: string;\n}\n\nexport interface CardData {\n    card_brand: CardBrand;\n    last_4: number;\n    exp_month: number;\n    exp_year: number;\n    billing_postal_code: string;\n    digital_wallet_type: DigitalWalletType;\n}\n\nexport interface Contact {\n    familyName: string;\n    givenName: string;\n    email: string;\n    country: string;\n    countryName: string;\n    region: string;\n    city: string;\n    addressLines: string[];\n    postalCode: string;\n    phone: string;\n}\n\nexport enum CardBrand {\n    americanExpress = 'AMERICAN_EXPRESS',\n    discover = 'DISCOVER',\n    discoverDiners = 'DISCOVER_DINERS',\n    JCB = 'JCB',\n    masterCard = 'MASTERCARD',\n    unionPay = 'CHINA_UNIONPAY',\n    unknown = 'OTHER_BRAND',\n    visa = 'VISA',\n    squareGift = 'SQUARE_GIFT_CARD',\n}\n\nexport enum DigitalWalletType {\n    applePay = 'APPLEPAY',\n    masterpass = 'MASTERPASS',\n    none = 'NONE',\n}\n\n/**\n * Configures any form element provided by Square payment.\n */\nexport interface SquareFormElement {\n    /**\n     * The ID of the container which the form element should insert into.\n     */\n    elementId: string;\n\n    /**\n     * The placeholder text to use for the form element, if provided.\n     */\n    placeholder?: string;\n}\n\nexport interface SquareFormCallbacks {\n    paymentFormLoaded?(form: SquarePaymentForm): void;\n    unsupportedBrowserDetected?(): void;\n    cardNonceResponseReceived?(\n        errors?: NonceGenerationError[],\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact): void;\n    methodsSupported?(methods: { [key: string]: boolean }): void;\n    createPaymentRequest?(): void;\n}\n\nexport type SquareFormFactory = (options: SquareFormOptions) => SquarePaymentForm;\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { RequestError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class ConvergePaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _formPoster: FormPoster\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            )\n            .catch(error => {\n                if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'three_d_secure_required' })) {\n                    return Promise.reject(error);\n                }\n\n                return new Promise(() => {\n                    this._formPoster.postForm(error.body.three_ds_result.acs_url, {\n                        PaReq: error.body.three_ds_result.payer_auth_request,\n                        TermUrl: error.body.three_ds_result.callback_url,\n                        MD: error.body.three_ds_result.merchant_data,\n                    });\n                });\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class CreditCardPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            );\n    }\n\n    finalize(_options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(_options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(_options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport { CardinalThreeDSecureFlow } from '../cardinal';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class CyberSourcePaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _threeDSecureFlow: CardinalThreeDSecureFlow\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!this._paymentMethod.config.is3dsEnabled) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._threeDSecureFlow.prepare(methodId)\n            .then(() => this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() => {\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._paymentMethod.config.is3dsEnabled ?\n                    this._threeDSecureFlow.start(payment) :\n                    this._store.dispatch(this._paymentActionCreator.submitPayment(payment));\n            });\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { GooglePaymentData, PaymentMethodData } from './googlepay';\nimport GooglePayPaymentInitializeOptions from './googlepay-initialize-options';\nimport GooglePayPaymentProcessor from './googlepay-payment-processor';\n\nexport default class GooglePayPaymentStrategy implements PaymentStrategy {\n    private _googlePayOptions?: GooglePayPaymentInitializeOptions;\n    private _methodId?: string;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._methodId = options.methodId;\n\n        return this._googlePayPaymentProcessor.initialize(this._methodId)\n            .then(() => {\n                this._googlePayOptions = this._getGooglePayOptions(options);\n\n                if (!this._googlePayOptions) {\n                    throw new InvalidArgumentError('Unable to initialize payment because \"options.googlepay\" argument is not provided.');\n                }\n\n                const walletButton = this._googlePayOptions.walletButton && document.getElementById(this._googlePayOptions.walletButton);\n\n                if (walletButton) {\n                    this._walletButton = walletButton;\n                    this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n                }\n\n                return this._store.getState();\n            });\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n\n        return this._googlePayPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._googlePayOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.googlepay\" argument is not provided.');\n        }\n\n        const {\n            onError = () => {},\n            onPaymentSelect = () => {},\n        } = this._googlePayOptions;\n\n        return Promise.resolve(this._getPayment())\n            .then(payment => {\n                if (!payment.paymentData.nonce || !payment.paymentData.cardInformation) {\n                    // TODO: Find a way to share the code with _handleWalletButtonClick method\n                    return this._googlePayPaymentProcessor.displayWallet()\n                        .then(paymentData => this._paymentInstrumentSelected(paymentData))\n                        .then(() => onPaymentSelect())\n                        .then(() => this._getPayment())\n                        .catch(error => {\n                            if (error.statusCode !== 'CANCELED') {\n                                onError(error);\n                            }\n                        });\n                }\n\n                return payment;\n            })\n            .then(() =>\n                this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit: payload.useStoreCredit }, options))\n                    .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(this._getPayment())))\n            );\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _paymentInstrumentSelected(paymentData: GooglePaymentData) {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const methodId = this._methodId;\n\n        // TODO: Revisit how we deal with GooglePaymentData after receiving it from Google\n        return this._googlePayPaymentProcessor.handleSuccess(paymentData)\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n    }\n\n    private _getGooglePayOptions(options: PaymentInitializeOptions): GooglePayPaymentInitializeOptions {\n        if (options.methodId === 'googlepaybraintree' && options.googlepaybraintree) {\n            return options.googlepaybraintree;\n        }\n\n        if (options.methodId === 'googlepaystripe' && options.googlepaystripe) {\n            return options.googlepaystripe;\n        }\n\n        throw new InvalidArgumentError();\n    }\n\n    private _getPayment(): PaymentMethodData {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!paymentMethod.initializationData.nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        const paymentData = {\n            method: this._methodId,\n            nonce: paymentMethod.initializationData.nonce,\n            cardInformation: paymentMethod.initializationData.card_information,\n        };\n\n        return {\n            methodId: this._methodId,\n            paymentData,\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<InternalCheckoutSelectors> {\n        event.preventDefault();\n\n        if (!this._methodId || !this._googlePayOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const methodId = this._methodId;\n\n        const {\n            onError = () => {},\n            onPaymentSelect = () => {},\n        } = this._googlePayOptions;\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._googlePayPaymentProcessor.displayWallet()\n                .then(paymentData => this._paymentInstrumentSelected(paymentData))\n                .then(() => onPaymentSelect())\n                .catch(error => {\n                    if (error.statusCode !== 'CANCELED') {\n                        onError(error);\n                    }\n                });\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n}\n","import { includes } from 'lodash';\n\nimport { Address } from '../../../address';\nimport BillingAddress from '../../../billing/billing-address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType\n} from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport PaymentMethodInvalidError from '../../errors/payment-method-invalid-error';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport KlarnaCredit, { KlarnaAddress, KlarnaLoadResponse, KlarnaUpdateSessionParams } from './klarna-credit';\nimport KlarnaScriptLoader from './klarna-script-loader';\n\nexport default class KlarnaPaymentStrategy implements PaymentStrategy {\n    private _klarnaCredit?: KlarnaCredit;\n    private _unsubscribe?: (() => void);\n    private _supportedEUCountries = ['AT', 'DE', 'DK', 'FI', 'GB', 'NL', 'NO', 'SE', 'CH'];\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _klarnaScriptLoader: KlarnaScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._klarnaScriptLoader.load()\n            .then(klarnaCredit => { this._klarnaCredit = klarnaCredit; })\n            .then(() => {\n                this._unsubscribe = this._store.subscribe(\n                    state => {\n                        if (state.paymentStrategies.isInitialized(options.methodId)) {\n                            this._loadWidget(options);\n                        }\n                    },\n                    state => {\n                        const checkout = state.checkout.getCheckout();\n\n                        return checkout && checkout.outstandingBalance;\n                    }\n                );\n\n                return this._loadWidget(options);\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._unsubscribe) {\n            this._unsubscribe();\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!payload.payment) {\n            throw new InvalidArgumentError('Unable to proceed because \"payload.payment\" argument is not provided.');\n        }\n\n        const { payment: { paymentData, ...paymentPayload } } = payload;\n\n        return this._authorize()\n            .then(({ authorization_token: authorizationToken }) => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializePayment(paymentPayload.methodId, { authorizationToken })\n            ))\n            .then(() => this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: paymentPayload,\n                    // Note: API currently doesn't support using Store Credit with Klarna.\n                    // To prevent deducting customer's store credit, set it as false.\n                    useStoreCredit: false,\n                }, options)\n            ));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _loadWidget(options: PaymentInitializeOptions): Promise<KlarnaLoadResponse> {\n        if (!options.klarna) {\n            throw new InvalidArgumentError('Unable to load widget because \"options.klarna\" argument is not provided.');\n        }\n\n        const { methodId, klarna: { container, onLoad } } = options;\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise<KlarnaLoadResponse>(resolve => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!this._klarnaCredit || !paymentMethod.clientToken) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                this._klarnaCredit.init({ client_token: paymentMethod.clientToken });\n\n                this._klarnaCredit.load({ container }, response => {\n                    if (onLoad) {\n                        onLoad(response);\n                    }\n                    resolve(response);\n                });\n            }));\n    }\n\n    private _getUpdateSessionData(billingAddress: BillingAddress, shippingAddress?: Address): KlarnaUpdateSessionParams {\n        if (!includes(this._supportedEUCountries, billingAddress.countryCode)) {\n            return {};\n        }\n\n        const data: KlarnaUpdateSessionParams = {\n            billing_address: this._mapToKlarnaAddress(billingAddress, billingAddress.email),\n        };\n\n        if (shippingAddress) {\n            data.shipping_address = this._mapToKlarnaAddress(shippingAddress, billingAddress.email);\n        }\n\n        return data;\n    }\n\n    private _mapToKlarnaAddress(address: Address, email?: string): KlarnaAddress {\n        const klarnaAddress: KlarnaAddress = {\n            street_address: address.address1,\n            city: address.city,\n            country: address.countryCode,\n            given_name: address.firstName,\n            family_name: address.lastName,\n            postal_code: address.postalCode,\n            region: address.stateOrProvince,\n            email,\n        };\n\n        if (address.address2) {\n            klarnaAddress.street_address2 = address.address2;\n        }\n\n        if (address.phone) {\n            klarnaAddress.phone = address.phone;\n        }\n\n        return klarnaAddress;\n    }\n\n    private _authorize(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            const billingAddress = this._store.getState().billingAddress.getBillingAddress();\n            const shippingAddress = this._store.getState().shippingAddress.getShippingAddress();\n\n            if (!billingAddress) {\n                throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n            }\n\n            if (!this._klarnaCredit) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            const updateSessionData = this._getUpdateSessionData(billingAddress, shippingAddress);\n\n            this._klarnaCredit.authorize(updateSessionData, res => {\n                if (res.approved) {\n                    return resolve(res);\n                }\n\n                if (res.show_form) {\n                    return reject(new PaymentMethodCancelledError());\n                }\n\n                reject(new PaymentMethodInvalidError());\n            });\n        });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport KlarnaCredit from './klarna-credit';\nimport KlarnaWindow from './klarna-window';\n\nconst SDK_URL = '//credit.klarnacdn.net/lib/v1/api.js';\n\nexport default class KlarnaScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    load(): Promise<KlarnaCredit> {\n        return this._scriptLoader.loadScript(SDK_URL)\n            .then(() => (window as unknown as KlarnaWindow).Klarna.Credit);\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class LegacyPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport getCallbackUrl from './get-callback-url';\nimport { Masterpass, MasterpassCheckoutOptions } from './masterpass';\nimport MasterpassScriptLoader from './masterpass-script-loader';\n\nexport default class MasterpassPaymentStrategy implements PaymentStrategy {\n    private _masterpassClient?: Masterpass;\n    private _paymentMethod?: PaymentMethod;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._masterpassScriptLoader.load(this._paymentMethod.config.testMode)\n            .then(masterpass => {\n                this._masterpassClient = masterpass;\n\n                if (!options.masterpass) {\n                    throw new InvalidArgumentError('Unable to initialize payment because \"options.masterpass\" argument is not provided.');\n                }\n\n                const walletButton  = options.masterpass.walletButton && document.getElementById(options.masterpass.walletButton);\n\n                if (walletButton) {\n                    this._walletButton = walletButton;\n                    this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n                }\n\n                return this._store.getState();\n            });\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n        this._masterpassClient = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment } = payload;\n        const order = { useStoreCredit: payload.useStoreCredit };\n\n        if (!payment) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment\" argument is not provided.');\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData || !this._paymentMethod.initializationData.gateway) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        // TODO: Refactor the API endpoint to return nonce in the right place.\n        const paymentData = this._paymentMethod.initializationData.paymentData;\n\n        // TODO: Redirect to Masterpass if nonce has not been generated yet. And then finalise the order when the shopper is redirected back to the checkout page.\n        if (!paymentData) {\n            throw new InvalidArgumentError('Unable to proceed because \"paymentMethod.initializationData.paymentData\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData })));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _createMasterpassPayload(): MasterpassCheckoutOptions {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return {\n            checkoutId: this._paymentMethod.initializationData.checkoutId,\n            allowedCardTypes: this._paymentMethod.initializationData.allowedCardTypes,\n            amount: checkout.subtotal.toFixed(2),\n            currency: storeConfig.currency.code,\n            cartId: checkout.cart.id,\n            suppressShippingAddress: false,\n            callbackUrl: getCallbackUrl('checkout'),\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event) {\n        event.preventDefault();\n\n        if (!this._masterpassClient) {\n            return;\n        }\n\n        const payload = this._createMasterpassPayload();\n        this._masterpassClient.checkout(payload);\n    }\n}\n","import { omit } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class NoPaymentDataRequiredPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._orderActionCreator.submitOrder(omit(orderRequest, 'payment'), options)\n        );\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class OfflinePaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const action = this._orderActionCreator.submitOrder({\n            ...payload,\n            payment: payload.payment ? { methodId: payload.payment.methodId } : undefined,\n        }, options);\n\n        return this._store.dispatch(action);\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class OffsitePaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const orderPayload = this._shouldSubmitFullPayload(payment) ? payload : order;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(orderPayload, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.initializeOffsitePayment(payment.methodId, payment.gatewayId))\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n        const status = state.payment.getPaymentStatus();\n\n        if (order && (status === paymentStatusTypes.ACKNOWLEDGE || status === paymentStatusTypes.FINALIZE)) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _shouldSubmitFullPayload(payment?: OrderPaymentRequestBody): boolean {\n        // FIXME: A temporary workaround to support offsite payment methods\n        // where their return URL needs to be provided by the core app.\n        if (!payment) {\n            return false;\n        }\n\n        return payment.gatewayId === 'adyen' || payment.methodId === 'ccavenuemars';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport { CardinalThreeDSecureFlow } from '../cardinal';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class PaypalProPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _threeDSecureFlow: CardinalThreeDSecureFlow\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!this._paymentMethod.config.is3dsEnabled) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._threeDSecureFlow.prepare(methodId)\n            .then(() => this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isPaymentAcknowledged()) {\n            return this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: payload.payment ? { methodId: payload.payment.methodId } : undefined,\n                }, options)\n            );\n        }\n\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() => {\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._paymentMethod.config.is3dsEnabled ?\n                    this._threeDSecureFlow.start(payment) :\n                    this._store.dispatch(this._paymentActionCreator.submitPayment(payment));\n            });\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _isPaymentAcknowledged(): boolean {\n        const state = this._store.getState();\n\n        return state.payment.getPaymentStatus() === paymentStatusTypes.ACKNOWLEDGE;\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nimport PaypalScriptLoader from './paypal-script-loader';\nimport { PaypalHostWindow, PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalExpressPaymentStrategy implements PaymentStrategy {\n    private _paypalSdk?: PaypalSDK;\n    private _paymentMethod?: PaymentMethod;\n    private _useRedirectFlow: boolean = false;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _scriptLoader: PaypalScriptLoader,\n        private _window: PaypalHostWindow = window\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n        this._useRedirectFlow = (options.paypalexpress && options.paypalexpress.useRedirectFlow) === true;\n\n        if (!this._isInContextEnabled()) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._scriptLoader.loadPaypal()\n            .then(paypal => {\n                this._paypalSdk = paypal;\n\n                if (!this._paymentMethod || !this._paymentMethod.config.merchantId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._paypalSdk.checkout.setup(this._paymentMethod.config.merchantId, {\n                    button: 'paypal-button',\n                    environment: this._paymentMethod.config.testMode ? 'sandbox' : 'production',\n                });\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._isInContextEnabled() && this._paypalSdk) {\n            this._paypalSdk.checkout.closeFlow();\n            this._paypalSdk = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const paypal = this._paypalSdk;\n\n        if (this._isAcknowledgedOrFinalized()) {\n            return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n        }\n\n        if (!this._isInContextEnabled() || this._useRedirectFlow) {\n            return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options))\n                .then(state => {\n                    const redirectUrl = state.payment.getPaymentRedirectUrl();\n\n                    if (redirectUrl) {\n                        this._window.top.location.href = redirectUrl;\n                    }\n\n                    // We need to hold execution so the consumer does not redirect us somewhere else\n                    return new Promise<never>(() => {});\n                });\n        }\n\n        if (!paypal) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        paypal.checkout.initXO();\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options))\n            .then(state => {\n                const redirectUrl = state.payment.getPaymentRedirectUrl();\n\n                if (redirectUrl) {\n                    paypal.checkout.startFlow(redirectUrl);\n                }\n\n                // We need to hold execution so the consumer does not redirect us somewhere else\n                return new Promise<never>(() => {});\n            })\n            .catch(error => {\n                paypal.checkout.closeFlow();\n\n                return Promise.reject(error);\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && this._isAcknowledgedOrFinalized()) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _isAcknowledgedOrFinalized(): boolean {\n        const state = this._store.getState();\n\n        return state.payment.getPaymentStatus() === paymentStatusTypes.ACKNOWLEDGE\n            || state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE;\n    }\n\n    private _isInContextEnabled(): boolean {\n        return !!(this._paymentMethod && this._paymentMethod.config.merchantId);\n    }\n}\n","import { some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { RequestError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class SagePayPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _formPoster: any\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            )\n            .catch(error => {\n                if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'three_d_secure_required' })) {\n                    return Promise.reject(error);\n                }\n\n                return new Promise(() => {\n                    this._formPoster.postForm(error.body.three_ds_result.acs_url, {\n                        PaReq: error.body.three_ds_result.payer_auth_request,\n                        TermUrl: error.body.three_ds_result.callback_url,\n                        MD: error.body.three_ds_result.merchant_data,\n                    });\n                });\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * Throw this error if the shopper is using a browser version that is not\n * supported by us or any third party provider we use.\n */\nexport default class UnsupportedBrowserError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unsupported browser error');\n\n        this.name = 'UnsupportedBrowserError';\n        this.type = 'unsupported_browser';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\nimport { omit } from 'lodash';\nimport { noop } from 'rxjs';\n\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    TimeoutError,\n    UnsupportedBrowserError,\n} from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { NonceInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\n\nimport SquarePaymentForm, {\n    CardData,\n    Contact,\n    DigitalWalletType,\n    NonceGenerationError,\n    SquareFormElement,\n    SquareFormOptions,\n    SquarePaymentRequest\n} from './square-form';\nimport SquarePaymentInitializeOptions from './square-payment-initialize-options';\nimport SquareScriptLoader from './square-script-loader';\n\nexport default class SquarePaymentStrategy implements PaymentStrategy {\n    private _deferredRequestNonce?: DeferredPromise;\n    private _paymentForm?: SquarePaymentForm;\n    private _paymentMethod?: PaymentMethod;\n    private _squareOptions?: SquarePaymentInitializeOptions;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _requestSender: RequestSender,\n        private _scriptLoader: SquareScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n\n        this._syncPaymentMethod(methodId);\n\n        return this._scriptLoader.load()\n            .then(createSquareForm =>\n                new Promise((resolve, reject) => {\n                    this._paymentForm = createSquareForm(\n                        this._getFormOptions(options, { resolve, reject })\n                    );\n                    this._paymentForm.build();\n                }))\n            .then(() => this._store.getState());\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment } = orderRequest;\n\n        if (!payment || !payment.methodId) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment.methodId\" argument is not provided.');\n        }\n\n        this._syncPaymentMethod(payment.methodId);\n\n        return this._getNonceInstrument(payment.methodId)\n            .then(paymentData =>\n                this._store.dispatch(this._orderActionCreator.submitOrder(omit(orderRequest, 'payment'), options))\n                .then(() =>\n                    this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n                ));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _syncPaymentMethod(methodId: string): void {\n        const state = this._store.getState();\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n    }\n\n    private _getCountryCode(countryName: string) {\n        switch (countryName.toUpperCase()) {\n            case 'NEW ZELAND':\n                return 'NZ';\n            case 'AUSTRALIA':\n                return 'AU';\n            default:\n                return 'US';\n        }\n    }\n\n    private _getNonceInstrument(methodId: string): Promise<NonceInstrument> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (paymentMethod) {\n            const { initializationData } = paymentMethod;\n            if (initializationData && initializationData.paymentData.nonce) {\n                return Promise.resolve({ nonce: paymentMethod.initializationData.paymentData.nonce });\n            }\n        }\n\n        return new Promise<NonceInstrument>((resolve, reject) => {\n            if (!this._paymentForm) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            if (this._deferredRequestNonce) {\n                this._deferredRequestNonce.reject(new TimeoutError());\n            }\n\n            this._deferredRequestNonce = { resolve, reject };\n            this._paymentForm.requestCardNonce();\n        });\n    }\n\n    private _getFormOptions(options: PaymentInitializeOptions, deferred: DeferredPromise): SquareFormOptions {\n        const { square: squareOptions } = options;\n\n        if (!squareOptions || !this._paymentMethod) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.square\" argument is not provided.');\n        }\n\n        this._squareOptions = squareOptions;\n\n        return {\n            ...this._squareOptions,\n            ...this._paymentMethod.initializationData,\n            callbacks: {\n                cardNonceResponseReceived: (errors, nonce, cardData, billingContact, shippingContact) => {\n                    if (cardData && cardData.digital_wallet_type !== DigitalWalletType.none) {\n                        this._handleWalletNonceResponse(errors, nonce, cardData, billingContact, shippingContact);\n                    } else {\n                        this._handleCardNonceResponse(errors, nonce);\n                    }\n                },\n                createPaymentRequest: () => this._paymentRequestPayload(),\n                methodsSupported: methods => {\n                    const { masterpass } = squareOptions;\n\n                    if (masterpass) {\n                        this._showPaymentMethods(methods, masterpass);\n                    }\n                },\n                paymentFormLoaded: () => {\n                    deferred.resolve();\n                    this._setPostalCode();\n                },\n                unsupportedBrowserDetected: () => deferred.reject(new UnsupportedBrowserError()),\n            },\n        };\n    }\n\n    private _handleWalletNonceResponse(\n        errors?: NonceGenerationError[],\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact\n    ): void {\n        const onError = this._squareOptions && this._squareOptions.onError || noop;\n        const onPaymentSelect = this._squareOptions && this._squareOptions.onPaymentSelect || noop;\n\n        if (errors) {\n            onError(errors);\n        } else if (nonce && this._paymentMethod) {\n            this._paymentInstrumentSelected(\n                this._paymentMethod.id,\n                nonce,\n                cardData,\n                billingContact,\n                shippingContact\n            )\n                .then(onPaymentSelect)\n                .catch(onError);\n        }\n    }\n\n    private _handleCardNonceResponse(errors?: NonceGenerationError[], nonce?: string): void {\n        if (!this._deferredRequestNonce) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (nonce && !errors) {\n            this._deferredRequestNonce.resolve({ nonce });\n\n            return;\n        }\n\n        const onError = this._squareOptions && this._squareOptions.onError || noop;\n\n        onError(errors);\n\n        this._deferredRequestNonce.reject(errors);\n    }\n\n    private _paymentInstrumentSelected(\n        methodId: string,\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact): Promise<InternalCheckoutSelectors> {\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._setExternalCheckoutData(nonce, cardData, billingContact, shippingContact)\n            .then(() =>\n                Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _paymentRequestPayload(): SquarePaymentRequest {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        return {\n            requestShippingAddress: true,\n            requestBillingInfo: true,\n            currencyCode: storeConfig.currency.code,\n            countryCode: this._getCountryCode(storeConfig.storeProfile.storeCountry),\n            total: {\n                label: storeConfig.storeProfile.storeName,\n                amount: String(checkout.subtotal),\n                pending: false,\n            },\n        };\n    }\n\n    private _setExternalCheckoutData(nonce?: string, cardData?: CardData, billingContact?: Contact, shippingContact?: Contact): Promise<Response<any>> {\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: {\n                nonce,\n                provider: 'squarev2',\n                action: 'set_external_checkout',\n                cardData: JSON.stringify(cardData),\n                billingContact: JSON.stringify(billingContact),\n                shippingContact: JSON.stringify(shippingContact),\n            },\n        });\n    }\n\n    private _setPostalCode(): void {\n        const state = this._store.getState();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!this._paymentForm) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (billingAddress && billingAddress.postalCode) {\n            this._paymentForm.setPostalCode(billingAddress.postalCode);\n        }\n    }\n\n    private _showPaymentMethods(methods: { [key: string]: boolean }, element: SquareFormElement): void {\n        const masterpassBtn = document.getElementById(element.elementId);\n\n        if (masterpassBtn && methods.masterpass) {\n            masterpassBtn.style.display = 'inline-block';\n        }\n    }\n}\n\nexport interface DeferredPromise {\n    resolve(resolution?: NonceInstrument): void;\n    reject(reason?: any): void;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { SquareFormFactory, SquareFormOptions } from './square-form';\nimport SquareWindow from './square-window';\n\nexport default class SquareScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    load(): Promise<SquareFormFactory> {\n        const scriptURI = '//js.squareup.com/v2/paymentform';\n\n        return this._scriptLoader.loadScript(scriptURI)\n            .then(() => (options: SquareFormOptions) =>\n                new (window as unknown as SquareWindow).SqPaymentForm(options)\n            );\n    }\n}\n","import { some } from 'lodash';\n\nimport { Address } from '../../../address';\nimport { BillingAddress } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    RequestError\n} from '../../../common/error/errors';\nimport { Customer } from '../../../customer';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError, PaymentMethodFailedError } from '../../errors';\nimport isVaultedInstrument from '../../is-vaulted-instrument';\nimport { HostedInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport {\n    StripeAddress,\n    StripeBillingDetails,\n    StripeCardElement,\n    StripeHandleCardPaymentOptions,\n    StripePaymentMethodData,\n    StripeShippingDetails,\n    StripeV3Client\n} from './stripev3';\nimport StripeV3ScriptLoader from './stripev3-script-loader';\n\nexport default class StripeV3PaymentStrategy implements PaymentStrategy {\n    private _stripeV3Client?: StripeV3Client;\n    private _cardElement?: StripeCardElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _stripeScriptLoader: StripeV3ScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const stripeOptions = options.stripev3;\n\n        if (!stripeOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.stripev3\" argument is not provided.');\n        }\n\n        const paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._stripeScriptLoader.load(paymentMethod.initializationData.stripePublishableKey)\n            .then(stripeJs => {\n                this._stripeV3Client = stripeJs;\n                const elements = this._stripeV3Client.elements();\n                const cardElement = elements.create('card', {\n                    style: stripeOptions.style,\n                });\n\n                cardElement.mount(`#${stripeOptions.containerId}`);\n\n                this._cardElement = cardElement;\n\n                return Promise.resolve(this._store.getState());\n            });\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n        const shouldSaveInstrument = Boolean(paymentData && (paymentData as HostedInstrument).shouldSaveInstrument);\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() => {\n                if (paymentData && isVaultedInstrument(paymentData)) {\n                    return this._store.dispatch(this._paymentActionCreator.submitPayment({...payment, paymentData}))\n                        .catch(error => {\n                            if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'three_d_secure_required' })) {\n                                return Promise.reject(error);\n                            }\n\n                            return this._getStripeJs().handleCardPayment(error.body.three_ds_result.token)\n                                .then(stripeResponse => {\n                                    if (stripeResponse.error || !stripeResponse.paymentIntent.id) {\n                                        throw new PaymentMethodFailedError(stripeResponse.error && stripeResponse.error.message);\n                                    }\n\n                                    const paymentPayload = {\n                                        methodId: payment.methodId,\n                                        paymentData: {\n                                            nonce: stripeResponse.paymentIntent.id,\n                                        },\n                                    };\n\n                                    return this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload));\n                                });\n                        });\n                }\n\n                return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(payment.methodId))\n                    .then(state => {\n                        const paymentMethod = state.paymentMethods.getPaymentMethod(payment.methodId);\n                        const paymentIntent = paymentMethod && paymentMethod.clientToken;\n\n                        if (!this._cardElement) {\n                            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                        }\n\n                        return this._getStripeJs().createPaymentMethod('card', this._cardElement, this._mapStripePaymentMethodOptions())\n                            .then(stripePaymentMethod => {\n                                if (stripePaymentMethod.error || !stripePaymentMethod.paymentMethod.id) {\n                                    throw new PaymentMethodFailedError(stripePaymentMethod.error && stripePaymentMethod.error.message);\n                                }\n\n                                if (!paymentIntent) {\n                                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                                }\n\n                                const stripeCardPaymentOptions = {\n                                    ...this._mapStripeCardPaymentOptions(shouldSaveInstrument),\n                                    payment_method: stripePaymentMethod.paymentMethod.id,\n                                };\n\n                                return this._getStripeJs().handleCardPayment(paymentIntent, stripeCardPaymentOptions);\n                            })\n                            .then(stripeResponse => {\n                                if (stripeResponse.error || !stripeResponse.paymentIntent.id) {\n                                    throw new PaymentMethodFailedError(stripeResponse.error && stripeResponse.error.message);\n                                }\n\n                                const paymentPayload = {\n                                    methodId: payment.methodId,\n                                    paymentData: {\n                                        nonce: stripeResponse.paymentIntent.id,\n                                        shouldSaveInstrument,\n                                    },\n                                };\n\n                                return this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload));\n                            });\n                    });\n            });\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._cardElement) {\n            this._cardElement.unmount();\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _getStripeJs(): StripeV3Client {\n        if (!this._stripeV3Client) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._stripeV3Client;\n    }\n\n    private _mapStripeBillingAddress(billingAddress: BillingAddress | undefined): StripeAddress | undefined {\n        if (!billingAddress) {\n            return undefined;\n        }\n\n        return {\n            city: billingAddress.city,\n            country: billingAddress.countryCode,\n            line1: billingAddress.address1,\n            line2: billingAddress.address2,\n            postal_code: billingAddress.postalCode,\n            state: billingAddress.stateOrProvinceCode,\n        };\n    }\n\n    private _mapStripeShippingAddress(shippingAddress: Address | undefined): StripeAddress {\n        if (!shippingAddress) {\n            return { };\n        }\n\n        return {\n            city: shippingAddress.city,\n            country: shippingAddress.countryCode,\n            line1: shippingAddress.address1,\n            line2: shippingAddress.address2,\n            postal_code: shippingAddress.postalCode,\n            state: shippingAddress.stateOrProvinceCode,\n        };\n    }\n\n    private _mapStripeBillingDetails({ billingAddress, customer }: { billingAddress?: BillingAddress; customer?: Customer } = {}): StripeBillingDetails {\n        const stripeBillingDetails = {\n            address: this._mapStripeBillingAddress(billingAddress),\n        };\n\n        if (customer) {\n            return {\n                ...stripeBillingDetails,\n                email: customer.email,\n                name: `${customer.firstName} ${customer.lastName}`,\n            };\n        }\n\n        if (billingAddress) {\n            return {\n                ...stripeBillingDetails,\n                email: billingAddress.email,\n                name: `${billingAddress.firstName} ${billingAddress.lastName}`,\n            };\n        }\n\n        return {\n            name: 'Guest',\n        };\n    }\n\n    private _mapStripeShippingDetails({ shippingAddress, customer }: { shippingAddress?: Address ; customer?: Customer } = {}): StripeShippingDetails {\n        const stripeShippingDetails = {\n            address: this._mapStripeShippingAddress(shippingAddress),\n        };\n\n        if (customer) {\n            return {\n                ...stripeShippingDetails,\n                name: `${customer.firstName} ${customer.lastName}`,\n            };\n        }\n\n        if (shippingAddress) {\n            return {\n                ...stripeShippingDetails,\n                name: `${shippingAddress.firstName} ${shippingAddress.lastName}`,\n            };\n        }\n\n        return {\n            ...stripeShippingDetails,\n            name: 'Guest',\n        };\n    }\n\n    private _getCustomer(): Customer | undefined {\n        const customer = this._store.getState().customer.getCustomer();\n\n        if (customer) {\n            if (customer.firstName === '' || customer.lastName === '' || customer.email === '') {\n                return undefined;\n            }\n        }\n\n        return customer;\n    }\n\n    private _mapStripeCardPaymentOptions(shouldSaveInstrument: boolean): StripeHandleCardPaymentOptions {\n        const customer = this._getCustomer();\n        const shippingAddress = this._store.getState().shippingAddress.getShippingAddress();\n\n        const shippingDetails = {\n            shipping: this._mapStripeShippingDetails({ shippingAddress, customer }),\n        };\n\n        if (customer) {\n            return {\n                ...shippingDetails,\n                receipt_email: customer.email,\n                save_payment_method: shouldSaveInstrument,\n            };\n        } else {\n            return {\n                ...shippingDetails,\n            };\n        }\n    }\n\n    private _mapStripePaymentMethodOptions(): StripePaymentMethodData {\n        const customer = this._getCustomer();\n        const billingAddress = this._store.getState().billingAddress.getBillingAddress();\n\n        return {\n            billing_details: this._mapStripeBillingDetails({ billingAddress, customer }),\n        };\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { StripeHostWindow, StripeV3Client } from './stripev3';\n\nexport default class StripeV3ScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: StripeHostWindow = window\n    ) {}\n\n    load(publishableKey: string): Promise<StripeV3Client> {\n        return this._scriptLoader\n            .loadScript('https://js.stripe.com/v3/')\n            .then(() => {\n                if (!this._window.Stripe) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.Stripe(publishableKey, {\n                    betas: ['payment_intent_beta_3'],\n                });\n            });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport WepayRisk from './wepay-risk';\nimport WepayWindow from './wepay-window';\n\nconst SCRIPT_SRC = '//static.wepay.com/min/js/risk.1.latest.js';\n\nexport default class WepayRiskClient {\n    private _riskClient?: WepayRisk;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    initialize(): Promise<WepayRiskClient> {\n        return this._scriptLoader\n            .loadScript(SCRIPT_SRC)\n            .then(() => this._riskClient = (window as unknown as WepayWindow).WePay.risk)\n            .then(() => this);\n    }\n\n    getRiskToken(): string {\n        if (!this._riskClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._riskClient.generate_risk_token();\n\n        return this._riskClient.get_risk_token();\n    }\n}\n","import { merge } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport CreditCardPaymentStrategy from '../credit-card/credit-card-payment-strategy';\n\nimport WepayRiskClient from './wepay-risk-client';\n\nexport default class WepayPaymentStrategy extends CreditCardPaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        orderActionCreator: OrderActionCreator,\n        paymentActionCreator: PaymentActionCreator,\n        private _wepayRiskClient: WepayRiskClient\n    ) {\n        super(store, orderActionCreator, paymentActionCreator);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._wepayRiskClient.initialize();\n\n        return super.initialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const token = this._wepayRiskClient.getRiskToken();\n        const payloadWithToken = merge({}, payload, {\n            payment: {\n                paymentData: {\n                    deviceSessionId: token,\n                },\n            },\n        });\n\n        return super.execute(payloadWithToken, options);\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if a payment method explicitly returns a declined error and\n * the shopper has to choose a different payment method if they wish to continue\n * their checkout process.\n */\nexport default class PaymentMethodDeclinedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'The selected payment method was declined. Please select another payment method.');\n\n        this.name = 'PaymentMethodDeclinedError';\n        this.type = 'payment_declined';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { ContentType, INTERNAL_USE_ONLY } from '../../../common/http-request';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { StoreCreditActionCreator } from '../../../store-credit';\nimport { PaymentMethodCancelledError, PaymentMethodDeclinedError, PaymentMethodInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { Zip, ZipModalEvent } from './zip';\nimport ZipScriptLoader from './zip-script-loader';\n\nexport default class ZipPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _zipClient?: Zip;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _storeCreditActionCreator: StoreCreditActionCreator,\n        private _zipScriptLoader: ZipScriptLoader,\n        private _requestSender: RequestSender\n    ) { }\n\n    async initialize(): Promise<InternalCheckoutSelectors> {\n        const zip = await this._zipScriptLoader.load();\n        this._zipClient = zip;\n\n        return this._store.getState();\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n        this._zipClient = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const { _zipClient: zipClient } = this;\n\n        if (!payment) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment\" argument is not provided.');\n        }\n\n        if (!zipClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        await this._store.dispatch(this._orderActionCreator.submitOrder(order, options));\n\n        const { useStoreCredit } = payload;\n\n        if (useStoreCredit !== undefined) {\n            await this._store.dispatch(this._storeCreditActionCreator.applyStoreCredit(useStoreCredit));\n        }\n\n        const state = await this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(payment.methodId, options));\n\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(payment.methodId);\n\n        if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const nonce = await new Promise<string | undefined>((resolve, reject) => {\n            zipClient.Checkout.init({\n                onComplete: async ({ checkoutId, state }) => {\n                    if (state === ZipModalEvent.CancelCheckout) {\n                        return reject(new PaymentMethodCancelledError());\n                    }\n\n                    if (state === ZipModalEvent.CheckoutReferred && checkoutId) {\n                        await this._prepareForReferredRegistration(payment.methodId, checkoutId);\n\n                        return resolve();\n                    }\n\n                    if (state === ZipModalEvent.CheckoutApproved && checkoutId) {\n                        return resolve(checkoutId);\n                    }\n\n                    if (state === ZipModalEvent.CheckoutDeclined) {\n                        return reject(new PaymentMethodDeclinedError('Unfortunately your application was declined. Please select another payment method.'));\n                    }\n\n                    reject(new PaymentMethodInvalidError());\n                },\n                onCheckout: openModal => {\n                    if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                    }\n\n                    openModal(JSON.parse(this._paymentMethod.clientToken));\n                },\n            });\n        });\n\n        if (nonce !== undefined) {\n            return this._store.dispatch(this._paymentActionCreator.submitPayment({\n                methodId: payment.methodId,\n                paymentData: { nonce },\n            }));\n        }\n\n        return this._store.getState();\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _prepareForReferredRegistration(provider: string, externalId: string): Promise<Response> {\n        const url = `/api/storefront/payment/${provider}/save-external-id`;\n        const options = {\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n            body: {\n                externalId,\n                provider,\n            },\n        };\n\n        return this._requestSender.post(url, options);\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\nimport { Zip, ZipHostWindow } from '../zip/zip';\n\nexport default class ZipScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: ZipHostWindow = window\n    ) {}\n\n    load(): Promise<Zip> {\n        return this._scriptLoader\n            .loadScript(`//static.zipmoney.com.au/checkout/checkout-v1.min.js`)\n            .then(() => {\n                if (!this._window.Zip) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.Zip;\n            });\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore, CheckoutValidator } from '../checkout';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport { SpamProtectionActionCreator } from '../order/spam-protection';\nimport GoogleRecaptcha from '../order/spam-protection/google-recaptcha';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\nimport { StoreCreditActionCreator, StoreCreditRequestSender } from '../store-credit';\n\nimport PaymentActionCreator from './payment-action-creator';\nimport PaymentMethodActionCreator from './payment-method-action-creator';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\nimport PaymentRequestSender from './payment-request-sender';\nimport PaymentRequestTransformer from './payment-request-transformer';\nimport PaymentStrategyActionCreator from './payment-strategy-action-creator';\nimport PaymentStrategyRegistry from './payment-strategy-registry';\nimport PaymentStrategyType from './payment-strategy-type';\nimport { AdyenV2PaymentStrategy, AdyenV2ScriptLoader } from './strategies/adyenv2';\nimport { AffirmPaymentStrategy, AffirmScriptLoader } from './strategies/affirm';\nimport { AfterpayPaymentStrategy, AfterpayScriptLoader } from './strategies/afterpay';\nimport { AmazonPayPaymentStrategy, AmazonPayScriptLoader } from './strategies/amazon-pay';\nimport {\n    createBraintreePaymentProcessor,\n    createBraintreeVisaCheckoutPaymentProcessor,\n    BraintreeCreditCardPaymentStrategy,\n    BraintreePaypalPaymentStrategy,\n    BraintreeScriptLoader,\n    BraintreeSDKCreator,\n    BraintreeVisaCheckoutPaymentStrategy,\n    VisaCheckoutScriptLoader\n} from './strategies/braintree';\nimport {\n    CardinalClient,\n    CardinalScriptLoader,\n    CardinalThreeDSecureFlow,\n} from './strategies/cardinal';\nimport { ChasePayPaymentStrategy, ChasePayScriptLoader } from './strategies/chasepay';\nimport { ConvergePaymentStrategy } from './strategies/converge';\nimport { CreditCardPaymentStrategy } from './strategies/credit-card';\nimport { CyberSourcePaymentStrategy } from './strategies/cybersource/index';\nimport {\n    createGooglePayPaymentProcessor,\n    GooglePayBraintreeInitializer,\n    GooglePayPaymentStrategy,\n    GooglePayStripeInitializer\n} from './strategies/googlepay';\nimport { KlarnaPaymentStrategy, KlarnaScriptLoader } from './strategies/klarna';\nimport { LegacyPaymentStrategy } from './strategies/legacy';\nimport { MasterpassPaymentStrategy, MasterpassScriptLoader } from './strategies/masterpass';\nimport { NoPaymentDataRequiredPaymentStrategy } from './strategies/no-payment';\nimport { OfflinePaymentStrategy } from './strategies/offline';\nimport { OffsitePaymentStrategy } from './strategies/offsite';\nimport { PaypalExpressPaymentStrategy, PaypalProPaymentStrategy, PaypalScriptLoader } from './strategies/paypal';\nimport { SagePayPaymentStrategy } from './strategies/sage-pay';\nimport { SquarePaymentStrategy, SquareScriptLoader } from './strategies/square';\nimport { StripeScriptLoader, StripeV3PaymentStrategy } from './strategies/stripev3';\nimport { WepayPaymentStrategy, WepayRiskClient } from './strategies/wepay';\nimport { ZipPaymentStrategy, ZipScriptLoader } from './strategies/zip';\n\nexport default function createPaymentStrategyRegistry(\n    store: CheckoutStore,\n    paymentClient: any,\n    requestSender: RequestSender,\n    spamProtection: GoogleRecaptcha,\n    locale: string\n) {\n    const registry = new PaymentStrategyRegistry(store, { defaultToken: PaymentStrategyType.CREDIT_CARD });\n    const scriptLoader = getScriptLoader();\n    const paymentRequestTransformer = new PaymentRequestTransformer();\n    const paymentRequestSender = new PaymentRequestSender(paymentClient);\n    const billingAddressActionCreator = new BillingAddressActionCreator(new BillingAddressRequestSender(requestSender));\n    const braintreePaymentProcessor = createBraintreePaymentProcessor(scriptLoader);\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const checkoutValidator = new CheckoutValidator(checkoutRequestSender);\n    const spamProtectionActionCreator = new SpamProtectionActionCreator(spamProtection);\n    const orderActionCreator = new OrderActionCreator(new OrderRequestSender(requestSender), checkoutValidator, spamProtectionActionCreator);\n    const storeCreditActionCreator = new StoreCreditActionCreator(new StoreCreditRequestSender(requestSender));\n    const paymentActionCreator = new PaymentActionCreator(paymentRequestSender, orderActionCreator, paymentRequestTransformer);\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender));\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(new RemoteCheckoutRequestSender(requestSender));\n    const configActionCreator = new ConfigActionCreator(new ConfigRequestSender(requestSender));\n    const checkoutActionCreator = new CheckoutActionCreator(checkoutRequestSender, configActionCreator);\n    const paymentStrategyActionCreator = new PaymentStrategyActionCreator(registry, orderActionCreator);\n    const formPoster = createFormPoster();\n\n    registry.register(PaymentStrategyType.ADYENV2, () =>\n        new AdyenV2PaymentStrategy(\n            store,\n            paymentActionCreator,\n            orderActionCreator,\n            new AdyenV2ScriptLoader(scriptLoader),\n            formPoster,\n            locale\n        )\n    );\n\n    registry.register(PaymentStrategyType.AFFIRM, () =>\n        new AffirmPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            new AffirmScriptLoader()\n        )\n    );\n\n    registry.register(PaymentStrategyType.AFTERPAY, () =>\n        new AfterpayPaymentStrategy(\n            store,\n            checkoutValidator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            storeCreditActionCreator,\n            new AfterpayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.AMAZON, () =>\n        new AmazonPayPaymentStrategy(\n            store,\n            orderActionCreator,\n            billingAddressActionCreator,\n            remoteCheckoutActionCreator,\n            new AmazonPayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.CREDIT_CARD, () =>\n        new CreditCardPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.CYBERSOURCE, () =>\n        new CyberSourcePaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            new CardinalThreeDSecureFlow(\n                store,\n                paymentActionCreator,\n                paymentMethodActionCreator,\n                new CardinalClient(new CardinalScriptLoader(scriptLoader))\n            )\n        )\n    );\n\n    registry.register(PaymentStrategyType.KLARNA, () =>\n        new KlarnaPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new KlarnaScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.LEGACY, () =>\n        new LegacyPaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.OFFLINE, () =>\n        new OfflinePaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.OFFSITE, () =>\n        new OffsitePaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.PAYPAL, () =>\n        new PaypalProPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            new CardinalThreeDSecureFlow(\n                store,\n                paymentActionCreator,\n                paymentMethodActionCreator,\n                new CardinalClient(new CardinalScriptLoader(scriptLoader))\n            )\n        )\n    );\n\n    registry.register(PaymentStrategyType.PAYPAL_EXPRESS, () =>\n        new PaypalExpressPaymentStrategy(\n            store,\n            orderActionCreator,\n            new PaypalScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.PAYPAL_EXPRESS_CREDIT, () =>\n        new PaypalExpressPaymentStrategy(\n            store,\n            orderActionCreator,\n            new PaypalScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.SAGE_PAY, () =>\n        new SagePayPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            formPoster\n        )\n    );\n\n    registry.register(PaymentStrategyType.SQUARE, () =>\n        new SquarePaymentStrategy(\n            store,\n            checkoutActionCreator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            requestSender,\n            new SquareScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.NO_PAYMENT_DATA_REQUIRED, () =>\n        new NoPaymentDataRequiredPaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE, () =>\n        new BraintreeCreditCardPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_PAYPAL, () =>\n        new BraintreePaypalPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_PAYPAL_CREDIT, () =>\n        new BraintreePaypalPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor,\n            true\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_VISA_CHECKOUT, () =>\n        new BraintreeVisaCheckoutPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createBraintreeVisaCheckoutPaymentProcessor(scriptLoader, requestSender),\n            new VisaCheckoutScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.CHASE_PAY, () =>\n        new ChasePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            requestSender,\n            new ChasePayScriptLoader(scriptLoader),\n            new WepayRiskClient(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_GOOGLE_PAY, () =>\n        new GooglePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            )\n        )\n    );\n\n    registry.register(PaymentStrategyType.WE_PAY, () =>\n        new WepayPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            new WepayRiskClient(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.MASTERPASS, () =>\n        new MasterpassPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.STRIPE_GOOGLE_PAY, () =>\n        new GooglePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            )\n        )\n    );\n\n    registry.register(PaymentStrategyType.ZIP, () =>\n        new ZipPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            storeCreditActionCreator,\n            new ZipScriptLoader(scriptLoader),\n            requestSender\n        )\n    );\n\n    registry.register(PaymentStrategyType.CONVERGE, () =>\n        new ConvergePaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            formPoster\n        )\n    );\n\n    registry.register(PaymentStrategyType.STRIPEV3, () =>\n        new StripeV3PaymentStrategy(\n            store,\n            paymentMethodActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            new StripeScriptLoader(scriptLoader)\n        )\n    );\n\n    return registry;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { Overlay } from '../../../common/overlay';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\n\nexport default function createBraintreePaymentProcessor(scriptLoader: ScriptLoader) {\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSDKCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n    const overlay = new Overlay();\n\n    return new BraintreePaymentProcessor(braintreeSDKCreator, overlay);\n}\n","import { createAction, createDataStore, Action, DataStore, ReadableDataStore } from '@bigcommerce/data-store';\n\nenum ProjectionActionType {\n    Synchronize = 'SYNCHRONIZE',\n}\n\ninterface SynchronizeAction<TState> extends Action<TState> {\n    type: ProjectionActionType.Synchronize;\n    payload: TState;\n}\n\nexport interface DataStoreProjection<TTransformedState> extends ReadableDataStore<TTransformedState> {\n    notifyState(): void;\n}\n\nexport default function createDataStoreProjection<TState, TTransformedState = TState>(\n    store: DataStore<any, Action, TState>,\n    stateTransformer: (state: TState) => TTransformedState\n): DataStoreProjection<TTransformedState> {\n    const projection = createDataStore<TState | undefined, SynchronizeAction<TState>, TTransformedState>(\n        (state, action) => action.type === ProjectionActionType.Synchronize ?\n            action.payload :\n            state,\n        store.getState(),\n        { stateTransformer }\n    );\n\n    store.subscribe(state => {\n        projection.dispatch(createAction(ProjectionActionType.Synchronize, state) as SynchronizeAction<TState>);\n    }, { initial: false });\n\n    return projection;\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { Address } from '../../address';\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../../checkout';\nimport { addMinutes, isFuture } from '../../common/date-time';\nimport { MissingDataError, MissingDataErrorType } from '../../common/error/errors';\n\nimport { SessionContext, VaultAccessToken } from './instrument';\nimport { DeleteInstrumentAction, InstrumentActionType, LoadInstrumentsAction } from './instrument-actions';\nimport InstrumentRequestSender from './instrument-request-sender';\n\nexport default class InstrumentActionCreator {\n    constructor(\n        private _instrumentRequestSender: InstrumentRequestSender\n    ) {}\n\n    loadInstruments(): ThunkAction<LoadInstrumentsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<LoadInstrumentsAction>) => {\n            observer.next(createAction(InstrumentActionType.LoadInstrumentsRequested));\n\n            const session = this._getSessionContext(store);\n            const token = this._getCurrentAccessToken(store);\n            const shippingAddress = this._getShippingAddress(store);\n\n            return this._getValidAccessToken(token)\n                .then(currentToken =>\n                    this._instrumentRequestSender.loadInstruments({\n                            ...session,\n                            authToken: currentToken.vaultAccessToken,\n                        },\n                        shippingAddress\n                    )\n                        .then(({ body }) => {\n                            observer.next(createAction(\n                                InstrumentActionType.LoadInstrumentsSucceeded,\n                                body,\n                                currentToken\n                            ));\n                            observer.complete();\n                        })\n                )\n                .catch(response => {\n                    observer.error(createErrorAction(InstrumentActionType.LoadInstrumentsFailed, response));\n                });\n        });\n    }\n\n    deleteInstrument(instrumentId: string): ThunkAction<DeleteInstrumentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<DeleteInstrumentAction>) => {\n            observer.next(createAction(InstrumentActionType.DeleteInstrumentRequested, undefined, { instrumentId }));\n\n            const session = this._getSessionContext(store);\n            const token = this._getCurrentAccessToken(store);\n\n            return this._getValidAccessToken(token)\n                .then(currentToken =>\n                    this._instrumentRequestSender.deleteInstrument({\n                        ...session,\n                        authToken: currentToken.vaultAccessToken,\n                    }, instrumentId)\n                        .then(({ body }) => {\n                            observer.next(createAction(InstrumentActionType.DeleteInstrumentSucceeded, body, {\n                                instrumentId,\n                                ...currentToken,\n                            }));\n                            observer.complete();\n                        })\n                )\n                .catch(response => {\n                    observer.error(createErrorAction(InstrumentActionType.DeleteInstrumentFailed, response, { instrumentId }));\n                });\n        });\n    }\n\n    private _isValidVaultAccessToken(token: VaultAccessToken): boolean {\n        if (!token || !token.vaultAccessToken) {\n            return false;\n        }\n\n        const expiryBuffer = 2;\n        const expiry = addMinutes(new Date(token.vaultAccessExpiry), expiryBuffer);\n\n        return isFuture(expiry);\n    }\n\n    private _getCurrentAccessToken(store: ReadableCheckoutStore): VaultAccessToken | undefined {\n        const { instruments } = store.getState();\n        const meta = instruments.getInstrumentsMeta();\n\n        if (!meta) {\n            return;\n        }\n\n        return {\n            vaultAccessToken: meta.vaultAccessToken,\n            vaultAccessExpiry: meta.vaultAccessExpiry,\n        };\n    }\n\n    private _getValidAccessToken(token?: VaultAccessToken): Promise<VaultAccessToken> {\n        return token && this._isValidVaultAccessToken(token) ?\n            Promise.resolve(token) :\n            this._instrumentRequestSender.getVaultAccessToken().then(({ body }) => body);\n    }\n\n    private _getShippingAddress(store: ReadableCheckoutStore): Address | undefined {\n        const state = store.getState();\n\n        return state.shippingAddress.getShippingAddress();\n    }\n\n    private _getSessionContext(store: ReadableCheckoutStore): SessionContext {\n        const state = store.getState();\n        const config = state.config.getStoreConfig();\n        const cart = state.cart.getCart();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        const { customerId } = cart;\n        const { storeId } = config.storeProfile;\n        const { code } = config.shopperCurrency.isTransactional ? config.shopperCurrency : config.currency;\n\n        return {\n            customerId,\n            storeId,\n            currencyCode: code,\n        };\n    }\n}\n","export default function addMinutes(date: Date, amount: number): Date {\n    const newDate = new Date(date.getTime());\n\n    newDate.setMinutes(date.getMinutes() + amount);\n\n    return newDate;\n}\n","export default function isFuture(date: Date): boolean {\n    return date.valueOf() > Date.now();\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport PaymentResponse from '../payment-response';\n\nimport Instrument, { VaultAccessToken } from './instrument';\nimport {\n    InstrumentsResponseBody,\n    InstrumentErrorResponseBody,\n    InternalInstrument,\n    InternalInstrumentsResponseBody,\n    InternalInstrumentErrorResponseBody,\n    InternalVaultAccessTokenResponseBody,\n} from './instrument-response-body';\n\nexport default class InstrumentResponseTransformer {\n    transformResponse(\n        response: PaymentResponse<InternalInstrumentsResponseBody>\n    ): Response<InstrumentsResponseBody> {\n        const { body, ...payload } = this._transformResponse(response);\n\n        return {\n            ...payload,\n            body: {\n                vaultedInstruments: this._transformVaultedInstruments(body.vaulted_instruments),\n            },\n        };\n    }\n\n    transformErrorResponse(\n        response: PaymentResponse<InternalInstrumentErrorResponseBody>\n    ): Response<InstrumentErrorResponseBody> {\n        return this._transformResponse(response);\n    }\n\n    transformVaultAccessResponse(\n        response: Response<InternalVaultAccessTokenResponseBody>\n    ): Response<VaultAccessToken> {\n        return {\n            ...response,\n            body: {\n                vaultAccessToken: response.body.data.token,\n                vaultAccessExpiry: response.body.data.expires_at,\n            },\n        };\n    }\n\n    private _transformVaultedInstruments(vaultedInstruments: InternalInstrument[] = []): Instrument[] {\n        return vaultedInstruments.map(instrument => ({\n            bigpayToken: instrument.bigpay_token,\n            defaultInstrument: instrument.default_instrument,\n            provider: instrument.provider,\n            iin: instrument.iin,\n            last4: instrument.last_4,\n            expiryMonth: instrument.expiry_month,\n            expiryYear: instrument.expiry_year,\n            brand: instrument.brand,\n            trustedShippingAddress: instrument.trusted_shipping_address,\n        }));\n    }\n\n    private _transformResponse<T>(response: PaymentResponse<T>): Response<T> {\n        const { data: body, ...payload } = response;\n\n        return {\n            ...payload,\n            body,\n        };\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { mapToInternalAddress, Address } from '../../address';\nimport { RequestOptions } from '../../common/http-request';\nimport PaymentResponse from '../payment-response';\n\nimport { InstrumentRequestContext, VaultAccessToken } from './instrument';\nimport {\n    InstrumentsResponseBody,\n    InternalInstrumentsResponseBody,\n    InternalInstrumentErrorResponseBody,\n} from './instrument-response-body';\nimport InstrumentResponseTransformer from './instrument-response-transformer';\n\nexport default class InstrumentRequestSender {\n    private _transformer: InstrumentResponseTransformer;\n\n    constructor(\n        private _client: any,\n        private _requestSender: RequestSender\n    ) {\n        this._transformer = new InstrumentResponseTransformer();\n    }\n\n    getVaultAccessToken(\n        { timeout }: RequestOptions = {}\n    ): Promise<Response<VaultAccessToken>> {\n        const url = '/internalapi/v1/checkout/payments/vault-access-token';\n\n        return this._requestSender.get(url, { timeout }).then(response => ({\n            ...response,\n            body: {\n                vaultAccessToken: response.body.data.token,\n                vaultAccessExpiry: response.body.data.expires_at,\n            },\n        }));\n    }\n\n    loadInstruments(\n        requestContext: InstrumentRequestContext,\n        shippingAddress?: Address\n    ): Promise<Response<InstrumentsResponseBody>> {\n        return (shippingAddress) ?\n            this._loadInstrumentsWithAddress(requestContext, shippingAddress) :\n            this._loadInstruments(requestContext);\n    }\n\n    deleteInstrument(\n        requestContext: InstrumentRequestContext,\n        instrumentId: string\n    ): Promise<Response<InstrumentsResponseBody>> {\n        const payload = {\n            ...requestContext,\n            instrumentId,\n        };\n\n        return new Promise((resolve, reject) => {\n            this._client.deleteShopperInstrument(\n                payload, (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>\n                ) =>  errorResponse ?\n                    reject(this._transformer.transformErrorResponse(errorResponse)) :\n                    resolve(this._transformer.transformResponse(response))\n            );\n        });\n    }\n\n    private _loadInstruments(\n        requestContext: InstrumentRequestContext\n    ): Promise<Response<InstrumentsResponseBody>> {\n        return new Promise((resolve, reject) => {\n            this._client.loadInstruments(\n                requestContext, (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>\n                ) => errorResponse ?\n                    reject(this._transformer.transformErrorResponse(errorResponse)) :\n                    resolve(this._transformer.transformResponse(response))\n            );\n        });\n    }\n\n    private _loadInstrumentsWithAddress(\n        requestContext: InstrumentRequestContext,\n        shippingAddress: Address\n    ): Promise<Response<InstrumentsResponseBody>> {\n        const payload = {\n            ...requestContext,\n            shippingAddress: mapToInternalAddress(shippingAddress),\n        };\n\n        return new Promise((resolve, reject) => {\n            this._client.loadInstrumentsWithAddress(\n                payload, (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>\n                ) => errorResponse ?\n                    reject(this._transformer.transformErrorResponse(errorResponse)) :\n                    resolve(this._transformer.transformResponse(response))\n            );\n        });\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { LoadShippingCountriesAction, ShippingCountryActionType } from './shipping-country-actions';\nimport ShippingCountryRequestSender from './shipping-country-request-sender';\n\nexport default class ShippingCountryActionCreator {\n    constructor(\n        private _shippingCountryRequestSender: ShippingCountryRequestSender\n    ) {}\n\n    loadCountries(options?: RequestOptions): Observable<LoadShippingCountriesAction> {\n        return Observable.create((observer: Observer<LoadShippingCountriesAction>) => {\n            observer.next(createAction(ShippingCountryActionType.LoadShippingCountriesRequested));\n\n            this._shippingCountryRequestSender.loadCountries(options)\n                .then(response => {\n                    observer.next(createAction(ShippingCountryActionType.LoadShippingCountriesSucceeded, response.body.data));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ShippingCountryActionType.LoadShippingCountriesFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\nimport { CountryResponseBody } from '../geography';\n\nexport default class ShippingCountryRequestSender {\n    constructor(\n        private _requestSender: RequestSender,\n        private _config: { locale?: string }\n    ) {}\n\n    loadCountries({ timeout }: RequestOptions = {}): Promise<Response<CountryResponseBody>> {\n        const url = '/internalapi/v1/shipping/countries';\n        const headers = {\n            'Accept-Language': this._config.locale,\n        };\n\n        return this._requestSender.get(url, { headers, timeout });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { Registry } from '../common/registry';\n\nimport { ShippingInitializeOptions, ShippingRequestOptions } from './shipping-request-options';\nimport {\n    ShippingStrategyActionType,\n    ShippingStrategyDeinitializeAction,\n    ShippingStrategyInitializeAction,\n    ShippingStrategySelectOptionAction,\n    ShippingStrategyUpdateAddressAction,\n} from './shipping-strategy-actions';\nimport { ShippingStrategy } from './strategies';\n\nexport default class ShippingStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: Registry<ShippingStrategy>\n    ) {}\n\n    updateAddress(address: Partial<AddressRequestBody>, options?: ShippingRequestOptions): ThunkAction<ShippingStrategyUpdateAddressAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyUpdateAddressAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.UpdateAddressRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .updateAddress(address, { ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.UpdateAddressSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.UpdateAddressFailed, error, { methodId }));\n                });\n        });\n    }\n\n    selectOption(shippingOptionId: string, options?: ShippingRequestOptions): ThunkAction<ShippingStrategySelectOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategySelectOptionAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.SelectOptionRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .selectOption(shippingOptionId, { ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.SelectOptionSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.SelectOptionFailed, error, { methodId }));\n                });\n        });\n    }\n\n    initialize(options?: ShippingInitializeOptions): ThunkAction<ShippingStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyInitializeAction>) => {\n            const state = store.getState();\n            const payment = state.payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n            const mergedOptions = { ...options, methodId };\n\n            if (methodId && state.shippingStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(ShippingStrategyActionType.InitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .initialize(mergedOptions)\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.InitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.InitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    deinitialize(options?: ShippingRequestOptions): ThunkAction<ShippingStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyDeinitializeAction>) => {\n            const state = store.getState();\n            const payment = state.payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            if (methodId && !state.shippingStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(ShippingStrategyActionType.DeinitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .deinitialize({ ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.DeinitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.DeinitializeFailed, error, { methodId }));\n                });\n        });\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\n\nimport { isInternalAddressEqual, mapFromInternalAddress } from '../../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { AmazonPayAddressBook, AmazonPayOrderReference, AmazonPayScriptLoader, AmazonPayWindow } from '../../../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport ConsignmentActionCreator from '../../consignment-action-creator';\nimport { ShippingInitializeOptions, ShippingRequestOptions } from '../../shipping-request-options';\nimport { ShippingStrategyActionType } from '../../shipping-strategy-actions';\nimport ShippingStrategy from '../shipping-strategy';\n\nimport AmazonPayShippingInitializeOptions from './amazon-pay-shipping-initialize-options';\n\nexport default class AmazonPayShippingStrategy implements ShippingStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    initialize(options: ShippingInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { amazon: amazonOptions, methodId } = options;\n\n        if (!amazonOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.amazon\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise((resolve, reject) => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const onReady = () => {\n                    this._createAddressBook(amazonOptions)\n                        .then(resolve)\n                        .catch(reject);\n                };\n\n                this._scriptLoader.loadWidget(this._paymentMethod, onReady)\n                    .catch(reject);\n            }))\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    updateAddress(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    selectOption(optionId: string, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId, options)\n        );\n    }\n\n    private _createAddressBook(options: AmazonPayShippingInitializeOptions): Promise<AmazonPayAddressBook> {\n        return new Promise((resolve, reject) => {\n            const { container, onAddressSelect = () => {}, onError = () => {}, onReady = () => {} } = options;\n            const merchantId = this._paymentMethod && this._paymentMethod.config.merchantId;\n\n            if (!document.getElementById(container)) {\n                return reject(new InvalidArgumentError('Unable to create AmazonPay AddressBook widget without valid container ID.'));\n            }\n\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.ShippingNotInitialized));\n            }\n\n            if (!merchantId) {\n                return reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n            }\n\n            const widget = new this._window.OffAmazonPayments.Widgets.AddressBook({\n                design: {\n                    designMode: 'responsive',\n                },\n                scope: 'payments:billing_address payments:shipping_address payments:widget profile',\n                sellerId: merchantId,\n                onAddressSelect: orderReference => {\n                    this._synchronizeShippingAddress()\n                        .then(() => onAddressSelect(orderReference))\n                        .catch(onError);\n                },\n                onError: error => {\n                    reject(error);\n                    onError(error);\n                },\n                onReady: orderReference => {\n                    this._updateOrderReference(orderReference)\n                        .then(() => {\n                            resolve();\n                            onReady(orderReference);\n                        })\n                        .catch(onError);\n                },\n            });\n\n            widget.bind(container);\n\n            return widget;\n        });\n    }\n\n    private _synchronizeShippingAddress(): Promise<InternalCheckoutSelectors> {\n        const methodId = this._paymentMethod && this._paymentMethod.id;\n        const amazon = this._store.getState().remoteCheckout.getCheckout('amazon');\n        const referenceId = amazon ? amazon.referenceId : undefined;\n\n        if (!methodId || !referenceId) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._store.dispatch(\n            createAction(ShippingStrategyActionType.UpdateAddressRequested, undefined, { methodId })\n        )\n            .then(() => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializeShipping(methodId, { referenceId })\n            ))\n            .then(state => {\n                const amazon = state.remoteCheckout.getCheckout('amazon');\n                const remoteAddress = amazon && amazon.shipping && amazon.shipping.address;\n                const address = state.shippingAddress.getShippingAddress();\n\n                if (remoteAddress === false) {\n                    throw new RemoteCheckoutSynchronizationError();\n                }\n\n                if (!remoteAddress || isInternalAddressEqual(remoteAddress, address || {})) {\n                    return this._store.getState();\n                }\n\n                return this._store.dispatch(\n                    this._consignmentActionCreator.updateAddress(mapFromInternalAddress(remoteAddress))\n                );\n            })\n            .then(() => this._store.dispatch(\n                createAction(ShippingStrategyActionType.UpdateAddressSucceeded, undefined, { methodId })\n            ))\n            .catch(error => this._store.dispatch(\n                createErrorAction(ShippingStrategyActionType.UpdateAddressFailed, error, { methodId })\n            ));\n    }\n\n    private _updateOrderReference(orderReference: AmazonPayOrderReference): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.updateCheckout('amazon', {\n                referenceId: orderReference.getAmazonOrderReferenceId(),\n            })\n        );\n    }\n}\n","import { AddressRequestBody } from '../../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport ConsignmentActionCreator from '../../consignment-action-creator';\nimport { ShippingRequestOptions } from '../../shipping-request-options';\nimport ShippingStrategy from '../shipping-strategy';\n\nexport default class DefaultShippingStrategy implements ShippingStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _consignmentActionCreator: ConsignmentActionCreator\n    ) {}\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.updateAddress(address, options)\n        );\n    }\n\n    selectOption(optionId: string, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId, options)\n        );\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { memoize } from 'lodash';\n\nimport isPlainObject from './is-plain-object';\n\nconst cloneDeep = memoize(<T>(input: T): T => {\n    if (Array.isArray(input)) {\n        return input.map((value: T[keyof T]) => (\n            cloneDeepSafe(value)\n        )) as any;\n    }\n\n    if (isPlainObject(input)) {\n        return (Object.keys(input) as Array<keyof T>)\n            .reduce((result, key) => ({\n                ...result,\n                [key]: cloneDeepSafe(input[key]),\n            }), {}) as T;\n    }\n\n    return input;\n});\n\n// Use WeakMap as the MapCache, this allows for better garbage collection\n// There's a deprecated `clear` method in the lodash implementation\n// of MapCache, hence the `any`\ncloneDeep.cache = new WeakMap() as any;\n\n/**\n * This is a wrapper function for `cloneDeep`. We need it because `cloneDeep` is\n * a memoized function using an instance of `WeakMap` as its cache. Without this\n * wrapper, the memoized function will throw an error if it is called with a\n * non-object argument.\n */\nconst cloneDeepSafe = <T>(input: T): T => {\n    return typeof input === 'object' && input !== null ?\n        cloneDeep(input) :\n        input;\n};\n\n/**\n * Clone the return value of a function. If the result is the same as previous\n * calls, return the previous clone instead of cloning it again.\n */\nexport default function cloneResult<T extends Func>(fn: T): T {\n    return ((...args: any[]) => cloneDeepSafe(fn(...args))) as T;\n}\n\nexport type Func = (...args: any[]) => any;\n","import { createSelectorCreator, defaultMemoize } from 'reselect';\nimport * as shallowEqual from 'shallowequal';\n\nimport withMemoizedCombiner from './with-memoized-combiner';\n\nconst createShallowEqualSelector = createSelectorCreator(\n    defaultMemoize,\n    (a: any, b: any) => shallowEqual(a, b)\n);\n\nexport default withMemoizedCombiner(createShallowEqualSelector);\n","import {\n    createCheckoutStoreErrorSelectorFactory,\n    createCheckoutStoreSelectorFactory,\n    createCheckoutStoreStatusSelectorFactory,\n    CheckoutSelectors,\n    InternalCheckoutSelectors,\n} from '../checkout';\n\nexport type CheckoutSelectorsFactory = (selectors: InternalCheckoutSelectors) => CheckoutSelectors;\n\nexport function createCheckoutSelectorsFactory(): CheckoutSelectorsFactory {\n    const createCheckoutStoreSelector = createCheckoutStoreSelectorFactory();\n    const createCheckoutStoreErrorSelector = createCheckoutStoreErrorSelectorFactory();\n    const createCheckoutStoreStatusSelector = createCheckoutStoreStatusSelectorFactory();\n\n    return (selectors: InternalCheckoutSelectors) => {\n        const data = createCheckoutStoreSelector(selectors);\n        const errors = createCheckoutStoreErrorSelector(selectors);\n        const statuses = createCheckoutStoreStatusSelector(selectors);\n\n        return {\n            data,\n            errors,\n            statuses,\n        };\n    };\n}\n\nexport default function createCheckoutSelectors(selectors: InternalCheckoutSelectors): CheckoutSelectors {\n    return createCheckoutSelectorsFactory()(selectors);\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { Address } from '../address';\nimport { BillingAddress } from '../billing';\nimport { Cart } from '../cart';\nimport { createSelector } from '../common/selector';\nimport { cloneResult as clone } from '../common/utility';\nimport { StoreConfig } from '../config/config';\nimport { Coupon, GiftCertificate } from '../coupon';\nimport { Customer } from '../customer';\nimport { FormField } from '../form';\nimport { Country } from '../geography';\nimport { Order } from '../order';\nimport { PaymentMethod } from '../payment';\nimport { Instrument } from '../payment/instrument';\nimport { Consignment, ShippingOption } from '../shipping';\n\nimport Checkout from './checkout';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for getting the state of the current checkout.\n *\n * This object has a set of methods that allow you to get a specific piece of\n * checkout information, such as shipping and billing details.\n */\nexport default interface CheckoutStoreSelector {\n    /**\n     * Gets the current checkout.\n     *\n     * @returns The current checkout if it is loaded, otherwise undefined.\n     */\n    getCheckout(): Checkout | undefined;\n\n    /**\n     * Gets the current order.\n     *\n     * @returns The current order if it is loaded, otherwise undefined.\n     */\n    getOrder(): Order | undefined;\n\n    /**\n     * Gets the checkout configuration of a store.\n     *\n     * @returns The configuration object if it is loaded, otherwise undefined.\n     */\n    getConfig(): StoreConfig | undefined;\n\n    /**\n     * Gets the shipping address of the current checkout.\n     *\n     * If the address is partially complete, it may not have shipping options\n     * associated with it.\n     *\n     * @returns The shipping address object if it is loaded, otherwise\n     * undefined.\n     */\n    getShippingAddress(): Address | undefined;\n\n    /**\n     * Gets a list of shipping options available for the shipping address.\n     *\n     * If there is no shipping address assigned to the current checkout, the\n     * list of shipping options will be empty.\n     *\n     * @returns The list of shipping options if any, otherwise undefined.\n     */\n    getShippingOptions(): ShippingOption[] | undefined;\n\n    /**\n     * Gets a list of consignments.\n     *\n     * If there are no consignments created for to the current checkout, the\n     * list will be empty.\n     *\n     * @returns The list of consignments if any, otherwise undefined.\n     */\n    getConsignments(): Consignment[] | undefined;\n\n    /**\n     * Gets the selected shipping option for the current checkout.\n     *\n     * @returns The shipping option object if there is a selected option,\n     * otherwise undefined.\n     */\n    getSelectedShippingOption(): ShippingOption | undefined;\n\n    /**\n     * Gets a list of countries available for shipping.\n     *\n     * @returns The list of countries if it is loaded, otherwise undefined.\n     */\n    getShippingCountries(): Country[] | undefined;\n\n    /**\n     * Gets the billing address of an order.\n     *\n     * @returns The billing address object if it is loaded, otherwise undefined.\n     */\n    getBillingAddress(): BillingAddress | undefined;\n\n    /**\n     * Gets a list of countries available for billing.\n     *\n     * @returns The list of countries if it is loaded, otherwise undefined.\n     */\n    getBillingCountries(): Country[] | undefined;\n\n    /**\n     * Gets a list of payment methods available for checkout.\n     *\n     * @returns The list of payment methods if it is loaded, otherwise undefined.\n     */\n    getPaymentMethods(): PaymentMethod[] | undefined;\n\n    /**\n     * Gets a payment method by an id.\n     *\n     * The method returns undefined if unable to find a payment method with the\n     * specified id, either because it is not available for the customer, or it\n     * is not loaded.\n     *\n     * @param methodId - The identifier of the payment method.\n     * @param gatewayId - The identifier of a payment provider providing the\n     * payment method.\n     * @returns The payment method object if loaded and available, otherwise,\n     * undefined.\n     */\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined;\n\n    /**\n     * Gets the payment method that is selected for checkout.\n     *\n     * @returns The payment method object if there is a selected method;\n     * undefined if otherwise.\n     */\n    getSelectedPaymentMethod(): PaymentMethod | undefined;\n\n    /**\n     * Gets the current cart.\n     *\n     * @returns The current cart object if it is loaded, otherwise undefined.\n     */\n    getCart(): Cart | undefined;\n\n    /**\n     * Gets a list of coupons that are applied to the current checkout.\n     *\n     * @returns The list of applied coupons if there is any, otherwise undefined.\n     */\n    getCoupons(): Coupon[] | undefined;\n\n    /**\n     * Gets a list of gift certificates that are applied to the current checkout.\n     *\n     * @returns The list of applied gift certificates if there is any, otherwise undefined.\n     */\n    getGiftCertificates(): GiftCertificate[] | undefined;\n\n    /**\n     * Gets the current customer.\n     *\n     * @returns The current customer object if it is loaded, otherwise\n     * undefined.\n     */\n    getCustomer(): Customer | undefined;\n\n    /**\n     * Checks if payment data is required or not.\n     *\n     * If payment data is required, customers should be prompted to enter their\n     * payment details.\n     *\n     * ```js\n     * if (state.checkout.isPaymentDataRequired()) {\n     *     // Render payment form\n     * } else {\n     *     // Render \"Payment is not required for this order\" message\n     * }\n     * ```\n     *\n     * @param useStoreCredit - If true, check whether payment data is required\n     * with store credit applied; otherwise, check without store credit.\n     * @returns True if payment data is required, otherwise false.\n     */\n    isPaymentDataRequired(useStoreCredit?: boolean): boolean;\n\n    /**\n     * Checks if payment data is submitted or not.\n     *\n     * If payment data is already submitted using a payment method, customers\n     * should not be prompted to enter their payment details again.\n     *\n     * @param methodId - The identifier of the payment method.\n     * @param gatewayId - The identifier of a payment provider providing the\n     * payment method.\n     * @returns True if payment data is submitted, otherwise false.\n     */\n    isPaymentDataSubmitted(methodId: string, gatewayId?: string): boolean;\n\n    /**\n     * Gets a list of payment instruments associated with the current customer.\n     *\n     * @returns The list of payment instruments if it is loaded, otherwise undefined.\n     */\n    getInstruments(): Instrument[] | undefined;\n\n    /**\n     * Gets a set of form fields that should be presented to customers in order\n     * to capture their billing address for a specific country.\n     *\n     * @param countryCode - A 2-letter country code (ISO 3166-1 alpha-2).\n     * @returns The set of billing address form fields if it is loaded,\n     * otherwise undefined.\n     */\n    getBillingAddressFields(countryCode: string): FormField[];\n\n    /**\n     * Gets a set of form fields that should be presented to customers in order\n     * to capture their shipping address for a specific country.\n     *\n     * @param countryCode - A 2-letter country code (ISO 3166-1 alpha-2).\n     * @returns The set of shipping address form fields if it is loaded,\n     * otherwise undefined.\n     */\n    getShippingAddressFields(countryCode: string): FormField[];\n}\n\nexport type CheckoutStoreSelectorFactory = (state: InternalCheckoutSelectors) => CheckoutStoreSelector;\n\nexport function createCheckoutStoreSelectorFactory(): CheckoutStoreSelectorFactory {\n    const getCheckout = createSelector(\n        ({ checkout }: InternalCheckoutSelectors) => checkout.getCheckout,\n        getCheckout => clone(getCheckout)\n    );\n\n    const getOrder = createSelector(\n        ({ order }: InternalCheckoutSelectors) => order.getOrder,\n        getOrder => clone(getOrder)\n    );\n\n    const getConfig = createSelector(\n        ({ config }: InternalCheckoutSelectors) => config.getStoreConfig,\n        getStoreConfig => clone(getStoreConfig)\n    );\n\n    const getShippingAddress = createSelector(\n        ({ shippingAddress }: InternalCheckoutSelectors) => shippingAddress.getShippingAddress,\n        ({ config }: InternalCheckoutSelectors) => config.getContextConfig,\n        (getShippingAddress, getContextConfig) => clone(() => {\n            const shippingAddress = getShippingAddress();\n            const context = getContextConfig();\n\n            if (!shippingAddress) {\n                if (!context || !context.geoCountryCode) {\n                    return;\n                }\n\n                return {\n                    firstName: '',\n                    lastName: '',\n                    company: '',\n                    address1: '',\n                    address2: '',\n                    city: '',\n                    stateOrProvince: '',\n                    stateOrProvinceCode: '',\n                    postalCode: '',\n                    country: '',\n                    phone: '',\n                    customFields: [],\n                    countryCode: context.geoCountryCode,\n                };\n            }\n\n            return shippingAddress;\n        })\n    );\n\n    const getShippingOptions = createSelector(\n        ({ consignments }: InternalCheckoutSelectors) => consignments.getConsignments,\n        getConsignments => clone(() => {\n            const consignments = getConsignments();\n\n            if (consignments && consignments.length) {\n                return consignments[0].availableShippingOptions;\n            }\n        })\n    );\n\n    const getConsignments = createSelector(\n        ({ consignments }: InternalCheckoutSelectors) => consignments.getConsignments,\n        getConsignments => clone(getConsignments)\n    );\n\n    const getSelectedShippingOption = createSelector(\n        ({ consignments }: InternalCheckoutSelectors) => consignments.getConsignments,\n        getConsignments => clone(() => {\n            const consignments = getConsignments();\n\n            if (!consignments || !consignments.length) {\n                return;\n            }\n\n            return consignments[0].selectedShippingOption;\n        })\n    );\n\n    const getShippingCountries = createSelector(\n        ({ shippingCountries }: InternalCheckoutSelectors) => shippingCountries.getShippingCountries,\n        getShippingCountries => clone(getShippingCountries)\n    );\n\n    const getBillingAddress = createSelector(\n        ({ billingAddress }: InternalCheckoutSelectors) => billingAddress.getBillingAddress,\n        getBillingAddress => clone(getBillingAddress)\n    );\n\n    const getBillingCountries = createSelector(\n        ({ countries }: InternalCheckoutSelectors) => countries.getCountries,\n        getCountries => clone(getCountries)\n    );\n\n    const getPaymentMethods = createSelector(\n        ({ paymentMethods }: InternalCheckoutSelectors) => paymentMethods.getPaymentMethods,\n        getPaymentMethods => clone(getPaymentMethods)\n    );\n\n    const getPaymentMethod = createSelector(\n        ({ paymentMethods }: InternalCheckoutSelectors) => paymentMethods.getPaymentMethod,\n        getPaymentMethod => clone(getPaymentMethod)\n    );\n\n    const getSelectedPaymentMethod = createSelector(\n        ({ payment }: InternalCheckoutSelectors) => payment.getPaymentId,\n        ({ paymentMethods }: InternalCheckoutSelectors) => paymentMethods.getPaymentMethod,\n        (getPaymentId, getPaymentMethod) => clone(() => {\n            const payment = getPaymentId();\n\n            return payment && getPaymentMethod(payment.providerId, payment.gatewayId);\n        })\n    );\n\n    const getCart = createSelector(\n        ({ cart }: InternalCheckoutSelectors) => cart.getCart,\n        getCart => clone(getCart)\n    );\n\n    const getCoupons = createSelector(\n        ({ coupons }: InternalCheckoutSelectors) => coupons.getCoupons,\n        getCoupons => clone(getCoupons)\n    );\n\n    const getGiftCertificates = createSelector(\n        ({ giftCertificates }: InternalCheckoutSelectors) => giftCertificates.getGiftCertificates,\n        getGiftCertificates => clone(getGiftCertificates)\n    );\n\n    const getCustomer = createSelector(\n        ({ customer }: InternalCheckoutSelectors) => customer.getCustomer,\n        getCustomer => clone(getCustomer)\n    );\n\n    const isPaymentDataRequired = createSelector(\n        ({ payment }: InternalCheckoutSelectors) => payment.isPaymentDataRequired,\n        isPaymentDataRequired => clone(isPaymentDataRequired)\n    );\n\n    const isPaymentDataSubmitted = createSelector(\n        ({ payment }: InternalCheckoutSelectors) => payment.isPaymentDataSubmitted,\n        ({ paymentMethods }: InternalCheckoutSelectors) => paymentMethods.getPaymentMethod,\n        (isPaymentDataSubmitted, getPaymentMethod) => clone((methodId: string, gatewayId?: string) => {\n            return isPaymentDataSubmitted(getPaymentMethod(methodId, gatewayId));\n        })\n    );\n\n    const getInstruments = createSelector(\n        ({ instruments }: InternalCheckoutSelectors) => instruments.getInstruments,\n        getInstruments => clone(getInstruments)\n    );\n\n    const getBillingAddressFields = createSelector(\n        ({ form }: InternalCheckoutSelectors) => form.getBillingAddressFields,\n        ({ countries }: InternalCheckoutSelectors) => countries.getCountries,\n        (getBillingAddressFields, getCountries) => clone((countryCode: string) => {\n            return getBillingAddressFields(getCountries(), countryCode);\n        })\n    );\n\n    const getShippingAddressFields = createSelector(\n        ({ form }: InternalCheckoutSelectors) => form.getShippingAddressFields,\n        ({ shippingCountries }: InternalCheckoutSelectors) => shippingCountries.getShippingCountries,\n        (getShippingAddressFields, getShippingCountries) => clone((countryCode: string) => {\n            return getShippingAddressFields(getShippingCountries(), countryCode);\n        })\n    );\n\n    return memoizeOne((\n        state: InternalCheckoutSelectors\n    ): CheckoutStoreSelector => {\n        return {\n            getCheckout: getCheckout(state),\n            getOrder: getOrder(state),\n            getConfig: getConfig(state),\n            getShippingAddress: getShippingAddress(state),\n            getShippingOptions: getShippingOptions(state),\n            getConsignments: getConsignments(state),\n            getSelectedShippingOption: getSelectedShippingOption(state),\n            getShippingCountries: getShippingCountries(state),\n            getBillingAddress: getBillingAddress(state),\n            getBillingCountries: getBillingCountries(state),\n            getPaymentMethods: getPaymentMethods(state),\n            getPaymentMethod: getPaymentMethod(state),\n            getSelectedPaymentMethod: getSelectedPaymentMethod(state),\n            getCart: getCart(state),\n            getCoupons: getCoupons(state),\n            getGiftCertificates: getGiftCertificates(state),\n            getCustomer: getCustomer(state),\n            isPaymentDataRequired: isPaymentDataRequired(state),\n            isPaymentDataSubmitted: isPaymentDataSubmitted(state),\n            getInstruments: getInstruments(state),\n            getBillingAddressFields: getBillingAddressFields(state),\n            getShippingAddressFields: getShippingAddressFields(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { RequestError } from '../common/error/errors';\nimport { createSelector, createShallowEqualSelector } from '../common/selector';\nimport { Omit } from '../common/types';\n\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for getting the error of any asynchronous checkout action, if\n * there is any.\n *\n * This object has a set of getters that would return an error if an action is\n * not executed successfully. For example, if you are unable to submit an order,\n * you can use this object to retrieve the reason for the failure.\n */\nexport default interface CheckoutStoreErrorSelector {\n    getError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load the current checkout.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadCheckoutError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to update the current checkout.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateCheckoutError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to submit the current order.\n     *\n     * @returns The error object if unable to submit, otherwise undefined.\n     */\n    getSubmitOrderError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to finalize the current order.\n     *\n     * @returns The error object if unable to finalize, otherwise undefined.\n     */\n    getFinalizeOrderError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load the current order.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadOrderError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load the current cart.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadCartError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load billing countries.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadBillingCountriesError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load shipping countries.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadShippingCountriesError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load payment methods.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadPaymentMethodsError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load a specific payment method.\n     *\n     * @param methodId - The identifier of the payment method to load.\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadPaymentMethodError(methodId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to initialize a specific payment method.\n     *\n     * @param methodId - The identifier of the payment method to initialize.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializePaymentError(methodId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to sign in.\n     *\n     * @returns The error object if unable to sign in, otherwise undefined.\n     */\n    getSignInError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to sign out.\n     *\n     * @returns The error object if unable to sign out, otherwise undefined.\n     */\n    getSignOutError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to initialize the customer step of a checkout\n     * process.\n     *\n     * @param methodId - The identifer of the initialization method to execute.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializeCustomerError(methodId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to load shipping options.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadShippingOptionsError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to select a shipping option.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to select, otherwise undefined.\n     */\n    getSelectShippingOptionError(consignmentId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to continue as guest.\n     *\n     * @returns The error object if unable to continue, otherwise undefined.\n     */\n    getContinueAsGuestError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to update billing address.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateBillingAddressError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to update shipping address.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateShippingAddressError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to delete a consignment.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to delete, otherwise undefined.\n     */\n    getDeleteConsignmentError(consignmentId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to update a consignment.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateConsignmentError(consignmentId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to create consignments.\n     *\n     * @returns The error object if unable to create, otherwise undefined.\n     */\n    getCreateConsignmentsError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to initialize the shipping step of a checkout\n     * process.\n     *\n     * @param methodId - The identifer of the initialization method to execute.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializeShippingError(methodId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to apply store credit.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyStoreCreditError(): RequestError | undefined;\n\n    /**\n     * Returns an error if unable to apply a coupon code.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyCouponError(): RequestError | undefined;\n\n    /**\n     * Returns an error if unable to remove a coupon code.\n     *\n     * @returns The error object if unable to remove, otherwise undefined.\n     */\n    getRemoveCouponError(): RequestError | undefined;\n\n    /**\n     * Returns an error if unable to apply a gift certificate.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyGiftCertificateError(): RequestError | undefined;\n\n    /**\n     * Returns an error if unable to remove a gift certificate.\n     *\n     * @returns The error object if unable to remove, otherwise undefined.\n     */\n    getRemoveGiftCertificateError(): RequestError | undefined;\n\n    /**\n     * Returns an error if unable to load payment instruments.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadInstrumentsError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to delete a payment instrument.\n     *\n     * @param instrumentId - The identifier of the payment instrument to delete.\n     * @returns The error object if unable to delete, otherwise undefined.\n     */\n    getDeleteInstrumentError(instrumentId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to load the checkout configuration of a store.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadConfigError(): Error | undefined;\n}\n\nexport type CheckoutStoreErrorSelectorFactory = (state: InternalCheckoutSelectors) => CheckoutStoreErrorSelector;\n\nexport function createCheckoutStoreErrorSelectorFactory(): CheckoutStoreErrorSelectorFactory {\n    const getError = createShallowEqualSelector(\n        (selector: Omit<CheckoutStoreErrorSelector, 'getError'>) => selector,\n        selector => () => {\n            for (const key of Object.keys(selector) as Array<keyof Omit<CheckoutStoreErrorSelector, 'getError'>>) {\n                const error = selector[key]();\n\n                if (error) {\n                    return error;\n                }\n            }\n        }\n    );\n\n    const getSelectShippingOptionError = createSelector(\n        ({ shippingStrategies }: InternalCheckoutSelectors) => shippingStrategies.getSelectOptionError,\n        ({ consignments }: InternalCheckoutSelectors) => consignments.getUpdateShippingOptionError,\n        (getSelectOptionError, getUpdateShippingOptionError) => (consignmentId?: string) => {\n            return (\n                getSelectOptionError() ||\n                getUpdateShippingOptionError(consignmentId)\n            );\n        }\n    );\n\n    return memoizeOne((\n        state: InternalCheckoutSelectors\n    ): CheckoutStoreErrorSelector => {\n        const selector = {\n            getLoadCheckoutError: state.checkout.getLoadError,\n            getUpdateCheckoutError: state.checkout.getUpdateError,\n            getSubmitOrderError: state.paymentStrategies.getExecuteError,\n            getFinalizeOrderError: state.paymentStrategies.getFinalizeError,\n            getLoadOrderError: state.order.getLoadError,\n            getLoadCartError: state.cart.getLoadError,\n            getLoadBillingCountriesError: state.countries.getLoadError,\n            getLoadShippingCountriesError: state.shippingCountries.getLoadError,\n            getLoadPaymentMethodsError: state.paymentMethods.getLoadError,\n            getLoadPaymentMethodError: state.paymentMethods.getLoadMethodError,\n            getInitializePaymentError: state.paymentStrategies.getInitializeError,\n            getSignInError: state.customerStrategies.getSignInError,\n            getSignOutError: state.customerStrategies.getSignOutError,\n            getInitializeCustomerError: state.customerStrategies.getInitializeError,\n            getLoadShippingOptionsError: state.consignments.getLoadShippingOptionsError,\n            getSelectShippingOptionError: getSelectShippingOptionError(state),\n            getContinueAsGuestError: state.billingAddress.getContinueAsGuestError,\n            getUpdateBillingAddressError: state.billingAddress.getUpdateError,\n            getUpdateShippingAddressError: state.shippingStrategies.getUpdateAddressError,\n            getDeleteConsignmentError: state.consignments.getDeleteError,\n            getUpdateConsignmentError: state.consignments.getUpdateError,\n            getCreateConsignmentsError: state.consignments.getCreateError,\n            getInitializeShippingError: state.shippingStrategies.getInitializeError,\n            getApplyStoreCreditError: state.storeCredit.getApplyError,\n            getApplyCouponError: state.coupons.getApplyError,\n            getRemoveCouponError: state.coupons.getRemoveError,\n            getApplyGiftCertificateError: state.giftCertificates.getApplyError,\n            getRemoveGiftCertificateError: state.giftCertificates.getRemoveError,\n            getLoadInstrumentsError: state.instruments.getLoadError,\n            getDeleteInstrumentError: state.instruments.getDeleteError,\n            getLoadConfigError: state.config.getLoadError,\n        };\n\n        return {\n            getError: getError(selector),\n            ...selector,\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector, createShallowEqualSelector } from '../common/selector';\nimport { Omit } from '../common/types';\n\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for checking the statuses of various asynchronous actions related\n * to checkout.\n *\n * This object has a set of getters that return true if an action is in\n * progress. For example, you can check whether a customer is submitting an\n * order and waiting for the request to complete.\n */\nexport default interface CheckoutStoreStatusSelector {\n    /**\n     * Checks whether any checkout action is pending.\n     *\n     * @returns True if there is a pending action, otherwise false.\n     */\n    isPending(): boolean;\n\n    /**\n     * Checks whether the current checkout is loading.\n     *\n     * @returns True if the current checkout is loading, otherwise false.\n     */\n    isLoadingCheckout(): boolean;\n\n    /**\n     * Checks whether the current checkout is being updated.\n     *\n     * @returns True if the current checkout is being updated, otherwise false.\n     */\n    isUpdatingCheckout(): boolean;\n\n    /**\n     * Checks whether the current order is submitting.\n     *\n     * @returns True if the current order is submitting, otherwise false.\n     */\n    isSubmittingOrder(): boolean;\n\n    /**\n     * Checks whether the current order is finalizing.\n     *\n     * @returns True if the current order is finalizing, otherwise false.\n     */\n    isFinalizingOrder(): boolean;\n\n    /**\n     * Checks whether the current order is loading.\n     *\n     * @returns True if the current order is loading, otherwise false.\n     */\n    isLoadingOrder(): boolean;\n\n    /**\n     * Checks whether the current cart is loading.\n     *\n     * @returns True if the current cart is loading, otherwise false.\n     */\n    isLoadingCart(): boolean;\n\n    /**\n     * Checks whether billing countries are loading.\n     *\n     * @returns True if billing countries are loading, otherwise false.\n     */\n    isLoadingBillingCountries(): boolean;\n\n    /**\n     * Checks whether shipping countries are loading.\n     *\n     * @returns True if shipping countries are loading, otherwise false.\n     */\n    isLoadingShippingCountries(): boolean;\n\n    /**\n     * Checks whether payment methods are loading.\n     *\n     * @returns True if payment methods are loading, otherwise false.\n     */\n    isLoadingPaymentMethods(): boolean;\n\n    /**\n     * Checks whether a specific or any payment method is loading.\n     *\n     * The method returns true if no ID is provided and at least one payment\n     * method is loading.\n     *\n     * @param methodId - The identifier of the payment method to check.\n     * @returns True if the payment method is loading, otherwise false.\n     */\n    isLoadingPaymentMethod(methodId?: string): boolean;\n\n    /**\n     * Checks whether a specific or any payment method is initializing.\n     *\n     * The method returns true if no ID is provided and at least one payment\n     * method is initializing.\n     *\n     * @param methodId - The identifier of the payment method to check.\n     * @returns True if the payment method is initializing, otherwise false.\n     */\n    isInitializingPayment(methodId?: string): boolean;\n\n    /**\n     * Checks whether the current customer is signing in.\n     *\n     * If an ID is provided, the method also checks whether the customer is\n     * signing in using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for signing in the\n     * current customer.\n     * @returns True if the customer is signing in, otherwise false.\n     */\n    isSigningIn(methodId?: string): boolean;\n\n    /**\n     * Checks whether the current customer is signing out.\n     *\n     * If an ID is provided, the method also checks whether the customer is\n     * signing out using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for signing out the\n     * current customer.\n     * @returns True if the customer is signing out, otherwise false.\n     */\n    isSigningOut(methodId?: string): boolean;\n\n    /**\n     * Checks whether the customer step is initializing.\n     *\n     * If an ID is provided, the method also checks whether the customer step is\n     * initializing using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for initializing the\n     * customer step of checkout.\n     * @returns True if the customer step is initializing, otherwise false.\n     */\n    isInitializingCustomer(methodId?: string): boolean;\n\n    /**\n     * Checks whether shipping options are loading.\n     *\n     * @returns True if shipping options are loading, otherwise false.\n     */\n    isLoadingShippingOptions(): boolean;\n\n    /**\n     * Checks whether a shipping option is being selected.\n     *\n     * A consignment ID should be provided when checking if a shipping option\n     * is being selected for a specific consignment, otherwise it will check\n     * for all consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if selecting a shipping option, otherwise false.\n     */\n    isSelectingShippingOption(consignmentId?: string): boolean;\n\n    /**\n     * Checks whether the billing address is being updated.\n     *\n     * @returns True if updating their billing address, otherwise false.\n     */\n    isUpdatingBillingAddress(): boolean;\n\n    /**\n     * Checks whether the shopper is continuing out as a guest.\n     *\n     * @returns True if continuing as guest, otherwise false.\n     */\n    isContinuingAsGuest(): boolean;\n\n    /**\n     * Checks the shipping address is being updated.\n     *\n     * @returns True if updating their shipping address, otherwise false.\n     */\n    isUpdatingShippingAddress(): boolean;\n\n    /**\n     * Checks whether a given/any consignment is being updated.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if updating consignment(s), otherwise false.\n     */\n    isUpdatingConsignment(consignmentId?: string): boolean;\n\n    /**\n     * Checks whether a given/any consignment is being deleted.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if deleting consignment(s), otherwise false.\n     */\n    isDeletingConsignment(consignmentId?: string): boolean;\n\n    /**\n     * Checks whether a given/any consignment is being updated.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @returns True if creating consignments, otherwise false.\n     */\n    isCreatingConsignments(): boolean;\n\n    /**\n     * Checks whether the shipping step of a checkout process is initializing.\n     *\n     * If an identifier is provided, the method also checks whether the shipping\n     * step is initializing using a specific shipping method with the same\n     * identifier.\n     *\n     * @param methodId - The identifer of the initialization method to check.\n     * @returns True if the shipping step is initializing, otherwise false.\n     */\n    isInitializingShipping(methodId?: string): boolean;\n\n    /**\n     * Checks whether the current customer is applying a coupon code.\n     *\n     * @returns True if applying a coupon code, otherwise false.\n     */\n    isApplyingCoupon(): boolean;\n\n    /**\n     * Checks whether the current customer is applying store credit.\n     *\n     * @returns True if applying store credit, otherwise false.\n     */\n    isApplyingStoreCredit(): boolean;\n\n    /**\n     * Checks whether the current customer is removing a coupon code.\n     *\n     * @returns True if removing a coupon code, otherwise false.\n     */\n    isRemovingCoupon(): boolean;\n\n    /**\n     * Checks whether the current customer is applying a gift certificate.\n     *\n     * @returns True if applying a gift certificate, otherwise false.\n     */\n    isApplyingGiftCertificate(): boolean;\n\n    /**\n     * Checks whether the current customer is removing a gift certificate.\n     *\n     * @returns True if removing a gift certificate, otherwise false.\n     */\n    isRemovingGiftCertificate(): boolean;\n\n    /**\n     * Checks whether the current customer's payment instruments are loading.\n     *\n     * @returns True if payment instruments are loading, otherwise false.\n     */\n    isLoadingInstruments(): boolean;\n\n    /**\n     * Checks whether the current customer is deleting a payment instrument.\n     *\n     * @returns True if deleting a payment instrument, otherwise false.\n     */\n    isDeletingInstrument(instrumentId?: string): boolean;\n\n    /**\n     * Checks whether the checkout configuration of a store is loading.\n     *\n     * @returns True if the configuration is loading, otherwise false.\n     */\n    isLoadingConfig(): boolean;\n\n    /**\n     * Checks whether the customer step of a checkout is in a pending state.\n     *\n     * The customer step is considered to be pending if it is in the process of\n     * initializing, signing in, signing out, and/or interacting with a customer\n     * widget.\n     *\n     * @returns True if the customer step is pending, otherwise false.\n     */\n    isCustomerStepPending(): boolean;\n\n    /**\n     * Checks whether the payment step of a checkout is in a pending state.\n     *\n     * The payment step is considered to be pending if it is in the process of\n     * initializing, submitting an order, finalizing an order, and/or\n     * interacting with a payment widget.\n     *\n     * @returns True if the payment step is pending, otherwise false.\n     */\n    isPaymentStepPending(): boolean;\n}\n\nexport type CheckoutStoreStatusSelectorFactory = (state: InternalCheckoutSelectors) => CheckoutStoreStatusSelector;\n\nexport function createCheckoutStoreStatusSelectorFactory(): CheckoutStoreStatusSelectorFactory {\n    const isPending = createShallowEqualSelector(\n        (selector: Omit<CheckoutStoreStatusSelector, 'isPending'>) => selector,\n        selector => () => {\n            return (Object.keys(selector) as Array<keyof Omit<CheckoutStoreStatusSelector, 'isPending'>>)\n                .some(key => selector[key]());\n        }\n    );\n\n    const isSelectingShippingOption = createSelector(\n        ({ shippingStrategies }: InternalCheckoutSelectors) => shippingStrategies.isSelectingOption,\n        ({ consignments }: InternalCheckoutSelectors) => consignments.isUpdatingShippingOption,\n        (isSelectingOption, isUpdatingShippingOption) => (consignmentId?: string) => {\n            return (\n                isSelectingOption() ||\n                isUpdatingShippingOption(consignmentId)\n            );\n        }\n    );\n\n    const isCustomerStepPending = createSelector(\n        ({ customerStrategies }: InternalCheckoutSelectors) => customerStrategies.isInitializing,\n        ({ customerStrategies }: InternalCheckoutSelectors) => customerStrategies.isSigningIn,\n        ({ customerStrategies }: InternalCheckoutSelectors) => customerStrategies.isSigningOut,\n        ({ customerStrategies }: InternalCheckoutSelectors) => customerStrategies.isWidgetInteracting,\n        (isInitializing, isSigningIn, isSigningOut, isWidgetInteracting) => (methodId?: string) => {\n            return (\n                isInitializing(methodId) ||\n                isSigningIn(methodId) ||\n                isSigningOut(methodId) ||\n                isWidgetInteracting(methodId)\n            );\n        }\n    );\n\n    const isPaymentStepPending = createSelector(\n        ({ paymentStrategies }: InternalCheckoutSelectors) => paymentStrategies.isInitializing,\n        ({ paymentStrategies }: InternalCheckoutSelectors) => paymentStrategies.isExecuting,\n        ({ paymentStrategies }: InternalCheckoutSelectors) => paymentStrategies.isFinalizing,\n        ({ paymentStrategies }: InternalCheckoutSelectors) => paymentStrategies.isWidgetInteracting,\n        (isInitializing, isExecuting, isFinalizing, isWidgetInteracting) => (methodId?: string) => {\n            return (\n                isInitializing(methodId) ||\n                isExecuting(methodId) ||\n                isFinalizing(methodId) ||\n                isWidgetInteracting(methodId)\n            );\n        }\n    );\n\n    return memoizeOne((\n        state: InternalCheckoutSelectors\n    ): CheckoutStoreStatusSelector => {\n        const selector = {\n            isLoadingCheckout: state.checkout.isLoading,\n            isUpdatingCheckout: state.checkout.isUpdating,\n            isSubmittingOrder: state.paymentStrategies.isExecuting,\n            isFinalizingOrder: state.paymentStrategies.isFinalizing,\n            isLoadingOrder: state.order.isLoading,\n            isLoadingCart: state.cart.isLoading,\n            isLoadingBillingCountries: state.countries.isLoading,\n            isLoadingShippingCountries: state.shippingCountries.isLoading,\n            isLoadingPaymentMethods: state.paymentMethods.isLoading,\n            isLoadingPaymentMethod: state.paymentMethods.isLoadingMethod,\n            isInitializingPayment: state.paymentStrategies.isInitializing,\n            isSigningIn: state.customerStrategies.isSigningIn,\n            isSigningOut: state.customerStrategies.isSigningOut,\n            isInitializingCustomer: state.customerStrategies.isInitializing,\n            isLoadingShippingOptions: state.consignments.isLoadingShippingOptions,\n            isSelectingShippingOption: isSelectingShippingOption(state),\n            isUpdatingBillingAddress: state.billingAddress.isUpdating,\n            isContinuingAsGuest: state.billingAddress.isContinuingAsGuest,\n            isUpdatingShippingAddress: state.shippingStrategies.isUpdatingAddress,\n            isUpdatingConsignment: state.consignments.isUpdating,\n            isDeletingConsignment: state.consignments.isDeleting,\n            isCreatingConsignments: state.consignments.isCreating,\n            isInitializingShipping: state.shippingStrategies.isInitializing,\n            isApplyingStoreCredit: state.storeCredit.isApplying,\n            isApplyingCoupon: state.coupons.isApplying,\n            isRemovingCoupon: state.coupons.isRemoving,\n            isApplyingGiftCertificate: state.giftCertificates.isApplying,\n            isRemovingGiftCertificate: state.giftCertificates.isRemoving,\n            isLoadingInstruments: state.instruments.isLoading,\n            isDeletingInstrument: state.instruments.isDeleting,\n            isLoadingConfig: state.config.isLoading,\n            isCustomerStepPending: isCustomerStepPending(state),\n            isPaymentStepPending: isPaymentStepPending(state),\n        };\n\n        return {\n            isPending: isPending(selector),\n            ...selector,\n        };\n    });\n}\n","import { toSingleLine } from '../utility';\n\nexport default class ErrorMessageTransformer<TError extends Error = Error> {\n    constructor(\n        private _messageCustomizer: (type: TError) => string\n    ) {}\n\n    transform(error: TError): TError {\n        error.message = toSingleLine(this._messageCustomizer(error));\n\n        return error;\n    }\n}\n","export default function toSingleLine(input?: string) {\n    if (!input) {\n        return '';\n    }\n\n    return input.split(/(?:\\r\\n|\\n|\\r)/)\n        .map(line => line.replace(/^\\s+/gm, ''))\n        .join(' ')\n        .trim();\n}\n","import { Action, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { BillingAddressActionCreator, BillingAddressRequestBody } from '../billing';\nimport { createDataStoreProjection, DataStoreProjection } from '../common/data-store';\nimport { ErrorActionCreator, ErrorMessageTransformer } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\nimport { bindDecorator as bind } from '../common/utility';\nimport { ConfigActionCreator } from '../config';\nimport { CouponActionCreator, GiftCertificateActionCreator } from '../coupon';\nimport { CustomerCredentials, CustomerInitializeOptions, CustomerRequestOptions, CustomerStrategyActionCreator, GuestCredentials } from '../customer';\nimport { CountryActionCreator } from '../geography';\nimport { OrderActionCreator, OrderRequestBody } from '../order';\nimport { SpamProtectionActionCreator, SpamProtectionOptions } from '../order/spam-protection';\nimport { PaymentInitializeOptions, PaymentMethodActionCreator, PaymentRequestOptions, PaymentStrategyActionCreator } from '../payment';\nimport { InstrumentActionCreator } from '../payment/instrument';\nimport { ConsignmentsRequestBody, ConsignmentActionCreator, ShippingCountryActionCreator, ShippingInitializeOptions, ShippingRequestOptions, ShippingStrategyActionCreator } from '../shipping';\nimport { ConsignmentAssignmentRequestBody, ConsignmentUpdateRequestBody } from '../shipping/consignment';\nimport StoreCreditActionCreator from '../store-credit/store-credit-action-creator';\n\nimport { CheckoutRequestBody } from './checkout';\nimport CheckoutActionCreator from './checkout-action-creator';\nimport CheckoutParams from './checkout-params';\nimport CheckoutSelectors from './checkout-selectors';\nimport CheckoutStore from './checkout-store';\nimport { createCheckoutSelectorsFactory, CheckoutSelectorsFactory } from './create-checkout-selectors';\nimport createCheckoutServiceErrorTransformer from './create-checkout-service-error-transformer';\n\n/**\n * Responsible for completing the checkout process for the current customer.\n *\n * This object can be used to collect all information that is required for\n * checkout, such as shipping and billing information. It can also be used to\n * retrieve the current checkout state and subscribe to its changes.\n */\n@bind\nexport default class CheckoutService {\n    private _storeProjection: DataStoreProjection<CheckoutSelectors>;\n    private _errorTransformer: ErrorMessageTransformer;\n    private _selectorsFactory: CheckoutSelectorsFactory;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _configActionCreator: ConfigActionCreator,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _countryActionCreator: CountryActionCreator,\n        private _couponActionCreator: CouponActionCreator,\n        private _customerStrategyActionCreator: CustomerStrategyActionCreator,\n        private _errorActionCreator: ErrorActionCreator,\n        private _giftCertificateActionCreator: GiftCertificateActionCreator,\n        private _instrumentActionCreator: InstrumentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _shippingCountryActionCreator: ShippingCountryActionCreator,\n        private _shippingStrategyActionCreator: ShippingStrategyActionCreator,\n        private _spamProtectionActionCreator: SpamProtectionActionCreator,\n        private _storeCreditActionCreator: StoreCreditActionCreator\n    ) {\n        this._errorTransformer = createCheckoutServiceErrorTransformer();\n        this._selectorsFactory = createCheckoutSelectorsFactory();\n        this._storeProjection = createDataStoreProjection(this._store, this._selectorsFactory);\n    }\n\n    /**\n     * Returns a snapshot of the current checkout state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * checkout state. You can query the state by calling any of its getter\n     * methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.data.getOrder());\n     * console.log(state.errors.getSubmitOrderError());\n     * console.log(state.statuses.isSubmittingOrder());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutSelectors {\n        return this._storeProjection.getState();\n    }\n\n    /**\n     * Notifies all subscribers with the current state.\n     *\n     * When this method gets called, the subscribers get called regardless if\n     * they have any filters applied.\n     */\n    notifyState(): void {\n        this._storeProjection.notifyState();\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the checkout state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.data.getCart());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.data.getCart();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.data.getCart())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutSelectors) => void,\n        ...filters: Array<(state: CheckoutSelectors) => any>\n    ): () => void {\n        return this._storeProjection.subscribe(subscriber, ...filters);\n    }\n\n    /**\n     * Loads the current checkout.\n     *\n     * This method can only be called if there is an active checkout. Also, it\n     * can only retrieve data that belongs to the current customer. When it is\n     * successfully executed, you can retrieve the data by calling\n     * `CheckoutStoreSelector#getCheckout`.\n     *\n     * ```js\n     * const state = await service.loadCheckout('0cfd6c06-57c3-4e29-8d7a-de55cc8a9052');\n     *\n     * console.log(state.data.getCheckout());\n     * ```\n     *\n     * @param id - The identifier of the checkout to load, or the default checkout if not provided.\n     * @param options - Options for loading the current checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    loadCheckout(id?: string, options?: RequestOptions<CheckoutParams>): Promise<CheckoutSelectors> {\n        return this._dispatch(id ?\n            this._checkoutActionCreator.loadCheckout(id, options) :\n            this._checkoutActionCreator.loadDefaultCheckout(options)\n        );\n    }\n\n    /**\n     * Updates specific properties of the current checkout.\n     *\n     * ```js\n     * const state = await service.updateCheckout(checkout);\n     *\n     * console.log(state.data.getCheckout());\n     * ```\n     *\n     * @param payload - The checkout properties to be updated.\n     * @param options - Options for loading the current checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    updateCheckout(payload: CheckoutRequestBody, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._checkoutActionCreator.updateCheckout(payload, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Loads an order by an id.\n     *\n     * The method can only retrieve an order if the order belongs to the current\n     * customer. If it is successfully executed, the data can be retrieved by\n     * calling `CheckoutStoreSelector#getOrder`.\n     *\n     * ```js\n     * const state = await service.loadOrder(123);\n     *\n     * console.log(state.data.getOrder());\n     * ```\n     *\n     * @param orderId - The identifier of the order to load.\n     * @param options - Options for loading the order.\n     * @returns A promise that resolves to the current state.\n     */\n    loadOrder(orderId: number, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const loadCheckoutAction = this._orderActionCreator.loadOrder(orderId, options);\n        const loadConfigAction = this._configActionCreator.loadConfig(options);\n\n        return Promise.all([\n            this._dispatch(loadCheckoutAction),\n            this._dispatch(loadConfigAction, { queueId: 'config' }),\n        ])\n            .then(() => this.getState());\n    }\n\n    /**\n     * Submits an order, thereby completing a checkout process.\n     *\n     * Before you can submit an order, you must initialize the payment method\n     * chosen by the customer by calling `CheckoutService#initializePayment`.\n     *\n     * ```js\n     * await service.initializePayment({ methodId: 'braintree' });\n     * await service.submitOrder({\n     *     payment: {\n     *         methodId: 'braintree',\n     *         paymentData: {\n     *             ccExpiry: { month: 10, year: 20 },\n     *             ccName: 'BigCommerce',\n     *             ccNumber: '4111111111111111',\n     *             ccCvv: 123,\n     *         },\n     *     },\n     * });\n     * ```\n     *\n     * You are not required to include `paymentData` if the order does not\n     * require additional payment details. For example, the customer has already\n     * entered their payment details on the cart page using one of the hosted\n     * payment methods, such as PayPal. Or the customer has applied a gift\n     * certificate that exceeds the grand total amount.\n     *\n     * If the order is submitted successfully, you can retrieve the newly\n     * created order by calling `CheckoutStoreSelector#getOrder`.\n     *\n     * ```js\n     * const state = await service.submitOrder(payload);\n     *\n     * console.log(state.data.getOrder());\n     * ```\n     *\n     * @param payload - The request payload to submit for the current order.\n     * @param options - Options for submitting the current order.\n     * @returns A promise that resolves to the current state.\n     */\n    submitOrder(payload: OrderRequestBody, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.execute(payload, options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Finalizes the submission process for an order.\n     *\n     * This method is only required for certain hosted payment methods that\n     * require a customer to enter their credit card details on their website.\n     * You need to call this method once the customer has redirected back to\n     * checkout in order to complete the checkout process.\n     *\n     * If the method is called before order finalization is required or for a\n     * payment method that does not require order finalization, an error will be\n     * thrown. Conversely, if the method is called successfully, you should\n     * immediately redirect the customer to the order confirmation page.\n     *\n     * ```js\n     * try {\n     *     await service.finalizeOrderIfNeeded();\n     *\n     *     window.location.assign('/order-confirmation');\n     * } catch (error) {\n     *     if (error.type !== 'order_finalization_not_required') {\n     *         throw error;\n     *     }\n     * }\n     * ```\n     *\n     * @param options - Options for finalizing the current order.\n     * @returns A promise that resolves to the current state.\n     * @throws `OrderFinalizationNotRequiredError` error if order finalization\n     * is not required for the current order at the time of execution.\n     */\n    finalizeOrderIfNeeded(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.finalize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Loads a list of payment methods available for checkout.\n     *\n     * If a customer enters their payment details before navigating to the\n     * checkout page (i.e.: using PayPal checkout button on the cart page), only\n     * one payment method will be available for the customer - the selected\n     * payment method. Otherwise, by default, all payment methods configured by\n     * the merchant will be available for the customer.\n     *\n     * Once the method is executed successfully, you can call\n     * `CheckoutStoreSelector#getPaymentMethods` to retrieve the list of payment\n     * methods.\n     *\n     * ```js\n     * const state = service.loadPaymentMethods();\n     *\n     * console.log(state.data.getPaymentMethods());\n     * ```\n     *\n     * @param options - Options for loading the payment methods that are\n     * available to the current customer.\n     * @returns A promise that resolves to the current state.\n     */\n    loadPaymentMethods(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentMethodActionCreator.loadPaymentMethods(options);\n\n        return this._dispatch(action, { queueId: 'paymentMethods' });\n    }\n\n    /**\n     * Loads a payment method by an id.\n     *\n     * This method does not work with multi-option payment providers. Due to its\n     * limitation, it is deprecated and will be removed in the future.\n     *\n     * @deprecated\n     * @internal\n     * @param methodId - The identifier for the payment method to load.\n     * @param options - Options for loading the payment method.\n     * @returns A promise that resolves to the current state.\n     */\n    loadPaymentMethod(methodId: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentMethodActionCreator.loadPaymentMethod(methodId, options);\n\n        return this._dispatch(action, { queueId: 'paymentMethods' });\n    }\n\n    /**\n     * Initializes the payment step of a checkout process.\n     *\n     * Before a payment method can accept payment details, it must first be\n     * initialized. Some payment methods require you to provide additional\n     * initialization options. For example, Amazon requires a container ID in\n     * order to initialize their payment widget.\n     *\n     * ```js\n     * await service.initializePayment({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'walletWidget',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the payment step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializePayment(options: PaymentInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * De-initializes the payment step of a checkout process.\n     *\n     * The method should be called once you no longer require a payment method\n     * to be initialized. It can perform any necessary clean-up behind the\n     * scene, i.e.: remove DOM nodes or event handlers that are attached as a\n     * result of payment initialization.\n     *\n     * ```js\n     * await service.deinitializePayment({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the payment step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Loads a list of countries available for billing.\n     *\n     * Once you make a successful request, you will be able to retrieve the list\n     * of countries by calling `CheckoutStoreSelector#getBillingCountries`.\n     *\n     * ```js\n     * const state = await service.loadBillingCountries();\n     *\n     * console.log(state.data.getBillingCountries());\n     * ```\n     *\n     * @param options - Options for loading the available billing countries.\n     * @returns A promise that resolves to the current state.\n     */\n    loadBillingCountries(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._countryActionCreator.loadCountries(options);\n\n        return this._dispatch(action, { queueId: 'billingCountries' });\n    }\n\n    /**\n     * Loads a list of countries available for shipping.\n     *\n     * The list is determined based on the shipping zones configured by a\n     * merchant. Once you make a successful call, you will be able to retrieve\n     * the list of available shipping countries by calling\n     * `CheckoutStoreSelector#getShippingCountries`.\n     *\n     * ```js\n     * const state = await service.loadShippingCountries();\n     *\n     * console.log(state.data.getShippingCountries());\n     * ```\n     *\n     * @param options - Options for loading the available shipping countries.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingCountries(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingCountryActionCreator.loadCountries(options);\n\n        return this._dispatch(action, { queueId: 'shippingCountries' });\n    }\n\n    /**\n     * Loads a set of form fields that should be presented to customers in order\n     * to capture their billing address.\n     *\n     * Once the method has been executed successfully, you can call\n     * `CheckoutStoreSelector#getBillingAddressFields` to retrieve the set of\n     * form fields.\n     *\n     * ```js\n     * const state = service.loadBillingAddressFields();\n     *\n     * console.log(state.data.getBillingAddressFields('US'));\n     * ```\n     *\n     * @param options - Options for loading the billing address form fields.\n     * @returns A promise that resolves to the current state.\n     */\n    loadBillingAddressFields(options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this.loadBillingCountries(options);\n    }\n\n    /**\n     * Loads a set of form fields that should be presented to customers in order\n     * to capture their shipping address.\n     *\n     * Once the method has been executed successfully, you can call\n     * `CheckoutStoreSelector#getShippingAddressFields` to retrieve the set of\n     * form fields.\n     *\n     * ```js\n     * const state = service.loadShippingAddressFields();\n     *\n     * console.log(state.data.getShippingAddressFields('US'));\n     * ```\n     *\n     * @param options - Options for loading the shipping address form fields.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingAddressFields(options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this.loadShippingCountries(options);\n    }\n\n    /**\n     * Initializes the sign-in step of a checkout process.\n     *\n     * Some payment methods, such as Amazon, have their own sign-in flow. In\n     * order to support them, this method must be called.\n     *\n     * ```js\n     * await service.initializeCustomer({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'signInButton',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the customer step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeCustomer(options?: CustomerInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * De-initializes the sign-in step of a checkout process.\n     *\n     * It should be called once you no longer want to prompt customers to sign\n     * in. It can perform any necessary clean-up behind the scene, i.e.: remove\n     * DOM nodes or event handlers that are attached as a result of customer\n     * initialization.\n     *\n     * ```js\n     * await service.deinitializeCustomer({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the customer step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeCustomer(options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Continues to check out as a guest.\n     *\n     * The customer is required to provide their email address in order to\n     * continue. Once they provide their email address, it will be stored as a\n     * part of their billing address.\n     *\n     * @param credentials - The guest credentials to use.\n     * @param options - Options for continuing as a guest.\n     * @returns A promise that resolves to the current state.\n     */\n    continueAsGuest(credentials: GuestCredentials, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._billingAddressActionCreator.continueAsGuest(credentials, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Signs into a customer's registered account.\n     *\n     * Once the customer is signed in successfully, the checkout state will be\n     * populated with information associated with the customer, such as their\n     * saved addresses. You can call `CheckoutStoreSelector#getCustomer` to\n     * retrieve the data.\n     *\n     * ```js\n     * const state = await service.signInCustomer({\n     *     email: 'foo@bar.com',\n     *     password: 'password123',\n     * });\n     *\n     * console.log(state.data.getCustomer());\n     * ```\n     *\n     * @param credentials - The credentials to be used for signing in the customer.\n     * @param options - Options for signing in the customer.\n     * @returns A promise that resolves to the current state.\n     */\n    signInCustomer(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.signIn(credentials, options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Signs out the current customer if they are previously signed in.\n     *\n     * Once the customer is successfully signed out, the checkout state will be\n     * reset automatically.\n     *\n     * ```js\n     * const state = await service.signOutCustomer();\n     *\n     * // The returned object should not contain information about the previously signed-in customer.\n     * console.log(state.data.getCustomer());\n     * ```\n     *\n     * @param options - Options for signing out the customer.\n     * @returns A promise that resolves to the current state.\n     */\n    signOutCustomer(options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.signOut(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Loads a list of shipping options available for checkout.\n     *\n     * Available shipping options can only be determined once a customer\n     * provides their shipping address. If the method is executed successfully,\n     * `CheckoutStoreSelector#getShippingOptions` can be called to retrieve the\n     * list of shipping options.\n     *\n     * ```js\n     * const state = await service.loadShippingOptions();\n     *\n     * console.log(state.data.getShippingOptions());\n     * ```\n     *\n     * @param options - Options for loading the available shipping options.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingOptions(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.loadShippingOptions(options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Initializes the shipping step of a checkout process.\n     *\n     * Some payment methods, such as Amazon, can provide shipping information to\n     * be used for checkout. In order to support them, this method must be\n     * called.\n     *\n     * ```js\n     * await service.initializeShipping({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'addressBook',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the shipping step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeShipping(options?: ShippingInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * De-initializes the shipping step of a checkout process.\n     *\n     * It should be called once you no longer need to collect shipping details.\n     * It can perform any necessary clean-up behind the scene, i.e.: remove DOM\n     * nodes or event handlers that are attached as a result of shipping\n     * initialization.\n     *\n     * ```js\n     * await service.deinitializeShipping({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the shipping step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeShipping(options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Selects a shipping option for the current address.\n     *\n     * If a shipping option has an additional cost, the quote for the current\n     * order will be adjusted once the option is selected.\n     *\n     * ```js\n     * const state = await service.selectShippingOption('address-id', 'shipping-option-id');\n     *\n     * console.log(state.data.getSelectedShippingOption());\n     * ```\n     *\n     * @param shippingOptionId - The identifier of the shipping option to\n     * select.\n     * @param options - Options for selecting the shipping option.\n     * @returns A promise that resolves to the current state.\n     */\n    selectShippingOption(shippingOptionId: string, options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.selectOption(shippingOptionId, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates the shipping address for the current checkout.\n     *\n     * When a customer updates their shipping address for an order, they will\n     * see an updated list of shipping options and the cost for each option,\n     * unless no options are available. If the update is successful, you can\n     * call `CheckoutStoreSelector#getShippingAddress` to retrieve the address.\n     *\n     * If the shipping address changes and the selected shipping option becomes\n     * unavailable for the updated address, the shipping option will be\n     * deselected.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateShippingAddress(address);\n     *\n     * console.log(state.data.getShippingAddress());\n     * ```\n     *\n     * @param address - The address to be used for shipping.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateShippingAddress(address: Partial<AddressRequestBody>, options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.updateAddress(address, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Creates consignments given a list.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#updateShippingAddress`.\n     *\n     * When consignments are created, an updated list of shipping options will\n     * become available for each consignment, unless no options are available.\n     * If the update is successful, you can call\n     * `CheckoutStoreSelector#getConsignments` to retrieve the updated list of\n     * consignments.'\n     *\n     * Beware that if a consignment includes all line items from another\n     * consignment, that consignment will be deleted as a valid consignment must\n     * include at least one valid line item.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.createConsignments(consignments);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignments - The list of consignments to be created.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.createConsignments(consignments, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Deletes a consignment\n     *\n     * ```js\n     * const state = await service.deleteConsignment('55c96cda6f04c');\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignmentId - The ID of the consignment to be deleted\n     * @param options - Options for the consignment delete request\n     * @returns A promise that resolves to the current state.\n     */\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.deleteConsignment(consignmentId, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates a specific consignment.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#selectShippingOption`.\n     *\n     * When a shipping address for a consignment is updated, an updated list of\n     * shipping options will become available for the consignment, unless no\n     * options are available. If the update is successful, you can call\n     * `CheckoutStoreSelector#getConsignments` to retrieve updated list of\n     * consignments.\n     *\n     * Beware that if the updated consignment includes all line items from another\n     * consignment, that consignment will be deleted as a valid consignment must\n     * include at least one valid line item.\n     *\n     * If the shipping address changes and the selected shipping option becomes\n     * unavailable for the updated address, the shipping option will be\n     * deselected.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateConsignment(consignment);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.updateConsignment(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Convenience method that assigns items to be shipped to a specific address.\n     *\n     * Note: this method finds an existing consignment that matches the provided address\n     * and assigns the provided items. If no consignment matches the address, a new one\n     * will be created.\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for the request\n     * @returns A promise that resolves to the current state.\n     */\n    assignItemsToAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.assignItemsByAddress(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Convenience method that unassigns items from a specific shipping address.\n     *\n     * Note: this method finds an existing consignment that matches the provided address\n     * and unassigns the specified items. If the consignment ends up with no line items\n     * after the unassignment, it will be deleted.\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for the request\n     * @returns A promise that resolves to the current state.\n     */\n    unassignItemsToAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.unassignItemsByAddress(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Selects a shipping option for a given consignment.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#updateShippingAddres`.\n     *\n     * If a shipping option has an additional cost, the quote for the current\n     * order will be adjusted once the option is selected.\n     *\n     * ```js\n     * const state = await service.selectConsignmentShippingOption(consignmentId, optionId);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignmentId - The identified of the consignment to be updated.\n     * @param shippingOptionId - The identifier of the shipping option to\n     * select.\n     * @param options - Options for selecting the shipping option.\n     * @returns A promise that resolves to the current state.\n     */\n    selectConsignmentShippingOption(\n        consignmentId: string,\n        shippingOptionId: string,\n        options?: ShippingRequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.updateShippingOption({\n            id: consignmentId,\n            shippingOptionId,\n        }, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates the billing address for the current checkout.\n     *\n     * A customer must provide their billing address before they can proceed to\n     * pay for their order.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateBillingAddress(address);\n     *\n     * console.log(state.data.getBillingAddress());\n     * ```\n     *\n     * @param address - The address to be used for billing.\n     * @param options - Options for updating the billing address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateBillingAddress(address: Partial<BillingAddressRequestBody>, options: RequestOptions = {}): Promise<CheckoutSelectors> {\n        const action = this._billingAddressActionCreator.updateAddress(address, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies or removes customer's store credit code to the current checkout.\n     *\n     * Once the store credit gets applied, the outstanding balance will be adjusted accordingly.\n     *\n     * ```js\n     * const state = await service.applyStoreCredit(true);\n     *\n     * console.log(state.data.getCheckout().outstandingBalance);\n     * ```\n     *\n     * @param options - Options for applying store credit.\n     * @returns A promise that resolves to the current state.\n     */\n    applyStoreCredit(useStoreCredit: boolean, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._storeCreditActionCreator.applyStoreCredit(useStoreCredit, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies a coupon code to the current checkout.\n     *\n     * Once the coupon code gets applied, the quote for the current checkout will\n     * be adjusted accordingly. The same coupon code cannot be applied more than\n     * once.\n     *\n     * ```js\n     * await service.applyCoupon('COUPON');\n     * ```\n     *\n     * @param code - The coupon code to apply to the current checkout.\n     * @param options - Options for applying the coupon code.\n     * @returns A promise that resolves to the current state.\n     */\n    applyCoupon(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._couponActionCreator.applyCoupon(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Removes a coupon code from the current checkout.\n     *\n     * Once the coupon code gets removed, the quote for the current checkout will\n     * be adjusted accordingly.\n     *\n     * ```js\n     * await service.removeCoupon('COUPON');\n     * ```\n     *\n     * @param code - The coupon code to remove from the current checkout.\n     * @param options - Options for removing the coupon code.\n     * @returns A promise that resolves to the current state.\n     */\n    removeCoupon(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._couponActionCreator.removeCoupon(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies a gift certificate to the current checkout.\n     *\n     * Once the gift certificate gets applied, the quote for the current\n     * checkout will be adjusted accordingly.\n     *\n     * ```js\n     * await service.applyGiftCertificate('GIFT_CERTIFICATE');\n     * ```\n     *\n     * @param code - The gift certificate to apply to the current checkout.\n     * @param options - Options for applying the gift certificate.\n     * @returns A promise that resolves to the current state.\n     */\n    applyGiftCertificate(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._giftCertificateActionCreator.applyGiftCertificate(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Removes a gift certificate from an order.\n     *\n     * Once the gift certificate gets removed, the quote for the current\n     * checkout will be adjusted accordingly.\n     *\n     * ```js\n     * await service.removeGiftCertificate('GIFT_CERTIFICATE');\n     * ```\n     *\n     * @param code - The gift certificate to remove from the current checkout.\n     * @param options - Options for removing the gift certificate.\n     * @returns A promise that resolves to the current state.\n     */\n    removeGiftCertificate(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._giftCertificateActionCreator.removeGiftCertificate(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Loads a list of payment instruments associated with a customer.\n     *\n     * Once the method has been called successfully, you can retrieve the list\n     * of payment instruments by calling `CheckoutStoreSelector#getInstruments`.\n     * If the customer does not have any payment instruments on record, i.e.:\n     * credit card, you will get an empty list instead.\n     *\n     * ```js\n     * const state = service.loadInstruments();\n     *\n     * console.log(state.data.getInstruments());\n     * ```\n     *\n     * @returns A promise that resolves to the current state.\n     */\n    loadInstruments(): Promise<CheckoutSelectors> {\n        const action = this._instrumentActionCreator.loadInstruments();\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Deletes a payment instrument by an id.\n     *\n     * Once an instrument gets removed, it can no longer be retrieved using\n     * `CheckoutStoreSelector#getInstruments`.\n     *\n     * ```js\n     * const state = service.deleteInstrument('123');\n     *\n     * console.log(state.data.getInstruments());\n     * ```\n     *\n     * @param instrumentId - The identifier of the payment instrument to delete.\n     * @returns A promise that resolves to the current state.\n     */\n    deleteInstrument(instrumentId: string): Promise<CheckoutSelectors> {\n        const action = this._instrumentActionCreator.deleteInstrument(instrumentId);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Clear errors that have been collected from previous calls.\n     *\n     * ```js\n     * const state = await service.clearError(error);\n     *\n     * console.log(state.errors.getError());\n     * ```\n     *\n     * @param error - Specific error object to clear\n     * @returns A promise that resolves to the current state.\n     */\n    clearError(error: Error): Promise<CheckoutSelectors> {\n        const action = this._errorActionCreator.clearError(error);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Initializes the spam protection for order creation.\n     *\n     * With spam protection enabled, the customer has to be verified as\n     * a human. The order creation will fail if spam protection\n     * is enabled but verification fails.\n     *\n     * ```js\n     * await service.initializeSpamProtection({\n     *     containerId: 'spamProtectionContainer',\n     * });\n     * ```\n     *\n     * @param options - Options for initializing spam protection.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeSpamProtection(options: SpamProtectionOptions): Promise<CheckoutSelectors> {\n        const action = this._spamProtectionActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'spamProtection' });\n    }\n\n    /**\n     * Dispatches an action through the data store and returns the current state\n     * once the action is dispatched.\n     *\n     * @param action - The action to dispatch.\n     * @returns A promise that resolves to the current state.\n     */\n    private _dispatch(action: Action | Observable<Action> | ThunkAction<Action>, options?: { queueId?: string }): Promise<CheckoutSelectors> {\n        return this._store.dispatch(action, options)\n            .then(() => this.getState())\n            .catch(error => {\n                throw this._errorTransformer.transform(error);\n            });\n    }\n}\n","import { ErrorMessageTransformer } from '../common/error';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../common/error/errors';\nimport { getEnvironment } from '../common/utility';\n\nexport type CheckoutServiceErrorType = MissingDataError | NotInitializedError;\nexport type CheckoutServiceErrorTransformer = ErrorMessageTransformer<CheckoutServiceErrorType | Error>;\n\nexport default function createCheckoutServiceErrorTransformer(\n    isDevelopment: boolean = getEnvironment() === 'development'\n): CheckoutServiceErrorTransformer {\n    return new ErrorMessageTransformer(error => {\n        if (!isDevelopment || !isCheckoutServiceError(error)) {\n            return error.message;\n        }\n\n        switch (error.subtype || error.type) {\n        case MissingDataErrorType.MissingConsignments:\n            return `\n                ${error.message}\n                The data could be unavailable because no shipping address has been provided.\n                To fix this, create a consignment or update the shipping address before performing\n                the same action again.\n            `;\n\n        case MissingDataErrorType.MissingCart:\n        case MissingDataErrorType.MissingCheckout:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you can try calling \\`CheckoutService#loadCheckout\\`\n                before performing the same action again.\n            `;\n\n        case MissingDataErrorType.MissingCheckoutConfig:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you need to make sure \\`CheckoutService\\` is initialized\n                properly by calling \\`CheckoutService#loadCheckout\\` before performing any\n                other actions.\n            `;\n\n        case MissingDataErrorType.MissingOrder:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you can try calling \\`CheckoutService#loadOrder\\`\n                before performing the same action again.\n            `;\n\n        case MissingDataErrorType.MissingOrderId:\n            return `\n                ${error.message}\n                The data could be unavailable because no order has been created yet. You have\n                to first create the order before you can perform the action.\n            `;\n\n        case MissingDataErrorType.MissingPaymentMethod:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server, or\n                configured by the merchant yet. To fix the former issue, you can try calling\n                \\`CheckoutService#loadPaymentMethods\\` before performing the same action again.\n            `;\n\n        case NotInitializedErrorType.CustomerNotInitialized:\n            return `\n                In order to initialize the customer step of checkout, you need to call\n                \\`CheckoutService#initializeCustomer\\`. Afterwards, you should be able to\n                submit customer details.\n            `;\n\n        case NotInitializedErrorType.PaymentNotInitialized:\n            return `\n                ${error.message}\n                In order to initialize the payment step of checkout, you need to call\n                \\`CheckoutService#initializePayment\\`. Afterwards, you should be able to\n                submit payment details.\n            `;\n\n        case NotInitializedErrorType.ShippingNotInitialized:\n            return `\n                ${error.message}\n                In order to initialize the shipping step of checkout, you need to call\n                \\`CheckoutService#initializeShipping\\`. Afterwards, you should be able to\n                submit shipping details.\n            `;\n\n        default:\n            return error.message;\n        }\n    });\n}\n\nfunction isCheckoutServiceError(error: any): error is CheckoutServiceErrorType {\n    return !!(error.subtype || error.type);\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { createScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { ErrorActionCreator } from '../common/error';\nimport { getDefaultLogger } from '../common/log';\nimport { getEnvironment } from '../common/utility';\nimport { ConfigActionCreator, ConfigRequestSender, ConfigState } from '../config';\nimport { CouponActionCreator, CouponRequestSender, GiftCertificateActionCreator, GiftCertificateRequestSender } from '../coupon';\nimport { createCustomerStrategyRegistry, CustomerStrategyActionCreator } from '../customer';\nimport { CountryActionCreator, CountryRequestSender } from '../geography';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport { createSpamProtection, SpamProtectionActionCreator } from '../order/spam-protection';\nimport { createPaymentClient, createPaymentStrategyRegistry, PaymentMethodActionCreator, PaymentMethodRequestSender, PaymentStrategyActionCreator } from '../payment';\nimport { InstrumentActionCreator, InstrumentRequestSender } from '../payment/instrument';\nimport { createShippingStrategyRegistry, ConsignmentActionCreator, ConsignmentRequestSender, ShippingCountryActionCreator, ShippingCountryRequestSender, ShippingStrategyActionCreator } from '../shipping';\nimport { StoreCreditActionCreator, StoreCreditRequestSender } from '../store-credit';\n\nimport CheckoutActionCreator from './checkout-action-creator';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport CheckoutService from './checkout-service';\nimport CheckoutValidator from './checkout-validator';\nimport createCheckoutStore from './create-checkout-store';\n\n/**\n * Creates an instance of `CheckoutService`.\n *\n * @remarks\n * ```js\n * const service = createCheckoutService();\n *\n * service.subscribe(state => {\n *     console.log(state);\n * });\n *\n * service.loadCheckout();\n * ```\n *\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutService`.\n */\nexport default function createCheckoutService(options?: CheckoutServiceOptions): CheckoutService {\n    if (document.location.protocol !== 'https:') {\n        getDefaultLogger().warn('The BigCommerce Checkout SDK should not be used on a non-HTTPS page');\n    }\n\n    if (getEnvironment() !== 'production') {\n        getDefaultLogger().warn('Note that the development build is not optimized. To create a production build, set process.env.NODE_ENV to `production`.');\n    }\n\n    const config: ConfigState = {\n        meta: {\n            externalSource: options && options.externalSource,\n        },\n        errors: {},\n        statuses: {},\n    };\n    const { locale = '', shouldWarnMutation = true } = options || {};\n    const requestSender = createRequestSender({ host: options && options.host });\n    const store = createCheckoutStore({ config }, { shouldWarnMutation });\n    const paymentClient = createPaymentClient(store);\n    const orderRequestSender = new OrderRequestSender(requestSender);\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const configActionCreator = new ConfigActionCreator(new ConfigRequestSender(requestSender));\n    const spamProtection = createSpamProtection(createScriptLoader());\n    const spamProtectionActionCreator = new SpamProtectionActionCreator(spamProtection);\n    const orderActionCreator = new OrderActionCreator(\n        orderRequestSender,\n        new CheckoutValidator(checkoutRequestSender),\n        spamProtectionActionCreator\n    );\n\n    return new CheckoutService(\n        store,\n        new BillingAddressActionCreator(new BillingAddressRequestSender(requestSender)),\n        new CheckoutActionCreator(checkoutRequestSender, configActionCreator),\n        configActionCreator,\n        new ConsignmentActionCreator(new ConsignmentRequestSender(requestSender), checkoutRequestSender),\n        new CountryActionCreator(new CountryRequestSender(requestSender, { locale })),\n        new CouponActionCreator(new CouponRequestSender(requestSender)),\n        new CustomerStrategyActionCreator(createCustomerStrategyRegistry(store, requestSender)),\n        new ErrorActionCreator(),\n        new GiftCertificateActionCreator(new GiftCertificateRequestSender(requestSender)),\n        new InstrumentActionCreator(new InstrumentRequestSender(paymentClient, requestSender)),\n        orderActionCreator,\n        new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n        new PaymentStrategyActionCreator(\n            createPaymentStrategyRegistry(store, paymentClient, requestSender, spamProtection, locale),\n            orderActionCreator\n        ),\n        new ShippingCountryActionCreator(new ShippingCountryRequestSender(requestSender, { locale })),\n        new ShippingStrategyActionCreator(createShippingStrategyRegistry(store, requestSender)),\n        spamProtectionActionCreator,\n        new StoreCreditActionCreator(new StoreCreditRequestSender(requestSender))\n    );\n}\n\nexport interface CheckoutServiceOptions {\n    locale?: string;\n    host?: string;\n    shouldWarnMutation?: boolean;\n    externalSource?: string;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { MutationObserverFactory } from '../../common/dom/mutation-observer';\n\nimport GoogleRecaptcha from './google-recaptcha';\nimport GoogleRecaptchaScriptLoader from './google-recaptcha-script-loader';\n\nexport default function createSpamProtection(scriptLoader: ScriptLoader) {\n    return new GoogleRecaptcha(\n        new GoogleRecaptchaScriptLoader(scriptLoader),\n        new MutationObserverFactory()\n    );\n}\n","// tslint:disable-next-line:no-reference\n/// <reference path=\"../payment/bigpay-client.d.ts\" />\nimport { createClient as createBigpayClient } from '@bigcommerce/bigpay-client';\n\nimport { CheckoutStore } from '../checkout';\n\nexport default function createPaymentClient(store: CheckoutStore) {\n    const paymentClient = createBigpayClient();\n\n    store.subscribe(\n        state => {\n            const config = state.config.getStoreConfig();\n\n            if (config) {\n                paymentClient.setHost(config.paymentSettings.bigpayBaseUrl);\n            }\n        },\n        state => state.config.getStoreConfig()\n    );\n\n    return paymentClient;\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\nimport { AmazonPayScriptLoader } from '../payment/strategies/amazon-pay';\nimport {\n    createBraintreeVisaCheckoutPaymentProcessor,\n    BraintreeScriptLoader,\n    BraintreeSDKCreator,\n    VisaCheckoutScriptLoader\n} from '../payment/strategies/braintree';\nimport { ChasePayScriptLoader } from '../payment/strategies/chasepay';\nimport { createGooglePayPaymentProcessor, GooglePayBraintreeInitializer, GooglePayStripeInitializer } from '../payment/strategies/googlepay';\nimport { MasterpassScriptLoader } from '../payment/strategies/masterpass';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport CustomerActionCreator from './customer-action-creator';\nimport CustomerRequestSender from './customer-request-sender';\nimport CustomerStrategyActionCreator from './customer-strategy-action-creator';\nimport { CustomerStrategy } from './strategies';\nimport { AmazonPayCustomerStrategy } from './strategies/amazon';\nimport { BraintreeVisaCheckoutCustomerStrategy } from './strategies/braintree';\nimport { ChasePayCustomerStrategy } from './strategies/chasepay';\nimport { DefaultCustomerStrategy } from './strategies/default';\nimport { GooglePayCustomerStrategy } from './strategies/googlepay';\nimport { MasterpassCustomerStrategy } from './strategies/masterpass';\nimport { SquareCustomerStrategy } from './strategies/square';\n\nexport default function createCustomerStrategyRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender\n): Registry<CustomerStrategy> {\n    const registry = new Registry<CustomerStrategy>();\n    const scriptLoader = getScriptLoader();\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const checkoutActionCreator = new CheckoutActionCreator(\n        checkoutRequestSender,\n        new ConfigActionCreator(new ConfigRequestSender(requestSender))\n    );\n    const formPoster = createFormPoster();\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender));\n    const remoteCheckoutRequestSender = new RemoteCheckoutRequestSender(requestSender);\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(remoteCheckoutRequestSender);\n\n    registry.register('amazon', () =>\n        new AmazonPayCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            remoteCheckoutRequestSender,\n            new AmazonPayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('braintreevisacheckout', () =>\n        new BraintreeVisaCheckoutCustomerStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            new CustomerStrategyActionCreator(registry),\n            remoteCheckoutActionCreator,\n            createBraintreeVisaCheckoutPaymentProcessor(scriptLoader, requestSender),\n            new VisaCheckoutScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('chasepay', () =>\n        new ChasePayCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new ChasePayScriptLoader(scriptLoader),\n            requestSender,\n            formPoster\n        )\n    );\n\n    registry.register('squarev2', () =>\n        new SquareCustomerStrategy(\n            store,\n            new RemoteCheckoutActionCreator(remoteCheckoutRequestSender)\n        )\n    );\n\n    registry.register('masterpass', () =>\n        new MasterpassCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('googlepaybraintree', () =>\n        new GooglePayCustomerStrategy(\n            store,\n            remoteCheckoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            ),\n            formPoster\n        )\n    );\n\n    registry.register('googlepaystripe', () =>\n        new GooglePayCustomerStrategy(\n            store,\n            remoteCheckoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            ),\n            formPoster\n    )\n);\n\n    registry.register('default', () =>\n        new DefaultCustomerStrategy(\n            store,\n            new CustomerActionCreator(\n                new CustomerRequestSender(requestSender),\n                checkoutActionCreator\n            )\n        )\n    );\n\n    return registry;\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\nimport { AmazonPayScriptLoader } from '../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport ConsignmentActionCreator from './consignment-action-creator';\nimport ConsignmentRequestSender from './consignment-request-sender';\nimport { ShippingStrategy } from './strategies';\nimport { AmazonPayShippingStrategy } from './strategies/amazon';\nimport { DefaultShippingStrategy } from './strategies/default';\n\nexport default function createShippingStrategyRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender\n): Registry<ShippingStrategy> {\n    const registry = new Registry<ShippingStrategy>();\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const consignmentRequestSender = new ConsignmentRequestSender(requestSender);\n    const consignmentActionCreator = new ConsignmentActionCreator(consignmentRequestSender, checkoutRequestSender);\n\n    registry.register('amazon', () =>\n        new AmazonPayShippingStrategy(\n            store,\n            consignmentActionCreator,\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n            new RemoteCheckoutActionCreator(new RemoteCheckoutRequestSender(requestSender)),\n            new AmazonPayScriptLoader(getScriptLoader())\n        )\n    );\n\n    registry.register('default', () =>\n        new DefaultShippingStrategy(\n            store,\n            consignmentActionCreator\n        )\n    );\n\n    return registry;\n}\n","import { EmbeddedCheckoutFrameLoadedEvent } from '../embedded-checkout-events';\n\nexport default function handleFrameLoadedEvent(message: EmbeddedCheckoutFrameLoadedEvent): void {\n    if (!message.payload || !message.payload.contentId) {\n        return;\n    }\n\n    const body = document.getElementById(message.payload.contentId);\n\n    if (!body || body.hasAttribute('data-iframe-height')) {\n        return;\n    }\n\n    body.setAttribute('data-iframe-height', '');\n}\n","export default interface CustomError extends Error {\n    message: string;\n    type: string;\n    subtype?: string;\n}\n\nexport function isCustomError(error: any): error is CustomError {\n    return (\n        typeof error.message === 'string' &&\n        typeof error.type === 'string' &&\n        (typeof error.subtype === 'string' || !error.subtype) &&\n        error instanceof Error\n    );\n}\n","import { isCustomError, CustomError } from '../../common/error/errors';\nimport { bindDecorator as bind } from '../../common/utility';\nimport EmbeddedCheckoutError from '../embedded-checkout-error';\nimport {\n    EmbeddedCheckoutCompleteEvent,\n    EmbeddedCheckoutErrorEvent,\n    EmbeddedCheckoutEvent,\n    EmbeddedCheckoutEventMap,\n    EmbeddedCheckoutEventType,\n    EmbeddedCheckoutFrameErrorEvent,\n    EmbeddedCheckoutFrameLoadedEvent,\n    EmbeddedCheckoutLoadedEvent,\n    EmbeddedCheckoutSignedOutEvent,\n} from '../embedded-checkout-events';\nimport EmbeddedCheckoutStyles from '../embedded-checkout-styles';\nimport IframeEventListener from '../iframe-event-listener';\nimport IframeEventPoster from '../iframe-event-poster';\n\nimport EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\nimport { EmbeddedContentEventMap, EmbeddedContentEventType } from './embedded-content-events';\nimport EmbeddedContentOptions from './embedded-content-options';\n\n@bind\nexport default class IframeEmbeddedCheckoutMessenger implements EmbeddedCheckoutMessenger {\n    /**\n     * @internal\n     */\n    constructor(\n        private _messageListener: IframeEventListener<EmbeddedContentEventMap>,\n        private _messagePoster: IframeEventPoster<EmbeddedCheckoutEvent>,\n        private _untargetedMessagePoster: IframeEventPoster<EmbeddedCheckoutEvent>,\n        private _messageHandlers: EventCallbacks<EmbeddedCheckoutEventMap> = {}\n    ) {\n        this._messageListener.listen();\n    }\n\n    postComplete(): void {\n        const message: EmbeddedCheckoutCompleteEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutComplete,\n        };\n\n        this._postMessage(message);\n    }\n\n    postError(payload: Error | CustomError): void {\n        const message: EmbeddedCheckoutErrorEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutError,\n            payload: this._transformError(payload),\n        };\n\n        this._postMessage(message);\n    }\n\n    postFrameError(payload: Error | CustomError): void {\n        const message: EmbeddedCheckoutFrameErrorEvent = {\n            type: EmbeddedCheckoutEventType.FrameError,\n            payload: this._transformError(payload),\n        };\n\n        // Ideally, all messages should be targeted at a specific origin.\n        // However, for `FrameError` message, we have to post it in an\n        // untargeted fashion. This is because the error could be caused by a\n        // missing cart. That makes it not possible to determine of site origin\n        // of the parent window. Nevertheless, we still want to notify the\n        // parent window about the error.\n        this._postMessage(message, { untargeted: true });\n    }\n\n    postFrameLoaded(payload?: EmbeddedContentOptions): void {\n        const message: EmbeddedCheckoutFrameLoadedEvent = {\n            type: EmbeddedCheckoutEventType.FrameLoaded,\n            payload,\n        };\n\n        this._postMessage(message);\n    }\n\n    postLoaded(): void {\n        const message: EmbeddedCheckoutLoadedEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutLoaded,\n        };\n\n        this._postMessage(message);\n    }\n\n    postSignedOut(): void {\n        const message: EmbeddedCheckoutSignedOutEvent = {\n            type: EmbeddedCheckoutEventType.SignedOut,\n        };\n\n        this._postMessage(message);\n    }\n\n    receiveStyles(handler: (styles: EmbeddedCheckoutStyles) => void): void {\n        this._messageListener.addListener(EmbeddedContentEventType.StyleConfigured, ({ payload }) => {\n            handler(payload);\n        });\n    }\n\n    private _postMessage(message: EmbeddedCheckoutEvent, options?: { untargeted?: boolean }): void {\n        this._notifyMessageHandlers(message);\n\n        if (options && options.untargeted) {\n            return this._untargetedMessagePoster.post(message);\n        }\n\n        this._messagePoster.post(message);\n    }\n\n    private _notifyMessageHandlers(message: EmbeddedCheckoutEvent): void {\n        Object.keys(this._messageHandlers)\n            .forEach(key => {\n                const handler = this._messageHandlers[key as keyof EmbeddedCheckoutEventMap];\n\n                if (handler) {\n                    (handler as (event: EmbeddedCheckoutEvent) => void).call(null, message);\n                }\n            });\n    }\n\n    private _transformError(error: Error | CustomError): EmbeddedCheckoutError {\n        return {\n            message: error.message,\n            type: isCustomError(error) ? error.type : undefined,\n            subtype: isCustomError(error) ? error.subtype : undefined,\n        };\n    }\n}\n\nexport type EventCallbacks<TEventMap> = {\n    [key in keyof TEventMap]?: (event: TEventMap[key]) => void;\n};\n","import { bindDecorator as bind } from '../../common/utility';\n\nimport EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\n\n@bind\nexport default class NoopEmbeddedCheckoutMessenger implements EmbeddedCheckoutMessenger {\n    postComplete(): void {}\n\n    postError(): void {}\n\n    postFrameError(): void {}\n\n    postFrameLoaded(): void {}\n\n    postLoaded(): void {}\n\n    postSignedOut(): void {}\n\n    receiveStyles(): void {}\n}\n","import { setupContentWindowForIframeResizer } from '../../common/iframe';\nimport { EmbeddedCheckoutEvent, EmbeddedCheckoutEventType } from '../embedded-checkout-events';\nimport IframeEventListener from '../iframe-event-listener';\nimport IframeEventPoster from '../iframe-event-poster';\n\nimport EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\nimport EmbeddedCheckoutMessengerOptions from './embedded-checkout-messenger-options';\nimport { EmbeddedContentEventMap } from './embedded-content-events';\nimport handleFrameLoadedEvent from './handle-frame-loaded-event';\nimport IframeEmbeddedCheckoutMessenger from './iframe-embedded-checkout-messenger';\nimport NoopEmbeddedCheckoutMessenger from './noop-embedded-checkout-messenger';\n\n/**\n * Create an instance of `EmbeddedCheckoutMessenger`.\n *\n * @remarks\n * The object is responsible for posting messages to the parent window from the\n * iframe when certain events have occurred. For example, when the checkout\n * form is first loaded, you should notify the parent window about it.\n *\n * The iframe can only be embedded in domains that are allowed by the store.\n *\n * ```ts\n * const messenger = createEmbeddedCheckoutMessenger({\n *     parentOrigin: 'https://some/website',\n * });\n *\n * messenger.postFrameLoaded();\n * ```\n *\n * @alpha\n * Please note that this feature is currently in an early stage of development.\n * Therefore the API is unstable and not ready for public consumption.\n *\n * @param options - Options for creating `EmbeddedCheckoutMessenger`\n * @returns - An instance of `EmbeddedCheckoutMessenger`\n */\nexport default function createEmbeddedCheckoutMessenger(options: EmbeddedCheckoutMessengerOptions): EmbeddedCheckoutMessenger {\n    setupContentWindowForIframeResizer();\n\n    const parentWindow = options.parentWindow || window.parent;\n\n    // Return a No-op messenger if it is not called inside an iframe\n    if (window === parentWindow) {\n        return new NoopEmbeddedCheckoutMessenger();\n    }\n\n    return new IframeEmbeddedCheckoutMessenger(\n        new IframeEventListener<EmbeddedContentEventMap>(options.parentOrigin),\n        new IframeEventPoster<EmbeddedCheckoutEvent>(options.parentOrigin, parentWindow),\n        new IframeEventPoster<EmbeddedCheckoutEvent>('*', parentWindow),\n        { [EmbeddedCheckoutEventType.FrameLoaded]: handleFrameLoadedEvent }\n    );\n}\n","import { isObject, union } from 'lodash';\nimport * as MessageFormat from 'messageformat';\n\nimport Logger from '../common/log/logger';\nimport { bindDecorator as bind } from '../common/utility';\n\nimport LanguageConfig, { Locales, Translations } from './language-config';\n\nconst DEFAULT_LOCALE = 'en';\nconst KEY_PREFIX = 'optimized_checkout';\n\n/**\n * Responsible for getting language strings.\n *\n * This object can be used to retrieve language strings that are most\n * appropriate for a given locale.\n *\n * The language strings provided to the object should follow [ICU\n * MessageFormat](http://userguide.icu-project.org/formatparse/messages) syntax.\n */\n@bind\nexport default class LanguageService {\n    private _locale: string;\n    private _locales: Locales;\n    private _translations: Translations;\n    private _formatters: { [key: string]: any };\n\n    /**\n     * @internal\n     */\n    constructor(\n        config: Partial<LanguageConfig>,\n        private _logger: Logger\n    ) {\n        const { locale, locales, translations } = this._transformConfig(config);\n\n        this._locale = locale;\n        this._locales = locales;\n        this._translations = translations;\n        this._formatters = {};\n    }\n\n    /**\n     * Remaps a set of language strings with a different set of keys.\n     *\n     * ```js\n     * service.mapKeys({\n     *     'new_key': 'existing_key',\n     * });\n     *\n     * console.log(service.translate('new_key'));\n     * ```\n     *\n     * @param maps - The set of language strings.\n     */\n    mapKeys(maps: { [key: string]: string }): void {\n        Object.keys(maps).forEach(key => {\n            const translationKey = `${KEY_PREFIX}.${maps[key]}`;\n\n            this._translations[`${KEY_PREFIX}.${key}`] = this._translations[translationKey];\n        });\n    }\n\n    /**\n     * Gets the preferred locale of the current customer.\n     *\n     * @returns The preferred locale code.\n     */\n    getLocale(): string {\n        return this._hasTranslations() ? this._locale : DEFAULT_LOCALE;\n    }\n\n    /**\n     * Gets a language string by a key.\n     *\n     * ```js\n     * service.translate('language_key');\n     * ```\n     *\n     * If the language string contains a placeholder, you can replace it by\n     * providing a second argument.\n     *\n     * ```js\n     * service.translate('language_key', { placeholder: 'Hello' });\n     * ```\n     *\n     * @param key - The language key.\n     * @param data - Data for replacing placeholders in the language string.\n     * @returns The translated language string.\n     */\n    translate(key: string, data: TranslationData = {}): string {\n        const prefixedKey = `${KEY_PREFIX}.${key}`;\n\n        if (typeof this._translations[prefixedKey] !== 'string') {\n            this._logger.warn(`Translation key \"${prefixedKey}\" is missing`);\n\n            return prefixedKey;\n        }\n\n        if (!this._formatters[prefixedKey]) {\n            const messageFormat = new MessageFormat(this._locales[prefixedKey]);\n\n            this._formatters[prefixedKey] = messageFormat.compile(this._translations[prefixedKey] || '');\n        }\n\n        return this._formatters[prefixedKey](this._transformData(data));\n    }\n\n    private _transformConfig(config: Partial<LanguageConfig> = {}): LanguageConfig {\n        const output: LanguageConfig = {\n            defaultTranslations: {},\n            translations: {},\n            locales: {},\n            locale: config.locale || DEFAULT_LOCALE,\n        };\n\n        const locales = config.locales || {};\n        const translations = this._flattenObject(config.translations || {});\n        const defaultTranslations = this._flattenObject(config.defaultTranslations || {});\n        const translationKeys = union(Object.keys(defaultTranslations), Object.keys(translations));\n\n        translationKeys.forEach(key => {\n            if (translations && translations[key]) {\n                output.translations[key] = translations[key];\n                output.locales[key] = locales[key] || output.locale;\n            } else {\n                output.translations[key] = defaultTranslations[key];\n                output.locales[key] = DEFAULT_LOCALE;\n            }\n        });\n\n        return output;\n    }\n\n    private _flattenObject(object: Translations, result: Translations = {}, parentKey: string = ''): Translations {\n        try {\n            Object.keys(object).forEach(key => {\n                const value = object[key];\n                const resultKey = parentKey ? `${parentKey}.${key}` : key;\n\n                if (isObject(value)) {\n                    return this._flattenObject(value, result, resultKey);\n                }\n\n                result[resultKey] = value;\n            });\n        } catch (err) {\n            this._logger.warn(`Unable to parse object: ${err}`);\n        }\n\n        return result;\n    }\n\n    private _transformData(data: TranslationData): TranslationData {\n        return Object.keys(data).reduce((result, key) => {\n            const value = data[key];\n\n            result[key] = value === null || value === undefined ? '' : value;\n\n            return result;\n        }, {} as TranslationData);\n    }\n\n    private _hasTranslations(): boolean {\n        return Object.keys(this._locales).map(key => this._locales[key])\n            .filter(code => code.split('-')[0] === this._locale.split('-')[0])\n            .length > 0;\n    }\n}\n\nexport interface TranslationData {\n    [key: string]: string | number;\n}\n","import { getDefaultLogger } from '../common/log';\n\nimport LanguageConfig from './language-config';\nimport LanguageService from './language-service';\n\n/**\n * Creates an instance of `LanguageService`.\n *\n * @remarks\n * ```js\n * const language = {{{langJson 'optimized_checkout'}}}; // `langJson` is a Handlebars helper provided by BigCommerce's Stencil template engine.\n * const service = createLanguageService(language);\n *\n * console.log(service.translate('address.city_label'));\n * ```\n *\n * @param config - A configuration object.\n * @returns An instance of `LanguageService`.\n */\nexport default function createLanguageService(config: Partial<LanguageConfig> = {}): LanguageService {\n    return new LanguageService(\n        config,\n        getDefaultLogger()\n    );\n}\n","import { InvalidArgumentError } from '../common/error/errors';\n\nimport { CurrencyConfig } from './currency';\n\nexport default class CurrencyFormatter {\n    private _decimalPlaces: number;\n    private _symbolLocation: string;\n    private _symbol: string;\n    private _thousandsSeparator: string;\n    private _decimalSeparator: string;\n\n    constructor(\n        currencySettings: CurrencyConfig\n    ) {\n        if (!currencySettings) {\n            throw new Error('Currency settings missing');\n        }\n\n        const {\n            decimalPlaces,\n            symbolLocation,\n            symbol,\n            thousandsSeparator,\n            decimalSeparator,\n        } = currencySettings;\n\n        if (\n            typeof symbolLocation !== 'string' ||\n            typeof symbol !== 'string' ||\n            typeof thousandsSeparator !== 'string' ||\n            typeof decimalSeparator !== 'string' ||\n            typeof decimalPlaces !== 'string'\n        ) {\n            throw new InvalidArgumentError('Invalid currency settings provided');\n        }\n\n        this._decimalPlaces = parseInt(decimalPlaces, 10);\n        this._symbolLocation = symbolLocation;\n        this._symbol = symbol;\n        this._thousandsSeparator = thousandsSeparator;\n        this._decimalSeparator = decimalSeparator;\n    }\n\n    format(amount?: number): string {\n        if (typeof amount !== 'number') {\n            throw new InvalidArgumentError('Invalid amount provided');\n        }\n\n        const formattedNumber = this._formatNumber(amount);\n\n        const formattedCurrency = this._formatCurrency(formattedNumber);\n\n        return amount < 0 ?\n            `-${formattedCurrency}` :\n            formattedCurrency;\n    }\n\n    private _formatNumber(amount: number): string {\n        const positiveAmount = Math.abs(amount);\n        const [ integerAmount, decimalAmount = '' ] = (this._toFixed(positiveAmount, this._decimalPlaces)).split('.');\n        const parsedIntegerAmount = integerAmount.replace(/\\B(?=(\\d{3})+(?!\\d))/g, this._thousandsSeparator);\n\n        if (this._decimalPlaces < 1) {\n            return parsedIntegerAmount;\n        }\n\n        return [\n            parsedIntegerAmount,\n            decimalAmount,\n        ].join(this._decimalSeparator);\n    }\n\n    private _formatCurrency(formattedNumber: string): string {\n        return (this._symbolLocation.toLowerCase() === 'left') ?\n            `${this._symbol}${formattedNumber}` :\n            `${formattedNumber}${this._symbol}`;\n    }\n\n    private _toFixed(value: number, precision: number): string {\n        return (+(Math.round(+(value + 'e' + precision)) + 'e' + -precision)).toFixed(precision);\n    }\n}\n","import { bindDecorator as bind } from '../common/utility';\nimport { StoreConfig } from '../config';\n\nimport CurrencyFormatter from './currency-formatter';\n\n/**\n * Responsible for formatting and converting currencies.\n */\n@bind\nexport default class CurrencyService {\n    private _customerFormatter: CurrencyFormatter;\n    private _storeFormatter: CurrencyFormatter;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _storeConfig: StoreConfig\n    ) {\n        this._customerFormatter = new CurrencyFormatter(this._storeConfig.shopperCurrency);\n        this._storeFormatter = new CurrencyFormatter(this._storeConfig.currency);\n    }\n\n    toCustomerCurrency(amount: number): string {\n        const exchangeRate = this._storeConfig.shopperCurrency.exchangeRate;\n\n        return this._customerFormatter.format(amount * exchangeRate);\n    }\n\n    toStoreCurrency(amount: number): string {\n        return this._storeFormatter.format(amount);\n    }\n}\n","import { StoreConfig } from '../config';\n\nimport CurrencyService from './currency-service';\n\n/**\n * Creates an instance of `CurrencyService`.\n *\n * @remarks\n * ```js\n * const { data } = checkoutService.getState();\n * const config = data.getConfig();\n * const checkout = data.getCheckout();\n * const currencyService = createCurrencyService(config);\n *\n * currencyService.toStoreCurrency(checkout.grandTotal);\n * currencyService.toCustomerCurrency(checkout.grandTotal);\n * ```\n *\n * @alpha\n * Please note that `CurrencyService` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @param config - The config object containing the currency configuration\n * @returns an instance of `CurrencyService`.\n */\nexport default function createCurrencyService(\n    config: StoreConfig\n): CurrencyService {\n    return new CurrencyService(config);\n}\n","export { createTimeout } from '@bigcommerce/request-sender';\n\nexport { createCheckoutService } from './checkout';\nexport { createCheckoutButtonInitializer } from './checkout-buttons';\nexport { embedCheckout } from './embedded-checkout';\nexport { createEmbeddedCheckoutMessenger } from './embedded-checkout/iframe-content';\nexport { createLanguageService } from './locale';\nexport { createCurrencyService } from './currency';\n","import { Checkout } from '../../../checkout';\nimport PaymentMethod from '../../payment-method';\nimport { BraintreeModuleCreator, GooglePayBraintreeSDK } from '../braintree';\n\nexport type EnvironmentType = 'PRODUCTION' | 'TEST';\ntype TokenizeType = 'AndroidPayCard' | 'CreditCard';\n\nexport interface GooglePayInitializer {\n    initialize(checkout: Checkout, paymentMethod: PaymentMethod, hasShippingAddress: boolean, publishableKey?: string): Promise<GooglePayPaymentDataRequestV2>;\n    teardown(): Promise<void>;\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload;\n}\n\nexport interface GooglePayCreator extends BraintreeModuleCreator<GooglePayBraintreeSDK> {}\n\nexport interface GooglePayPaymentOptions {\n    environment: EnvironmentType;\n}\n\nexport interface GooglePayIsReadyToPayResponse {\n    result: boolean;\n    paymentMethodPresend?: boolean;\n}\n\nexport interface GooglePaySDK {\n    payments: {\n        api: {\n            PaymentsClient: new(options: GooglePayPaymentOptions) => GooglePayClient;\n        };\n    };\n}\n\nexport interface GooglePayClient {\n    isReadyToPay(options: object): Promise<GooglePayIsReadyToPayResponse>;\n    loadPaymentData(paymentDataRequest: GooglePayPaymentDataRequestV2): Promise<GooglePaymentData>;\n    createButton(options: { [key: string]: string | object }): HTMLElement;\n}\n\nexport interface GooglePayHostWindow extends Window {\n    google?: GooglePaySDK;\n}\n\nexport interface TokenizePayload {\n    nonce: string;\n    details: {\n        cardType: string;\n        lastFour: string;\n        lastTwo?: string;\n    };\n    description?: string;\n    type: TokenizeType;\n    binData?: {\n        commercial: string;\n        countryOfIssuance: string;\n        debit: string;\n        durbinRegulated: string;\n        healthcare: string;\n        issuingBank: string;\n        payroll: string;\n        prepaid: string;\n        productId: string;\n    };\n}\n\nexport interface GooglePaymentData {\n    apiVersion: number;\n    apiVersionMinor: number;\n    paymentMethodData: {\n        description: string;\n        info: {\n            cardDetails: string;\n            cardNetwork: string;\n            billingAddress: GooglePayAddress;\n        };\n        tokenizationData: {\n            token: string;\n            type: string;\n        };\n        type: string;\n    };\n    shippingAddress: GooglePayAddress;\n    email: string;\n}\n\nexport interface GooglePayAddress {\n    address1: string;\n    address2: string;\n    address3: string;\n    administrativeArea: string;\n    companyName: string;\n    countryCode: string;\n    locality: string;\n    name: string;\n    postalCode: string;\n    sortingCode: string;\n    phoneNumber: string;\n}\n\nexport interface GooglePaymentsError {\n    statusCode: string;\n    statusMessage?: string;\n}\n\nexport interface PaymentMethodData {\n    methodId: string;\n    paymentData: {\n        method: string;\n        nonce: string;\n        cardInformation: {\n            type: string;\n            number: string;\n        };\n    };\n}\n\nexport enum ButtonType {\n    Long = 'long',\n    Short = 'short',\n}\nexport enum ButtonColor {\n    Default = 'default',\n    Black = 'black',\n    White = 'white',\n}\n\nexport interface GooglePayPaymentDataRequestV2 {\n    apiVersion: number;\n    apiVersionMinor: number;\n    merchantInfo: {\n        authJwt?: string;\n        merchantId?: string;\n        merchantName?: string;\n    };\n    allowedPaymentMethods: [{\n        type: string;\n        parameters: {\n            allowedAuthMethods: string[];\n            allowedCardNetworks: string[];\n            allowPrepaidCards?: boolean;\n            billingAddressRequired?: boolean;\n            billingAddressParameters?: {\n                format?: string;\n                phoneNumberRequired?: boolean;\n            };\n        };\n        tokenizationSpecification?: {\n            type: string;\n            parameters: {\n                gateway: string;\n                gatewayMerchantId?: string;\n                'braintree:apiVersion'?: string;\n                'braintree:clientKey'?: string;\n                'braintree:merchantId'?: string;\n                'braintree:sdkVersion'?: string;\n                'braintree:authorizationFingerprint'?: string;\n                'stripe:version'?: string;\n                'stripe:publishableKey'?: string;\n            };\n        };\n    }];\n    transactionInfo: {\n        currencyCode: string;\n        totalPriceStatus: string;\n        totalPrice?: string;\n        checkoutOption?: string;\n    };\n    emailRequired?: boolean;\n    shippingAddressRequired?: boolean;\n    shippingAddressParameters?: {\n        allowedCountryCodes?: string[];\n        phoneNumberRequired?: boolean;\n    };\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../../../address';\nimport { BillingAddressActionCreator, BillingAddressUpdateRequestBody } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport { ConsignmentActionCreator } from '../../../shipping';\nimport PaymentMethodInvalidError from '../../errors/payment-method-invalid-error';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\n\nimport {\n    ButtonColor,\n    ButtonType,\n    EnvironmentType,\n    GooglePaymentData,\n    GooglePayAddress,\n    GooglePayClient,\n    GooglePayInitializer,\n    GooglePayPaymentDataRequestV2,\n    GooglePaySDK,\n    TokenizePayload\n} from './googlepay';\nimport GooglePayScriptLoader from './googlepay-script-loader';\n\nexport default class GooglePayPaymentProcessor {\n    private _googlePayClient?: GooglePayClient;\n    private _methodId?: string;\n    private _paymentDataRequest?: GooglePayPaymentDataRequestV2;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _googlePayScriptLoader: GooglePayScriptLoader,\n        private _googlePayInitializer: GooglePayInitializer,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _consigmentActionCreator: ConsignmentActionCreator,\n        private _requestSender: RequestSender\n    ) {}\n\n    initialize(methodId: string): Promise<void> {\n        this._methodId = methodId;\n\n        return this._configureWallet();\n    }\n\n    deinitialize(): Promise<void> {\n        return this._googlePayInitializer.teardown();\n    }\n\n    createButton(\n        onClick: (event: Event) => Promise<void>,\n        buttonType: ButtonType = ButtonType.Short,\n        buttonColor: ButtonColor = ButtonColor.Default\n    ): HTMLElement {\n        if (!this._googlePayClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._googlePayClient.createButton({\n            buttonColor,\n            buttonType,\n            onClick,\n        });\n    }\n\n    displayWallet(): Promise<GooglePaymentData> {\n        if (!this._googlePayClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._googlePayClient.loadPaymentData(this._getPaymentDataRequest());\n    }\n\n    handleSuccess(paymentData: GooglePaymentData): Promise<InternalCheckoutSelectors> {\n        return this._postForm(this._googlePayInitializer.parseResponse(paymentData))\n            .then(() => this._updateBillingAddress(paymentData));\n    }\n\n    updateShippingAddress(shippingAddress: GooglePayAddress): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consigmentActionCreator.updateAddress(this._mapGooglePayAddressToShippingAddress(shippingAddress))\n        );\n    }\n\n    private _configureWallet(): Promise<void> {\n        const methodId = this._getMethodId();\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n                const checkout = state.checkout.getCheckout();\n                const hasShippingAddress = !!state.shippingAddress.getShippingAddress();\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                const { testMode } = paymentMethod.config;\n\n                return Promise.all([\n                    this._googlePayScriptLoader.load(),\n                    this._googlePayInitializer.initialize(checkout, paymentMethod, hasShippingAddress),\n                ]).then(([googlePay, paymentDataRequest]) => {\n                    this._googlePayClient = this._getGooglePayClient(googlePay, testMode);\n                    this._paymentDataRequest = paymentDataRequest;\n\n                    return this._googlePayClient.isReadyToPay({\n                        allowedPaymentMethods: [\n                            {\n                                type: paymentDataRequest.allowedPaymentMethods[0].type,\n                                parameters: {\n                                    allowedAuthMethods: paymentDataRequest.allowedPaymentMethods[0].parameters.allowedAuthMethods,\n                                    allowedCardNetworks: paymentDataRequest.allowedPaymentMethods[0].parameters.allowedCardNetworks,\n                                },\n                            },\n                        ],\n                        apiVersion: paymentDataRequest.apiVersion,\n                        apiVersionMinor: paymentDataRequest.apiVersionMinor,\n                    }).then(response => {\n                        if (response.result) {\n                            return;\n                        }\n\n                        throw new PaymentMethodInvalidError();\n                    });\n                });\n            });\n    }\n\n    private _getCardInformation(cardInformation: { cardType: string; lastFour: string }) {\n        return {\n            type: cardInformation.cardType,\n            number: cardInformation.lastFour,\n        };\n    }\n\n    private _getPaymentDataRequest(): GooglePayPaymentDataRequestV2 {\n        if (!this._paymentDataRequest) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._paymentDataRequest;\n    }\n\n    private _getGooglePayClient(google: GooglePaySDK, testMode?: boolean): GooglePayClient {\n        if (testMode === undefined) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const environment: EnvironmentType = testMode ? 'TEST' : 'PRODUCTION';\n\n        return new google.payments.api.PaymentsClient({ environment });\n    }\n\n    private _getMethodId(): string {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._methodId;\n    }\n\n    private _mapGooglePayAddressToBillingAddress(paymentData: GooglePaymentData, id: string): BillingAddressUpdateRequestBody {\n        return {\n            id,\n            firstName: paymentData.paymentMethodData.info.billingAddress.name.split(' ').slice(0, -1).join(' '),\n            lastName: paymentData.paymentMethodData.info.billingAddress.name.split(' ').slice(-1).join(' '),\n            company: paymentData.paymentMethodData.info.billingAddress.companyName,\n            address1: paymentData.paymentMethodData.info.billingAddress.address1,\n            address2: paymentData.paymentMethodData.info.billingAddress.address2 + paymentData.paymentMethodData.info.billingAddress.address3,\n            city: paymentData.paymentMethodData.info.billingAddress.locality,\n            stateOrProvince: paymentData.paymentMethodData.info.billingAddress.administrativeArea,\n            stateOrProvinceCode: paymentData.paymentMethodData.info.billingAddress.administrativeArea,\n            postalCode: paymentData.paymentMethodData.info.billingAddress.postalCode,\n            countryCode: paymentData.paymentMethodData.info.billingAddress.countryCode,\n            phone: paymentData.paymentMethodData.info.billingAddress.phoneNumber,\n            customFields: [],\n            email: paymentData.email,\n        };\n    }\n\n    private _mapGooglePayAddressToShippingAddress(address: GooglePayAddress): AddressRequestBody {\n        return {\n            firstName: address.name.split(' ').slice(0, -1).join(' '),\n            lastName: address.name.split(' ').slice(-1).join(' '),\n            company: address.companyName,\n            address1: address.address1,\n            address2: address.address2 + address.address3,\n            city: address.locality,\n            stateOrProvince: address.administrativeArea,\n            stateOrProvinceCode: address.administrativeArea,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phoneNumber,\n            customFields: [],\n        };\n    }\n\n    private _postForm(postPaymentData: TokenizePayload): Promise<Response<void>> {\n        const cardInformation = postPaymentData.details;\n\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: {\n                payment_type: postPaymentData.type,\n                nonce: postPaymentData.nonce,\n                provider: this._getMethodId(),\n                action: 'set_external_checkout',\n                card_information: this._getCardInformation(cardInformation),\n            },\n        });\n    }\n\n    private _updateBillingAddress(paymentData: GooglePaymentData): Promise<InternalCheckoutSelectors> {\n        const remoteBillingAddress = this._store.getState().billingAddress.getBillingAddress();\n\n        if (!remoteBillingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const googlePayAddressMapped = this._mapGooglePayAddressToBillingAddress(paymentData, remoteBillingAddress.id);\n\n        return this._store.dispatch(\n            this._billingAddressActionCreator.updateAddress(googlePayAddressMapped)\n        );\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { GooglePayHostWindow, GooglePaySDK } from './googlepay';\n\nexport default class GooglePayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: GooglePayHostWindow = window\n    ) {}\n\n    load(): Promise<GooglePaySDK> {\n        return this._scriptLoader\n            .loadScript('https://pay.google.com/gp/p/js/pay.js')\n            .then(() => {\n                if (!this._window.google) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.google;\n            });\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../../../billing';\nimport { CheckoutRequestSender, CheckoutStore } from '../../../checkout';\nimport { ConsignmentActionCreator, ConsignmentRequestSender } from '../../../shipping';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport PaymentMethodRequestSender from '../../payment-method-request-sender';\n\nimport { GooglePayInitializer } from './googlepay';\nimport GooglePayPaymentProcessor from './googlepay-payment-processor';\nimport GooglePayScriptLoader from './googlepay-script-loader';\n\nexport default function createGooglePayPaymentProcessor(store: CheckoutStore, initializer: GooglePayInitializer): GooglePayPaymentProcessor {\n    const requestSender = createRequestSender();\n    const scriptLoader = getScriptLoader();\n\n    return new GooglePayPaymentProcessor(\n        store,\n        new PaymentMethodActionCreator(\n            new PaymentMethodRequestSender(requestSender)\n        ),\n        new GooglePayScriptLoader(scriptLoader),\n        initializer,\n        new BillingAddressActionCreator(\n            new BillingAddressRequestSender(requestSender)\n        ),\n        new ConsignmentActionCreator(\n            new ConsignmentRequestSender(requestSender),\n            new CheckoutRequestSender(requestSender)\n        ),\n        requestSender\n    );\n}\n","import { keyBy, reduce, some } from 'lodash';\n\nimport { Checkout } from '../checkout';\nimport { AmountTransformer } from '../common/utility';\nimport { mapToInternalCoupon, mapToInternalGiftCertificate } from '../coupon';\nimport { mapToDiscountNotifications } from '../promotion';\n\nimport InternalCart from './internal-cart';\nimport mapToInternalLineItems from './map-to-internal-line-items';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCart(checkout: Checkout): InternalCart {\n    const decimalPlaces = checkout.cart.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: checkout.cart.id,\n        items: mapToInternalLineItems(checkout.cart.lineItems, decimalPlaces),\n        currency: checkout.cart.currency.code,\n        coupon: {\n            discountedAmount: reduce(checkout.cart.coupons, (sum, coupon) => {\n                return sum + coupon.discountedAmount;\n            }, 0),\n            coupons: checkout.cart.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: checkout.cart.discountAmount,\n            integerAmount: amountTransformer.toInteger(checkout.cart.discountAmount),\n        },\n        discountNotifications: mapToDiscountNotifications(checkout.promotions),\n        giftCertificate: {\n            totalDiscountedAmount: reduce(checkout.giftCertificates, (sum, certificate) => {\n                return sum + certificate.used;\n            }, 0),\n            appliedGiftCertificates: keyBy(checkout.giftCertificates.map(mapToInternalGiftCertificate), 'code'),\n        },\n        shipping: {\n            amount: checkout.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.shippingCostTotal),\n            amountBeforeDiscount: checkout.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(checkout.shippingCostBeforeDiscount),\n            required: some(checkout.cart.lineItems.physicalItems, lineItem => lineItem.isShippingRequired),\n        },\n        subtotal: {\n            amount: checkout.subtotal,\n            integerAmount: amountTransformer.toInteger(checkout.subtotal),\n        },\n        storeCredit: {\n            amount: checkout.customer ? checkout.customer.storeCredit : 0,\n        },\n        taxSubtotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        taxes: checkout.taxes,\n        taxTotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        handling: {\n            amount: checkout.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: checkout.grandTotal,\n            integerAmount: amountTransformer.toInteger(checkout.grandTotal),\n        },\n    };\n}\n","import { DiscountNotification } from '../discount';\n\nimport { Promotion } from '.';\n\nexport default function mapToDiscountNotifications(promotions?: Promotion[]): DiscountNotification[] {\n    const notifications: DiscountNotification[] = [];\n\n    (promotions || []).forEach(promotion => {\n        (promotion.banners || []).forEach(banner => {\n            notifications.push({\n                placeholders: [],\n                discountType: null,\n                message: '',\n                messageHtml: banner.text,\n            });\n        });\n    });\n\n    return notifications;\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when a shopper tries to sign in as a guest but\n * they are already signed in as a registered customer.\n */\nexport default class UnableToContinueAsGuestError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unable to continue as a guest because the customer is already signed in.');\n\n        this.name = 'UnableToContinueAsGuestError';\n        this.type = 'unable_to_continue_as_guest';\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Response } from '@bigcommerce/request-sender';\nimport { Observable, Observer } from 'rxjs';\n\nimport { Checkout, InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { GuestCredentials } from '../customer';\n\nimport { BillingAddressRequestSender } from '.';\nimport { BillingAddressUpdateRequestBody } from './billing-address';\nimport { BillingAddressActionType, ContinueAsGuestAction, UpdateBillingAddressAction } from './billing-address-actions';\nimport { UnableToContinueAsGuestError } from './errors';\n\nexport default class BillingAddressActionCreator {\n    constructor(\n        private _requestSender: BillingAddressRequestSender\n    ) {}\n\n    continueAsGuest(\n        credentials: GuestCredentials,\n        options?: RequestOptions\n    ): ThunkAction<ContinueAsGuestAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ContinueAsGuestAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const customer = state.customer.getCustomer();\n\n            if (customer && !customer.isGuest) {\n                throw new UnableToContinueAsGuestError();\n            }\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            let billingAddressRequestBody;\n\n            if (!billingAddress) {\n                billingAddressRequestBody = credentials;\n            } else {\n                const { country, ...existingBillingAddressRequestBody } = billingAddress;\n\n                billingAddressRequestBody = {\n                    ...existingBillingAddressRequestBody,\n                    ...credentials,\n                };\n            }\n\n            observer.next(createAction(BillingAddressActionType.ContinueAsGuestRequested));\n\n            this._createOrUpdateBillingAddress(checkout.id, billingAddressRequestBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(BillingAddressActionType.ContinueAsGuestSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(BillingAddressActionType.ContinueAsGuestFailed, response));\n                });\n        });\n    }\n\n    updateAddress(\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): ThunkAction<UpdateBillingAddressAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateBillingAddressAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(BillingAddressActionType.UpdateBillingAddressRequested));\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            // If email is not present in the address provided by the client, then\n            // fall back to the stored email as it could have been set separately\n            // using a convenience method. We can't rely on billingAddress having\n            // an ID to consider that there's a preexisting email, as billingAddress\n            // object from Order doesn't have an ID.\n            const billingAddressRequestBody = {\n                ...address,\n                email: typeof address.email === 'undefined' && billingAddress ? billingAddress.email : address.email,\n            };\n\n            if (billingAddress && billingAddress.id) {\n                billingAddressRequestBody.id = billingAddress.id;\n            }\n\n            this._createOrUpdateBillingAddress(checkout.id, billingAddressRequestBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(BillingAddressActionType.UpdateBillingAddressSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(BillingAddressActionType.UpdateBillingAddressFailed, response));\n                });\n        });\n    }\n\n    private _createOrUpdateBillingAddress(\n        checkoutId: string,\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): Promise<Response<Checkout>> {\n        if (!address.id) {\n            return this._requestSender.createAddress(checkoutId, address, options);\n        }\n\n        return this._requestSender.updateAddress(checkoutId, address, options);\n    }\n}\n"],"sourceRoot":""}